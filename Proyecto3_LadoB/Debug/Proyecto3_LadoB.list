
Proyecto3_LadoB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002818  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080029dc  080029dc  000039dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a2c  08002a2c  00004010  2**0
                  CONTENTS
  4 .ARM          00000008  08002a2c  08002a2c  00003a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a34  08002a34  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a34  08002a34  00003a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a38  08002a38  00003a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002a3c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000010  08002a4c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002a4c  00004118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa88  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001814  00000000  00000000  0000eac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  000102e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000078c  00000000  00000000  00010c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020887  00000000  00000000  00011404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd05  00000000  00000000  00031c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7551  00000000  00000000  0003e990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105ee1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027fc  00000000  00000000  00105f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00108720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080029c4 	.word	0x080029c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080029c4 	.word	0x080029c4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <verificarAP.1>:
  MX_UART5_Init();
  MX_USART1_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  availableParkings = 0;
  void verificarAP(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	f8c7 c004 	str.w	ip, [r7, #4]
          SSD_D_Pin, SSD_E_Pin, SSD_F_Pin,
          SSD_G_Pin
      };

      // Lee el byte correspondiente al estado de los pines
      uint8_t estado = pinStates[availableParkings];
 80004fe:	4b13      	ldr	r3, [pc, #76]	@ (800054c <verificarAP.1+0x58>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	461a      	mov	r2, r3
 8000504:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <verificarAP.1+0x5c>)
 8000506:	5c9b      	ldrb	r3, [r3, r2]
 8000508:	72fb      	strb	r3, [r7, #11]

      // Itera sobre cada pin y configura su estado
      for (int i = 0; i < 7; i++) {
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	e015      	b.n	800053c <verificarAP.1+0x48>
          HAL_GPIO_WritePin(ports[i], pins[i], (estado >> i) & 0x01);
 8000510:	4a10      	ldr	r2, [pc, #64]	@ (8000554 <verificarAP.1+0x60>)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000518:	4a0f      	ldr	r2, [pc, #60]	@ (8000558 <verificarAP.1+0x64>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000520:	7afa      	ldrb	r2, [r7, #11]
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	fa42 f303 	asr.w	r3, r2, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	b2db      	uxtb	r3, r3
 8000530:	461a      	mov	r2, r3
 8000532:	f000 fff9 	bl	8001528 <HAL_GPIO_WritePin>
      for (int i = 0; i < 7; i++) {
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	3301      	adds	r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	2b06      	cmp	r3, #6
 8000540:	dde6      	ble.n	8000510 <verificarAP.1+0x1c>
      }
  }
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000110 	.word	0x20000110
 8000550:	080029dc 	.word	0x080029dc
 8000554:	080029e8 	.word	0x080029e8
 8000558:	08002a04 	.word	0x08002a04

0800055c <main>:
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
int main(void)
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000568:	f000 fcc6 	bl	8000ef8 <HAL_Init>
  SystemClock_Config();
 800056c:	f000 f8e6 	bl	800073c <SystemClock_Config>
  MX_GPIO_Init();
 8000570:	f000 f9d4 	bl	800091c <MX_GPIO_Init>
  MX_UART5_Init();
 8000574:	f000 f97e 	bl	8000874 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000578:	f000 f9a6 	bl	80008c8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800057c:	f000 f94c 	bl	8000818 <MX_I2C1_Init>
  availableParkings = 0;
 8000580:	4b0a      	ldr	r3, [pc, #40]	@ (80005ac <main+0x50>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  availableParkings = contarSensoresDisponibles();
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	469c      	mov	ip, r3
 800058a:	f000 f811 	bl	80005b0 <contarSensoresDisponibles.0>
 800058e:	4603      	mov	r3, r0
 8000590:	461a      	mov	r2, r3
 8000592:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <main+0x50>)
 8000594:	701a      	strb	r2, [r3, #0]
	  verificarAP();
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	469c      	mov	ip, r3
 800059a:	f7ff ffab 	bl	80004f4 <verificarAP.1>
	  verificarEstadoLEDS();
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	469c      	mov	ip, r3
 80005a2:	f000 f83b 	bl	800061c <verificarEstadoLEDS.2>
	  availableParkings = contarSensoresDisponibles();
 80005a6:	bf00      	nop
 80005a8:	e7ed      	b.n	8000586 <main+0x2a>
 80005aa:	bf00      	nop
 80005ac:	20000110 	.word	0x20000110

080005b0 <contarSensoresDisponibles.0>:
  uint8_t contarSensoresDisponibles() {
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	f8c7 c004 	str.w	ip, [r7, #4]
      uint8_t contador = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]
      if (Sensor1 == AVAILABLE) {
 80005be:	4b13      	ldr	r3, [pc, #76]	@ (800060c <contarSensoresDisponibles.0+0x5c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d102      	bne.n	80005ce <contarSensoresDisponibles.0+0x1e>
              contador++;
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	3301      	adds	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
	  if (Sensor2 == AVAILABLE) {
 80005ce:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <contarSensoresDisponibles.0+0x60>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d102      	bne.n	80005de <contarSensoresDisponibles.0+0x2e>
		  contador++;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	3301      	adds	r3, #1
 80005dc:	73fb      	strb	r3, [r7, #15]
	  if (Sensor3 == AVAILABLE) {
 80005de:	4b0d      	ldr	r3, [pc, #52]	@ (8000614 <contarSensoresDisponibles.0+0x64>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d102      	bne.n	80005ee <contarSensoresDisponibles.0+0x3e>
		  contador++;
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	3301      	adds	r3, #1
 80005ec:	73fb      	strb	r3, [r7, #15]
	  if (Sensor4 == AVAILABLE) {
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <contarSensoresDisponibles.0+0x68>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d102      	bne.n	80005fe <contarSensoresDisponibles.0+0x4e>
		  contador++;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	3301      	adds	r3, #1
 80005fc:	73fb      	strb	r3, [r7, #15]
      return contador;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
  }
 8000600:	4618      	mov	r0, r3
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	20000000 	.word	0x20000000
 8000610:	20000001 	.word	0x20000001
 8000614:	20000002 	.word	0x20000002
 8000618:	20000003 	.word	0x20000003

0800061c <verificarEstadoLEDS.2>:
  void verificarEstadoLEDS(void){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	f8c7 c004 	str.w	ip, [r7, #4]
	  if (Sensor1 == AVAILABLE) {
 8000626:	4b3e      	ldr	r3, [pc, #248]	@ (8000720 <verificarEstadoLEDS.2+0x104>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b01      	cmp	r3, #1
 800062e:	d109      	bne.n	8000644 <verificarEstadoLEDS.2+0x28>
		  HAL_GPIO_WritePin(LED_SENS1_G_GPIO_Port, LED_SENS1_G_Pin, 1);
 8000630:	2201      	movs	r2, #1
 8000632:	2102      	movs	r1, #2
 8000634:	483b      	ldr	r0, [pc, #236]	@ (8000724 <verificarEstadoLEDS.2+0x108>)
 8000636:	f000 ff77 	bl	8001528 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS1_R_GPIO_Port, LED_SENS1_R_Pin, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2101      	movs	r1, #1
 800063e:	4839      	ldr	r0, [pc, #228]	@ (8000724 <verificarEstadoLEDS.2+0x108>)
 8000640:	f000 ff72 	bl	8001528 <HAL_GPIO_WritePin>
	  if (Sensor1 == NOT_AVAILABLE) {
 8000644:	4b36      	ldr	r3, [pc, #216]	@ (8000720 <verificarEstadoLEDS.2+0x104>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <verificarEstadoLEDS.2+0x46>
		  HAL_GPIO_WritePin(LED_SENS1_G_GPIO_Port, LED_SENS1_G_Pin, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2102      	movs	r1, #2
 8000652:	4834      	ldr	r0, [pc, #208]	@ (8000724 <verificarEstadoLEDS.2+0x108>)
 8000654:	f000 ff68 	bl	8001528 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS1_R_GPIO_Port, LED_SENS1_R_Pin, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	2101      	movs	r1, #1
 800065c:	4831      	ldr	r0, [pc, #196]	@ (8000724 <verificarEstadoLEDS.2+0x108>)
 800065e:	f000 ff63 	bl	8001528 <HAL_GPIO_WritePin>
	  if (Sensor2 == AVAILABLE) {
 8000662:	4b31      	ldr	r3, [pc, #196]	@ (8000728 <verificarEstadoLEDS.2+0x10c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b01      	cmp	r3, #1
 800066a:	d109      	bne.n	8000680 <verificarEstadoLEDS.2+0x64>
		  HAL_GPIO_WritePin(LED_SENS2_G_GPIO_Port, LED_SENS2_G_Pin, 1);
 800066c:	2201      	movs	r2, #1
 800066e:	2101      	movs	r1, #1
 8000670:	482e      	ldr	r0, [pc, #184]	@ (800072c <verificarEstadoLEDS.2+0x110>)
 8000672:	f000 ff59 	bl	8001528 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS2_R_GPIO_Port, LED_SENS2_R_Pin, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2110      	movs	r1, #16
 800067a:	482a      	ldr	r0, [pc, #168]	@ (8000724 <verificarEstadoLEDS.2+0x108>)
 800067c:	f000 ff54 	bl	8001528 <HAL_GPIO_WritePin>
	  if (Sensor2 == NOT_AVAILABLE) {
 8000680:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <verificarEstadoLEDS.2+0x10c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d109      	bne.n	800069e <verificarEstadoLEDS.2+0x82>
		  HAL_GPIO_WritePin(LED_SENS2_G_GPIO_Port, LED_SENS2_G_Pin, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2101      	movs	r1, #1
 800068e:	4827      	ldr	r0, [pc, #156]	@ (800072c <verificarEstadoLEDS.2+0x110>)
 8000690:	f000 ff4a 	bl	8001528 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS2_R_GPIO_Port, LED_SENS2_R_Pin, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	2110      	movs	r1, #16
 8000698:	4822      	ldr	r0, [pc, #136]	@ (8000724 <verificarEstadoLEDS.2+0x108>)
 800069a:	f000 ff45 	bl	8001528 <HAL_GPIO_WritePin>
	  if (Sensor3 == AVAILABLE) {
 800069e:	4b24      	ldr	r3, [pc, #144]	@ (8000730 <verificarEstadoLEDS.2+0x114>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d109      	bne.n	80006bc <verificarEstadoLEDS.2+0xa0>
		  HAL_GPIO_WritePin(LED_SENS3_G_GPIO_Port, LED_SENS3_G_Pin, 1);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2101      	movs	r1, #1
 80006ac:	4821      	ldr	r0, [pc, #132]	@ (8000734 <verificarEstadoLEDS.2+0x118>)
 80006ae:	f000 ff3b 	bl	8001528 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS3_R_GPIO_Port, LED_SENS3_R_Pin, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2102      	movs	r1, #2
 80006b6:	481f      	ldr	r0, [pc, #124]	@ (8000734 <verificarEstadoLEDS.2+0x118>)
 80006b8:	f000 ff36 	bl	8001528 <HAL_GPIO_WritePin>
	  if (Sensor3 == NOT_AVAILABLE) {
 80006bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <verificarEstadoLEDS.2+0x114>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d109      	bne.n	80006da <verificarEstadoLEDS.2+0xbe>
		  HAL_GPIO_WritePin(LED_SENS3_G_GPIO_Port, LED_SENS3_G_Pin, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2101      	movs	r1, #1
 80006ca:	481a      	ldr	r0, [pc, #104]	@ (8000734 <verificarEstadoLEDS.2+0x118>)
 80006cc:	f000 ff2c 	bl	8001528 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS3_R_GPIO_Port, LED_SENS3_R_Pin, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2102      	movs	r1, #2
 80006d4:	4817      	ldr	r0, [pc, #92]	@ (8000734 <verificarEstadoLEDS.2+0x118>)
 80006d6:	f000 ff27 	bl	8001528 <HAL_GPIO_WritePin>
	  if (Sensor4 == AVAILABLE) {
 80006da:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <verificarEstadoLEDS.2+0x11c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d109      	bne.n	80006f8 <verificarEstadoLEDS.2+0xdc>
		  HAL_GPIO_WritePin(LED_SENS4_G_GPIO_Port, LED_SENS4_G_Pin, 1);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2108      	movs	r1, #8
 80006e8:	4812      	ldr	r0, [pc, #72]	@ (8000734 <verificarEstadoLEDS.2+0x118>)
 80006ea:	f000 ff1d 	bl	8001528 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS4_R_GPIO_Port, LED_SENS4_R_Pin, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2104      	movs	r1, #4
 80006f2:	4810      	ldr	r0, [pc, #64]	@ (8000734 <verificarEstadoLEDS.2+0x118>)
 80006f4:	f000 ff18 	bl	8001528 <HAL_GPIO_WritePin>
	  if (Sensor4 == NOT_AVAILABLE) {
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <verificarEstadoLEDS.2+0x11c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d109      	bne.n	8000716 <verificarEstadoLEDS.2+0xfa>
		  HAL_GPIO_WritePin(LED_SENS4_G_GPIO_Port, LED_SENS4_G_Pin, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2108      	movs	r1, #8
 8000706:	480b      	ldr	r0, [pc, #44]	@ (8000734 <verificarEstadoLEDS.2+0x118>)
 8000708:	f000 ff0e 	bl	8001528 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS4_R_GPIO_Port, LED_SENS4_R_Pin, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	2104      	movs	r1, #4
 8000710:	4808      	ldr	r0, [pc, #32]	@ (8000734 <verificarEstadoLEDS.2+0x118>)
 8000712:	f000 ff09 	bl	8001528 <HAL_GPIO_WritePin>
  }
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000000 	.word	0x20000000
 8000724:	40020000 	.word	0x40020000
 8000728:	20000001 	.word	0x20000001
 800072c:	40020400 	.word	0x40020400
 8000730:	20000002 	.word	0x20000002
 8000734:	40020800 	.word	0x40020800
 8000738:	20000003 	.word	0x20000003

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	@ 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2234      	movs	r2, #52	@ 0x34
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f002 f90e 	bl	800296c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <SystemClock_Config+0xd4>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	4a29      	ldr	r2, [pc, #164]	@ (8000810 <SystemClock_Config+0xd4>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000770:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <SystemClock_Config+0xd4>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	4b24      	ldr	r3, [pc, #144]	@ (8000814 <SystemClock_Config+0xd8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000788:	4a22      	ldr	r2, [pc, #136]	@ (8000814 <SystemClock_Config+0xd8>)
 800078a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <SystemClock_Config+0xd8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079c:	2302      	movs	r3, #2
 800079e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	2310      	movs	r3, #16
 80007a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ac:	2300      	movs	r3, #0
 80007ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007b0:	2310      	movs	r3, #16
 80007b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fb6c 	bl	8001ea8 <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007d6:	f000 f9f5 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2302      	movs	r3, #2
 80007e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	2102      	movs	r1, #2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 f80c 	bl	8001814 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000802:	f000 f9df 	bl	8000bc4 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	@ 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_I2C1_Init+0x50>)
 800081e:	4a13      	ldr	r2, [pc, #76]	@ (800086c <MX_I2C1_Init+0x54>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000824:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <MX_I2C1_Init+0x58>)
 8000826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000836:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800083a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000856:	f000 fe99 	bl	800158c <HAL_I2C_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000860:	f000 f9b0 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000002c 	.word	0x2000002c
 800086c:	40005400 	.word	0x40005400
 8000870:	000186a0 	.word	0x000186a0

08000874 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_UART5_Init+0x4c>)
 800087a:	4a12      	ldr	r2, [pc, #72]	@ (80008c4 <MX_UART5_Init+0x50>)
 800087c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <MX_UART5_Init+0x4c>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_UART5_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_UART5_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <MX_UART5_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_UART5_Init+0x4c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <MX_UART5_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_UART5_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_UART5_Init+0x4c>)
 80008ac:	f001 fd9a 	bl	80023e4 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80008b6:	f000 f985 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000080 	.word	0x20000080
 80008c4:	40005000 	.word	0x40005000

080008c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008cc:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	@ (8000918 <MX_USART1_UART_Init+0x50>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008d2:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 8000900:	f001 fd70 	bl	80023e4 <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800090a:	f000 f95b 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000c8 	.word	0x200000c8
 8000918:	40011000 	.word	0x40011000

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	@ 0x28
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b68      	ldr	r3, [pc, #416]	@ (8000ad8 <MX_GPIO_Init+0x1bc>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a67      	ldr	r2, [pc, #412]	@ (8000ad8 <MX_GPIO_Init+0x1bc>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b65      	ldr	r3, [pc, #404]	@ (8000ad8 <MX_GPIO_Init+0x1bc>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b61      	ldr	r3, [pc, #388]	@ (8000ad8 <MX_GPIO_Init+0x1bc>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a60      	ldr	r2, [pc, #384]	@ (8000ad8 <MX_GPIO_Init+0x1bc>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b5e      	ldr	r3, [pc, #376]	@ (8000ad8 <MX_GPIO_Init+0x1bc>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ad8 <MX_GPIO_Init+0x1bc>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a59      	ldr	r2, [pc, #356]	@ (8000ad8 <MX_GPIO_Init+0x1bc>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b57      	ldr	r3, [pc, #348]	@ (8000ad8 <MX_GPIO_Init+0x1bc>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b53      	ldr	r3, [pc, #332]	@ (8000ad8 <MX_GPIO_Init+0x1bc>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a52      	ldr	r2, [pc, #328]	@ (8000ad8 <MX_GPIO_Init+0x1bc>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b50      	ldr	r3, [pc, #320]	@ (8000ad8 <MX_GPIO_Init+0x1bc>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b4c      	ldr	r3, [pc, #304]	@ (8000ad8 <MX_GPIO_Init+0x1bc>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a4b      	ldr	r2, [pc, #300]	@ (8000ad8 <MX_GPIO_Init+0x1bc>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b49      	ldr	r3, [pc, #292]	@ (8000ad8 <MX_GPIO_Init+0x1bc>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SENS3_G_Pin|LED_SENS3_R_Pin|LED_SENS4_R_Pin|LED_SENS4_G_Pin
 80009be:	2201      	movs	r2, #1
 80009c0:	f240 116f 	movw	r1, #367	@ 0x16f
 80009c4:	4845      	ldr	r0, [pc, #276]	@ (8000adc <MX_GPIO_Init+0x1c0>)
 80009c6:	f000 fdaf 	bl	8001528 <HAL_GPIO_WritePin>
                          |SSD_D_Pin|SSD_E_Pin|SSD_G_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_SENS1_R_Pin|LED_SENS1_G_Pin|LED_SENS2_R_Pin|SSD_A_Pin
 80009ca:	2201      	movs	r2, #1
 80009cc:	f641 0113 	movw	r1, #6163	@ 0x1813
 80009d0:	4843      	ldr	r0, [pc, #268]	@ (8000ae0 <MX_GPIO_Init+0x1c4>)
 80009d2:	f000 fda9 	bl	8001528 <HAL_GPIO_WritePin>
                          |SSD_F_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_SENS2_G_Pin|SSD_C_Pin|SSD_B_Pin|LED_SENS1_RB7_Pin, GPIO_PIN_SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	f241 0185 	movw	r1, #4229	@ 0x1085
 80009dc:	4841      	ldr	r0, [pc, #260]	@ (8000ae4 <MX_GPIO_Init+0x1c8>)
 80009de:	f000 fda3 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4838      	ldr	r0, [pc, #224]	@ (8000adc <MX_GPIO_Init+0x1c0>)
 80009fa:	f000 fc01 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SENS3_G_Pin LED_SENS3_R_Pin LED_SENS4_R_Pin LED_SENS4_G_Pin
                           SSD_D_Pin SSD_E_Pin SSD_G_Pin */
  GPIO_InitStruct.Pin = LED_SENS3_G_Pin|LED_SENS3_R_Pin|LED_SENS4_R_Pin|LED_SENS4_G_Pin
 80009fe:	f240 136f 	movw	r3, #367	@ 0x16f
 8000a02:	617b      	str	r3, [r7, #20]
                          |SSD_D_Pin|SSD_E_Pin|SSD_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4831      	ldr	r0, [pc, #196]	@ (8000adc <MX_GPIO_Init+0x1c0>)
 8000a18:	f000 fbf2 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SENS1_R_Pin LED_SENS1_G_Pin LED_SENS2_R_Pin SSD_A_Pin
                           SSD_F_Pin */
  GPIO_InitStruct.Pin = LED_SENS1_R_Pin|LED_SENS1_G_Pin|LED_SENS2_R_Pin|SSD_A_Pin
 8000a1c:	f641 0313 	movw	r3, #6163	@ 0x1813
 8000a20:	617b      	str	r3, [r7, #20]
                          |SSD_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	482a      	ldr	r0, [pc, #168]	@ (8000ae0 <MX_GPIO_Init+0x1c4>)
 8000a36:	f000 fbe3 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_TX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4822      	ldr	r0, [pc, #136]	@ (8000ae0 <MX_GPIO_Init+0x1c4>)
 8000a56:	f000 fbd3 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN3_Pin BTN4_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN3_Pin|BTN4_Pin;
 8000a5a:	23e0      	movs	r3, #224	@ 0xe0
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	481c      	ldr	r0, [pc, #112]	@ (8000ae0 <MX_GPIO_Init+0x1c4>)
 8000a70:	f000 fbc6 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SENS2_G_Pin SSD_C_Pin SSD_B_Pin LED_SENS1_RB7_Pin */
  GPIO_InitStruct.Pin = LED_SENS2_G_Pin|SSD_C_Pin|SSD_B_Pin|LED_SENS1_RB7_Pin;
 8000a74:	f241 0385 	movw	r3, #4229	@ 0x1085
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4815      	ldr	r0, [pc, #84]	@ (8000ae4 <MX_GPIO_Init+0x1c8>)
 8000a8e:	f000 fbb7 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000a92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480e      	ldr	r0, [pc, #56]	@ (8000ae4 <MX_GPIO_Init+0x1c8>)
 8000aaa:	f000 fba9 	bl	8001200 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2017      	movs	r0, #23
 8000ab4:	f000 fb6d 	bl	8001192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ab8:	2017      	movs	r0, #23
 8000aba:	f000 fb86 	bl	80011ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2028      	movs	r0, #40	@ 0x28
 8000ac4:	f000 fb65 	bl	8001192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ac8:	2028      	movs	r0, #40	@ 0x28
 8000aca:	f000 fb7e 	bl	80011ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	@ 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020800 	.word	0x40020800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
    //1
    if (GPIO_Pin == GPIO_PIN_8) {
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000af8:	d10f      	bne.n	8000b1a <HAL_GPIO_EXTI_Callback+0x32>
    	switch (Sensor1) {
 8000afa:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d002      	beq.n	8000b0a <HAL_GPIO_EXTI_Callback+0x22>
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d004      	beq.n	8000b12 <HAL_GPIO_EXTI_Callback+0x2a>
				break;
			case AVAILABLE:
				Sensor1 = NOT_AVAILABLE;
				break;
			default:
				break;
 8000b08:	e007      	b.n	8000b1a <HAL_GPIO_EXTI_Callback+0x32>
				Sensor1 = AVAILABLE;
 8000b0a:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
				break;
 8000b10:	e003      	b.n	8000b1a <HAL_GPIO_EXTI_Callback+0x32>
				Sensor1 = NOT_AVAILABLE;
 8000b12:	4b27      	ldr	r3, [pc, #156]	@ (8000bb0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
				break;
 8000b18:	bf00      	nop
		}
    }
    if (GPIO_Pin == GPIO_PIN_5) {
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	2b20      	cmp	r3, #32
 8000b1e:	d10f      	bne.n	8000b40 <HAL_GPIO_EXTI_Callback+0x58>
	   switch (Sensor2) {
 8000b20:	4b24      	ldr	r3, [pc, #144]	@ (8000bb4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d002      	beq.n	8000b30 <HAL_GPIO_EXTI_Callback+0x48>
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d004      	beq.n	8000b38 <HAL_GPIO_EXTI_Callback+0x50>
				break;
			case AVAILABLE:
				Sensor2 = NOT_AVAILABLE;
				break;
			default:
				break;
 8000b2e:	e007      	b.n	8000b40 <HAL_GPIO_EXTI_Callback+0x58>
				Sensor2 = AVAILABLE;
 8000b30:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
				break;
 8000b36:	e003      	b.n	8000b40 <HAL_GPIO_EXTI_Callback+0x58>
				Sensor2 = NOT_AVAILABLE;
 8000b38:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
				break;
 8000b3e:	bf00      	nop
		}
    }
    if (GPIO_Pin == GPIO_PIN_6) {
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	2b40      	cmp	r3, #64	@ 0x40
 8000b44:	d10f      	bne.n	8000b66 <HAL_GPIO_EXTI_Callback+0x7e>
    	switch (Sensor3) {
 8000b46:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <HAL_GPIO_EXTI_Callback+0x6e>
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d004      	beq.n	8000b5e <HAL_GPIO_EXTI_Callback+0x76>
				break;
			case AVAILABLE:
				Sensor3 = NOT_AVAILABLE;
				break;
			default:
				break;
 8000b54:	e007      	b.n	8000b66 <HAL_GPIO_EXTI_Callback+0x7e>
				Sensor3 = AVAILABLE;
 8000b56:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
				break;
 8000b5c:	e003      	b.n	8000b66 <HAL_GPIO_EXTI_Callback+0x7e>
				Sensor3 = NOT_AVAILABLE;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
				break;
 8000b64:	bf00      	nop
		}
    }
	if (GPIO_Pin == GPIO_PIN_7) {
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	2b80      	cmp	r3, #128	@ 0x80
 8000b6a:	d11b      	bne.n	8000ba4 <HAL_GPIO_EXTI_Callback+0xbc>
		switch (Sensor4) {
 8000b6c:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <HAL_GPIO_EXTI_Callback+0x94>
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d00a      	beq.n	8000b90 <HAL_GPIO_EXTI_Callback+0xa8>
			case AVAILABLE:
				availableParkings = availableParkings - 1;
				Sensor4 = NOT_AVAILABLE;
				break;
			default:
				break;
 8000b7a:	e013      	b.n	8000ba4 <HAL_GPIO_EXTI_Callback+0xbc>
				availableParkings = availableParkings + 1;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000b86:	701a      	strb	r2, [r3, #0]
				Sensor4 = AVAILABLE;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
				break;
 8000b8e:	e009      	b.n	8000ba4 <HAL_GPIO_EXTI_Callback+0xbc>
				availableParkings = availableParkings - 1;
 8000b90:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000b9a:	701a      	strb	r2, [r3, #0]
				Sensor4 = NOT_AVAILABLE;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
				break;
 8000ba2:	bf00      	nop
		}
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000001 	.word	0x20000001
 8000bb8:	20000002 	.word	0x20000002
 8000bbc:	20000003 	.word	0x20000003
 8000bc0:	20000110 	.word	0x20000110

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <Error_Handler+0x8>

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	4a0f      	ldr	r2, [pc, #60]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	4a08      	ldr	r2, [pc, #32]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c0e:	2007      	movs	r0, #7
 8000c10:	f000 fab4 	bl	800117c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	@ 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a19      	ldr	r2, [pc, #100]	@ (8000ca4 <HAL_I2C_MspInit+0x84>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d12c      	bne.n	8000c9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a17      	ldr	r2, [pc, #92]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000c5e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c64:	2312      	movs	r3, #18
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c70:	2304      	movs	r3, #4
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480c      	ldr	r0, [pc, #48]	@ (8000cac <HAL_I2C_MspInit+0x8c>)
 8000c7c:	f000 fac0 	bl	8001200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	4a07      	ldr	r2, [pc, #28]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	@ 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020400 	.word	0x40020400

08000cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	@ 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a42      	ldr	r2, [pc, #264]	@ (8000dd8 <HAL_UART_MspInit+0x128>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d14b      	bne.n	8000d6a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	4b41      	ldr	r3, [pc, #260]	@ (8000ddc <HAL_UART_MspInit+0x12c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	4a40      	ldr	r2, [pc, #256]	@ (8000ddc <HAL_UART_MspInit+0x12c>)
 8000cdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8000ddc <HAL_UART_MspInit+0x12c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	4b3a      	ldr	r3, [pc, #232]	@ (8000ddc <HAL_UART_MspInit+0x12c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a39      	ldr	r2, [pc, #228]	@ (8000ddc <HAL_UART_MspInit+0x12c>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b37      	ldr	r3, [pc, #220]	@ (8000ddc <HAL_UART_MspInit+0x12c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b33      	ldr	r3, [pc, #204]	@ (8000ddc <HAL_UART_MspInit+0x12c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a32      	ldr	r2, [pc, #200]	@ (8000ddc <HAL_UART_MspInit+0x12c>)
 8000d14:	f043 0308 	orr.w	r3, r3, #8
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b30      	ldr	r3, [pc, #192]	@ (8000ddc <HAL_UART_MspInit+0x12c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d38:	2308      	movs	r3, #8
 8000d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4827      	ldr	r0, [pc, #156]	@ (8000de0 <HAL_UART_MspInit+0x130>)
 8000d44:	f000 fa5c 	bl	8001200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	4820      	ldr	r0, [pc, #128]	@ (8000de4 <HAL_UART_MspInit+0x134>)
 8000d64:	f000 fa4c 	bl	8001200 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d68:	e031      	b.n	8000dce <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000de8 <HAL_UART_MspInit+0x138>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d12c      	bne.n	8000dce <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <HAL_UART_MspInit+0x12c>)
 8000d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7c:	4a17      	ldr	r2, [pc, #92]	@ (8000ddc <HAL_UART_MspInit+0x12c>)
 8000d7e:	f043 0310 	orr.w	r3, r3, #16
 8000d82:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <HAL_UART_MspInit+0x12c>)
 8000d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d88:	f003 0310 	and.w	r3, r3, #16
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <HAL_UART_MspInit+0x12c>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d98:	4a10      	ldr	r2, [pc, #64]	@ (8000ddc <HAL_UART_MspInit+0x12c>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <HAL_UART_MspInit+0x12c>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dac:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4808      	ldr	r0, [pc, #32]	@ (8000dec <HAL_UART_MspInit+0x13c>)
 8000dca:	f000 fa19 	bl	8001200 <HAL_GPIO_Init>
}
 8000dce:	bf00      	nop
 8000dd0:	3730      	adds	r7, #48	@ 0x30
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40005000 	.word	0x40005000
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40020c00 	.word	0x40020c00
 8000de8:	40011000 	.word	0x40011000
 8000dec:	40020000 	.word	0x40020000

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <NMI_Handler+0x4>

08000df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <MemManage_Handler+0x4>

08000e08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e46:	f000 f8a9 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8000e52:	2020      	movs	r0, #32
 8000e54:	f000 fb82 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8000e58:	2040      	movs	r0, #64	@ 0x40
 8000e5a:	f000 fb7f 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8000e5e:	2080      	movs	r0, #128	@ 0x80
 8000e60:	f000 fb7c 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000e64:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000e68:	f000 fb78 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e74:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e78:	f000 fb70 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <SystemInit+0x20>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ea0 <SystemInit+0x20>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ea4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000edc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ea8:	f7ff ffea 	bl	8000e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eac:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eae:	490d      	ldr	r1, [pc, #52]	@ (8000ee4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f001 fd53 	bl	800297c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed6:	f7ff fb41 	bl	800055c <main>
  bx  lr    
 8000eda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000edc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ee8:	08002a3c 	.word	0x08002a3c
  ldr r2, =_sbss
 8000eec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ef0:	20000118 	.word	0x20000118

08000ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	@ (8000f38 <HAL_Init+0x40>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f08:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <HAL_Init+0x40>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <HAL_Init+0x40>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f92b 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f808 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f7ff fe50 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_InitTick+0x54>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_InitTick+0x58>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f943 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 f90b 	bl	8001192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	@ (8000f98 <HAL_InitTick+0x5c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000004 	.word	0x20000004
 8000f94:	2000000c 	.word	0x2000000c
 8000f98:	20000008 	.word	0x20000008

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	2000000c 	.word	0x2000000c
 8000fc0:	20000114 	.word	0x20000114

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	@ (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000114 	.word	0x20000114

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	@ (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	@ (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	@ (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	@ 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	@ 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff29 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff3e 	bl	8001024 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff8e 	bl	80010d0 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5d 	bl	800107c <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff31 	bl	8001040 <__NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffa2 	bl	8001138 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	@ 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	e165      	b.n	80014e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	429a      	cmp	r2, r3
 8001236:	f040 8154 	bne.w	80014e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b01      	cmp	r3, #1
 8001244:	d005      	beq.n	8001252 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124e:	2b02      	cmp	r3, #2
 8001250:	d130      	bne.n	80012b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	f003 0201 	and.w	r2, r3, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d017      	beq.n	80012f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d123      	bne.n	8001344 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	08da      	lsrs	r2, r3, #3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3208      	adds	r2, #8
 8001304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	220f      	movs	r2, #15
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	08da      	lsrs	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3208      	adds	r2, #8
 800133e:	69b9      	ldr	r1, [r7, #24]
 8001340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0203 	and.w	r2, r3, #3
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80ae 	beq.w	80014e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b5d      	ldr	r3, [pc, #372]	@ (8001500 <HAL_GPIO_Init+0x300>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138e:	4a5c      	ldr	r2, [pc, #368]	@ (8001500 <HAL_GPIO_Init+0x300>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001394:	6453      	str	r3, [r2, #68]	@ 0x44
 8001396:	4b5a      	ldr	r3, [pc, #360]	@ (8001500 <HAL_GPIO_Init+0x300>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a2:	4a58      	ldr	r2, [pc, #352]	@ (8001504 <HAL_GPIO_Init+0x304>)
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3302      	adds	r3, #2
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	220f      	movs	r2, #15
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001508 <HAL_GPIO_Init+0x308>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d025      	beq.n	800141a <HAL_GPIO_Init+0x21a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4e      	ldr	r2, [pc, #312]	@ (800150c <HAL_GPIO_Init+0x30c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d01f      	beq.n	8001416 <HAL_GPIO_Init+0x216>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001510 <HAL_GPIO_Init+0x310>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d019      	beq.n	8001412 <HAL_GPIO_Init+0x212>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001514 <HAL_GPIO_Init+0x314>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d013      	beq.n	800140e <HAL_GPIO_Init+0x20e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001518 <HAL_GPIO_Init+0x318>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00d      	beq.n	800140a <HAL_GPIO_Init+0x20a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4a      	ldr	r2, [pc, #296]	@ (800151c <HAL_GPIO_Init+0x31c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d007      	beq.n	8001406 <HAL_GPIO_Init+0x206>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a49      	ldr	r2, [pc, #292]	@ (8001520 <HAL_GPIO_Init+0x320>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_GPIO_Init+0x202>
 80013fe:	2306      	movs	r3, #6
 8001400:	e00c      	b.n	800141c <HAL_GPIO_Init+0x21c>
 8001402:	2307      	movs	r3, #7
 8001404:	e00a      	b.n	800141c <HAL_GPIO_Init+0x21c>
 8001406:	2305      	movs	r3, #5
 8001408:	e008      	b.n	800141c <HAL_GPIO_Init+0x21c>
 800140a:	2304      	movs	r3, #4
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x21c>
 800140e:	2303      	movs	r3, #3
 8001410:	e004      	b.n	800141c <HAL_GPIO_Init+0x21c>
 8001412:	2302      	movs	r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x21c>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_GPIO_Init+0x21c>
 800141a:	2300      	movs	r3, #0
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	f002 0203 	and.w	r2, r2, #3
 8001422:	0092      	lsls	r2, r2, #2
 8001424:	4093      	lsls	r3, r2
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800142c:	4935      	ldr	r1, [pc, #212]	@ (8001504 <HAL_GPIO_Init+0x304>)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143a:	4b3a      	ldr	r3, [pc, #232]	@ (8001524 <HAL_GPIO_Init+0x324>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800145e:	4a31      	ldr	r2, [pc, #196]	@ (8001524 <HAL_GPIO_Init+0x324>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001464:	4b2f      	ldr	r3, [pc, #188]	@ (8001524 <HAL_GPIO_Init+0x324>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001488:	4a26      	ldr	r2, [pc, #152]	@ (8001524 <HAL_GPIO_Init+0x324>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800148e:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <HAL_GPIO_Init+0x324>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001524 <HAL_GPIO_Init+0x324>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <HAL_GPIO_Init+0x324>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014dc:	4a11      	ldr	r2, [pc, #68]	@ (8001524 <HAL_GPIO_Init+0x324>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3301      	adds	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	f67f ae96 	bls.w	800121c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3724      	adds	r7, #36	@ 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40013800 	.word	0x40013800
 8001508:	40020000 	.word	0x40020000
 800150c:	40020400 	.word	0x40020400
 8001510:	40020800 	.word	0x40020800
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40021000 	.word	0x40021000
 800151c:	40021400 	.word	0x40021400
 8001520:	40021800 	.word	0x40021800
 8001524:	40013c00 	.word	0x40013c00

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001544:	e003      	b.n	800154e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	041a      	lsls	r2, r3, #16
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	619a      	str	r2, [r3, #24]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001566:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001568:	695a      	ldr	r2, [r3, #20]
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	4013      	ands	r3, r2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001572:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fab4 	bl	8000ae8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40013c00 	.word	0x40013c00

0800158c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e12b      	b.n	80017f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d106      	bne.n	80015b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fb34 	bl	8000c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2224      	movs	r2, #36	@ 0x24
 80015bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0201 	bic.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015f0:	f000 fa02 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 80015f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4a81      	ldr	r2, [pc, #516]	@ (8001800 <HAL_I2C_Init+0x274>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d807      	bhi.n	8001610 <HAL_I2C_Init+0x84>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4a80      	ldr	r2, [pc, #512]	@ (8001804 <HAL_I2C_Init+0x278>)
 8001604:	4293      	cmp	r3, r2
 8001606:	bf94      	ite	ls
 8001608:	2301      	movls	r3, #1
 800160a:	2300      	movhi	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	e006      	b.n	800161e <HAL_I2C_Init+0x92>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4a7d      	ldr	r2, [pc, #500]	@ (8001808 <HAL_I2C_Init+0x27c>)
 8001614:	4293      	cmp	r3, r2
 8001616:	bf94      	ite	ls
 8001618:	2301      	movls	r3, #1
 800161a:	2300      	movhi	r3, #0
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e0e7      	b.n	80017f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4a78      	ldr	r2, [pc, #480]	@ (800180c <HAL_I2C_Init+0x280>)
 800162a:	fba2 2303 	umull	r2, r3, r2, r3
 800162e:	0c9b      	lsrs	r3, r3, #18
 8001630:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	430a      	orrs	r2, r1
 8001644:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4a6a      	ldr	r2, [pc, #424]	@ (8001800 <HAL_I2C_Init+0x274>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d802      	bhi.n	8001660 <HAL_I2C_Init+0xd4>
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	3301      	adds	r3, #1
 800165e:	e009      	b.n	8001674 <HAL_I2C_Init+0xe8>
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001666:	fb02 f303 	mul.w	r3, r2, r3
 800166a:	4a69      	ldr	r2, [pc, #420]	@ (8001810 <HAL_I2C_Init+0x284>)
 800166c:	fba2 2303 	umull	r2, r3, r2, r3
 8001670:	099b      	lsrs	r3, r3, #6
 8001672:	3301      	adds	r3, #1
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	430b      	orrs	r3, r1
 800167a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001686:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	495c      	ldr	r1, [pc, #368]	@ (8001800 <HAL_I2C_Init+0x274>)
 8001690:	428b      	cmp	r3, r1
 8001692:	d819      	bhi.n	80016c8 <HAL_I2C_Init+0x13c>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1e59      	subs	r1, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fbb1 f3f3 	udiv	r3, r1, r3
 80016a2:	1c59      	adds	r1, r3, #1
 80016a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016a8:	400b      	ands	r3, r1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00a      	beq.n	80016c4 <HAL_I2C_Init+0x138>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1e59      	subs	r1, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016bc:	3301      	adds	r3, #1
 80016be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c2:	e051      	b.n	8001768 <HAL_I2C_Init+0x1dc>
 80016c4:	2304      	movs	r3, #4
 80016c6:	e04f      	b.n	8001768 <HAL_I2C_Init+0x1dc>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d111      	bne.n	80016f4 <HAL_I2C_Init+0x168>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1e58      	subs	r0, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6859      	ldr	r1, [r3, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	440b      	add	r3, r1
 80016de:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e2:	3301      	adds	r3, #1
 80016e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bf0c      	ite	eq
 80016ec:	2301      	moveq	r3, #1
 80016ee:	2300      	movne	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	e012      	b.n	800171a <HAL_I2C_Init+0x18e>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	1e58      	subs	r0, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6859      	ldr	r1, [r3, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	0099      	lsls	r1, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	fbb0 f3f3 	udiv	r3, r0, r3
 800170a:	3301      	adds	r3, #1
 800170c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf0c      	ite	eq
 8001714:	2301      	moveq	r3, #1
 8001716:	2300      	movne	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_I2C_Init+0x196>
 800171e:	2301      	movs	r3, #1
 8001720:	e022      	b.n	8001768 <HAL_I2C_Init+0x1dc>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10e      	bne.n	8001748 <HAL_I2C_Init+0x1bc>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1e58      	subs	r0, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6859      	ldr	r1, [r3, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	440b      	add	r3, r1
 8001738:	fbb0 f3f3 	udiv	r3, r0, r3
 800173c:	3301      	adds	r3, #1
 800173e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001746:	e00f      	b.n	8001768 <HAL_I2C_Init+0x1dc>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1e58      	subs	r0, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	0099      	lsls	r1, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	fbb0 f3f3 	udiv	r3, r0, r3
 800175e:	3301      	adds	r3, #1
 8001760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001764:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	6809      	ldr	r1, [r1, #0]
 800176c:	4313      	orrs	r3, r2
 800176e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001796:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6911      	ldr	r1, [r2, #16]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	68d2      	ldr	r2, [r2, #12]
 80017a2:	4311      	orrs	r1, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	430b      	orrs	r3, r1
 80017aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0201 	orr.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2220      	movs	r2, #32
 80017e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	000186a0 	.word	0x000186a0
 8001804:	001e847f 	.word	0x001e847f
 8001808:	003d08ff 	.word	0x003d08ff
 800180c:	431bde83 	.word	0x431bde83
 8001810:	10624dd3 	.word	0x10624dd3

08001814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0cc      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b68      	ldr	r3, [pc, #416]	@ (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d90c      	bls.n	8001850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b65      	ldr	r3, [pc, #404]	@ (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b63      	ldr	r3, [pc, #396]	@ (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0b8      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d020      	beq.n	800189e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001868:	4b59      	ldr	r3, [pc, #356]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4a58      	ldr	r2, [pc, #352]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001872:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001880:	4b53      	ldr	r3, [pc, #332]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a52      	ldr	r2, [pc, #328]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800188a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188c:	4b50      	ldr	r3, [pc, #320]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	494d      	ldr	r1, [pc, #308]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d044      	beq.n	8001934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b47      	ldr	r3, [pc, #284]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d119      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e07f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d003      	beq.n	80018d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d2:	4b3f      	ldr	r3, [pc, #252]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e06f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e2:	4b3b      	ldr	r3, [pc, #236]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e067      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f2:	4b37      	ldr	r3, [pc, #220]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f023 0203 	bic.w	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4934      	ldr	r1, [pc, #208]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	4313      	orrs	r3, r2
 8001902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001904:	f7ff fb5e 	bl	8000fc4 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	e00a      	b.n	8001922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190c:	f7ff fb5a 	bl	8000fc4 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e04f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	4b2b      	ldr	r3, [pc, #172]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 020c 	and.w	r2, r3, #12
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	429a      	cmp	r2, r3
 8001932:	d1eb      	bne.n	800190c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001934:	4b25      	ldr	r3, [pc, #148]	@ (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d20c      	bcs.n	800195c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b20      	ldr	r3, [pc, #128]	@ (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e032      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001968:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4916      	ldr	r1, [pc, #88]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001986:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	490e      	ldr	r1, [pc, #56]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800199a:	f000 f855 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 800199e:	4602      	mov	r2, r0
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	490a      	ldr	r1, [pc, #40]	@ (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 80019ac:	5ccb      	ldrb	r3, [r1, r3]
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	4a09      	ldr	r2, [pc, #36]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <HAL_RCC_ClockConfig+0x1c8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fabe 	bl	8000f3c <HAL_InitTick>

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023c00 	.word	0x40023c00
 80019d0:	40023800 	.word	0x40023800
 80019d4:	08002a14 	.word	0x08002a14
 80019d8:	20000004 	.word	0x20000004
 80019dc:	20000008 	.word	0x20000008

080019e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000004 	.word	0x20000004

080019f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019fc:	f7ff fff0 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	0a9b      	lsrs	r3, r3, #10
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4903      	ldr	r1, [pc, #12]	@ (8001a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	08002a24 	.word	0x08002a24

08001a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a24:	f7ff ffdc 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	0b5b      	lsrs	r3, r3, #13
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	4903      	ldr	r1, [pc, #12]	@ (8001a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a36:	5ccb      	ldrb	r3, [r1, r3]
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40023800 	.word	0x40023800
 8001a44:	08002a24 	.word	0x08002a24

08001a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a4c:	b0ae      	sub	sp, #184	@ 0xb8
 8001a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a6e:	4bcb      	ldr	r3, [pc, #812]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	f200 8206 	bhi.w	8001e88 <HAL_RCC_GetSysClockFreq+0x440>
 8001a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a84 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a82:	bf00      	nop
 8001a84:	08001ab9 	.word	0x08001ab9
 8001a88:	08001e89 	.word	0x08001e89
 8001a8c:	08001e89 	.word	0x08001e89
 8001a90:	08001e89 	.word	0x08001e89
 8001a94:	08001ac1 	.word	0x08001ac1
 8001a98:	08001e89 	.word	0x08001e89
 8001a9c:	08001e89 	.word	0x08001e89
 8001aa0:	08001e89 	.word	0x08001e89
 8001aa4:	08001ac9 	.word	0x08001ac9
 8001aa8:	08001e89 	.word	0x08001e89
 8001aac:	08001e89 	.word	0x08001e89
 8001ab0:	08001e89 	.word	0x08001e89
 8001ab4:	08001cb9 	.word	0x08001cb9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ab8:	4bb9      	ldr	r3, [pc, #740]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001aba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001abe:	e1e7      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac0:	4bb8      	ldr	r3, [pc, #736]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ac6:	e1e3      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac8:	4bb4      	ldr	r3, [pc, #720]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad4:	4bb1      	ldr	r3, [pc, #708]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d071      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae0:	4bae      	ldr	r3, [pc, #696]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	099b      	lsrs	r3, r3, #6
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001aec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001b06:	4622      	mov	r2, r4
 8001b08:	462b      	mov	r3, r5
 8001b0a:	f04f 0000 	mov.w	r0, #0
 8001b0e:	f04f 0100 	mov.w	r1, #0
 8001b12:	0159      	lsls	r1, r3, #5
 8001b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b18:	0150      	lsls	r0, r2, #5
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4621      	mov	r1, r4
 8001b20:	1a51      	subs	r1, r2, r1
 8001b22:	6439      	str	r1, [r7, #64]	@ 0x40
 8001b24:	4629      	mov	r1, r5
 8001b26:	eb63 0301 	sbc.w	r3, r3, r1
 8001b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001b38:	4649      	mov	r1, r9
 8001b3a:	018b      	lsls	r3, r1, #6
 8001b3c:	4641      	mov	r1, r8
 8001b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b42:	4641      	mov	r1, r8
 8001b44:	018a      	lsls	r2, r1, #6
 8001b46:	4641      	mov	r1, r8
 8001b48:	1a51      	subs	r1, r2, r1
 8001b4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001b4c:	4649      	mov	r1, r9
 8001b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001b60:	4649      	mov	r1, r9
 8001b62:	00cb      	lsls	r3, r1, #3
 8001b64:	4641      	mov	r1, r8
 8001b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b6a:	4641      	mov	r1, r8
 8001b6c:	00ca      	lsls	r2, r1, #3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	4603      	mov	r3, r0
 8001b74:	4622      	mov	r2, r4
 8001b76:	189b      	adds	r3, r3, r2
 8001b78:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b7a:	462b      	mov	r3, r5
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	eb42 0303 	adc.w	r3, r2, r3
 8001b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b90:	4629      	mov	r1, r5
 8001b92:	024b      	lsls	r3, r1, #9
 8001b94:	4621      	mov	r1, r4
 8001b96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	024a      	lsls	r2, r1, #9
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001bac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001bb0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001bb4:	f7fe fb26 	bl	8000204 <__aeabi_uldivmod>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001bc2:	e067      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc4:	4b75      	ldr	r3, [pc, #468]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	099b      	lsrs	r3, r3, #6
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001bd0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001bd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001bde:	2300      	movs	r3, #0
 8001be0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001be2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001be6:	4622      	mov	r2, r4
 8001be8:	462b      	mov	r3, r5
 8001bea:	f04f 0000 	mov.w	r0, #0
 8001bee:	f04f 0100 	mov.w	r1, #0
 8001bf2:	0159      	lsls	r1, r3, #5
 8001bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf8:	0150      	lsls	r0, r2, #5
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4621      	mov	r1, r4
 8001c00:	1a51      	subs	r1, r2, r1
 8001c02:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001c04:	4629      	mov	r1, r5
 8001c06:	eb63 0301 	sbc.w	r3, r3, r1
 8001c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001c18:	4649      	mov	r1, r9
 8001c1a:	018b      	lsls	r3, r1, #6
 8001c1c:	4641      	mov	r1, r8
 8001c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c22:	4641      	mov	r1, r8
 8001c24:	018a      	lsls	r2, r1, #6
 8001c26:	4641      	mov	r1, r8
 8001c28:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c2c:	4649      	mov	r1, r9
 8001c2e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c3e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c46:	4692      	mov	sl, r2
 8001c48:	469b      	mov	fp, r3
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	eb1a 0303 	adds.w	r3, sl, r3
 8001c50:	623b      	str	r3, [r7, #32]
 8001c52:	462b      	mov	r3, r5
 8001c54:	eb4b 0303 	adc.w	r3, fp, r3
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c66:	4629      	mov	r1, r5
 8001c68:	028b      	lsls	r3, r1, #10
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c70:	4621      	mov	r1, r4
 8001c72:	028a      	lsls	r2, r1, #10
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001c80:	677a      	str	r2, [r7, #116]	@ 0x74
 8001c82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c86:	f7fe fabd 	bl	8000204 <__aeabi_uldivmod>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4613      	mov	r3, r2
 8001c90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c94:	4b41      	ldr	r3, [pc, #260]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	0c1b      	lsrs	r3, r3, #16
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001caa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cb6:	e0eb      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb8:	4b38      	ldr	r3, [pc, #224]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cc4:	4b35      	ldr	r3, [pc, #212]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d06b      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd0:	4b32      	ldr	r3, [pc, #200]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	099b      	lsrs	r3, r3, #6
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001cda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001cdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ce2:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ce8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001cec:	4622      	mov	r2, r4
 8001cee:	462b      	mov	r3, r5
 8001cf0:	f04f 0000 	mov.w	r0, #0
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	0159      	lsls	r1, r3, #5
 8001cfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cfe:	0150      	lsls	r0, r2, #5
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4621      	mov	r1, r4
 8001d06:	1a51      	subs	r1, r2, r1
 8001d08:	61b9      	str	r1, [r7, #24]
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	eb63 0301 	sbc.w	r3, r3, r1
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001d1e:	4659      	mov	r1, fp
 8001d20:	018b      	lsls	r3, r1, #6
 8001d22:	4651      	mov	r1, sl
 8001d24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d28:	4651      	mov	r1, sl
 8001d2a:	018a      	lsls	r2, r1, #6
 8001d2c:	4651      	mov	r1, sl
 8001d2e:	ebb2 0801 	subs.w	r8, r2, r1
 8001d32:	4659      	mov	r1, fp
 8001d34:	eb63 0901 	sbc.w	r9, r3, r1
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d4c:	4690      	mov	r8, r2
 8001d4e:	4699      	mov	r9, r3
 8001d50:	4623      	mov	r3, r4
 8001d52:	eb18 0303 	adds.w	r3, r8, r3
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	462b      	mov	r3, r5
 8001d5a:	eb49 0303 	adc.w	r3, r9, r3
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	024b      	lsls	r3, r1, #9
 8001d70:	4621      	mov	r1, r4
 8001d72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d76:	4621      	mov	r1, r4
 8001d78:	024a      	lsls	r2, r1, #9
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d82:	2200      	movs	r2, #0
 8001d84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d86:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001d88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d8c:	f7fe fa3a 	bl	8000204 <__aeabi_uldivmod>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4613      	mov	r3, r2
 8001d96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001d9a:	e065      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x420>
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	00f42400 	.word	0x00f42400
 8001da4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	099b      	lsrs	r3, r3, #6
 8001dae:	2200      	movs	r2, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	4611      	mov	r1, r2
 8001db4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001db8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001dba:	2300      	movs	r3, #0
 8001dbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8001dbe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001dc2:	4642      	mov	r2, r8
 8001dc4:	464b      	mov	r3, r9
 8001dc6:	f04f 0000 	mov.w	r0, #0
 8001dca:	f04f 0100 	mov.w	r1, #0
 8001dce:	0159      	lsls	r1, r3, #5
 8001dd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dd4:	0150      	lsls	r0, r2, #5
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4641      	mov	r1, r8
 8001ddc:	1a51      	subs	r1, r2, r1
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	4649      	mov	r1, r9
 8001de2:	eb63 0301 	sbc.w	r3, r3, r1
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001df4:	4659      	mov	r1, fp
 8001df6:	018b      	lsls	r3, r1, #6
 8001df8:	4651      	mov	r1, sl
 8001dfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dfe:	4651      	mov	r1, sl
 8001e00:	018a      	lsls	r2, r1, #6
 8001e02:	4651      	mov	r1, sl
 8001e04:	1a54      	subs	r4, r2, r1
 8001e06:	4659      	mov	r1, fp
 8001e08:	eb63 0501 	sbc.w	r5, r3, r1
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	00eb      	lsls	r3, r5, #3
 8001e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e1a:	00e2      	lsls	r2, r4, #3
 8001e1c:	4614      	mov	r4, r2
 8001e1e:	461d      	mov	r5, r3
 8001e20:	4643      	mov	r3, r8
 8001e22:	18e3      	adds	r3, r4, r3
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	464b      	mov	r3, r9
 8001e28:	eb45 0303 	adc.w	r3, r5, r3
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	028b      	lsls	r3, r1, #10
 8001e3e:	4621      	mov	r1, r4
 8001e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e44:	4621      	mov	r1, r4
 8001e46:	028a      	lsls	r2, r1, #10
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e50:	2200      	movs	r2, #0
 8001e52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e54:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001e56:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e5a:	f7fe f9d3 	bl	8000204 <__aeabi_uldivmod>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4613      	mov	r3, r2
 8001e64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	0f1b      	lsrs	r3, r3, #28
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001e76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001e7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e86:	e003      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	37b8      	adds	r7, #184	@ 0xb8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	00f42400 	.word	0x00f42400

08001ea8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e28d      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8083 	beq.w	8001fce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ec8:	4b94      	ldr	r3, [pc, #592]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d019      	beq.n	8001f08 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ed4:	4b91      	ldr	r3, [pc, #580]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
        || \
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ee0:	4b8e      	ldr	r3, [pc, #568]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eec:	d00c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eee:	4b8b      	ldr	r3, [pc, #556]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ef6:	2b0c      	cmp	r3, #12
 8001ef8:	d112      	bne.n	8001f20 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001efa:	4b88      	ldr	r3, [pc, #544]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f06:	d10b      	bne.n	8001f20 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	4b84      	ldr	r3, [pc, #528]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d05b      	beq.n	8001fcc <HAL_RCC_OscConfig+0x124>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d157      	bne.n	8001fcc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e25a      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f28:	d106      	bne.n	8001f38 <HAL_RCC_OscConfig+0x90>
 8001f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a7b      	ldr	r2, [pc, #492]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e01d      	b.n	8001f74 <HAL_RCC_OscConfig+0xcc>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0xb4>
 8001f42:	4b76      	ldr	r3, [pc, #472]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a75      	ldr	r2, [pc, #468]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b73      	ldr	r3, [pc, #460]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a72      	ldr	r2, [pc, #456]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCC_OscConfig+0xcc>
 8001f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a6e      	ldr	r2, [pc, #440]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b6c      	ldr	r3, [pc, #432]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001f6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d013      	beq.n	8001fa4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f822 	bl	8000fc4 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff f81e 	bl	8000fc4 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	@ 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e21f      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b61      	ldr	r3, [pc, #388]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0xdc>
 8001fa2:	e014      	b.n	8001fce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f80e 	bl	8000fc4 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fac:	f7ff f80a 	bl	8000fc4 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	@ 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e20b      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbe:	4b57      	ldr	r3, [pc, #348]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x104>
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d06f      	beq.n	80020ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fda:	4b50      	ldr	r3, [pc, #320]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d017      	beq.n	8002016 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001fe6:	4b4d      	ldr	r3, [pc, #308]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
        || \
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d105      	bne.n	8001ffe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffe:	4b47      	ldr	r3, [pc, #284]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d11c      	bne.n	8002044 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800200a:	4b44      	ldr	r3, [pc, #272]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d116      	bne.n	8002044 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	4b41      	ldr	r3, [pc, #260]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <HAL_RCC_OscConfig+0x186>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1d3      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b3b      	ldr	r3, [pc, #236]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4937      	ldr	r1, [pc, #220]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	e03a      	b.n	80020ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d020      	beq.n	800208e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800204c:	4b34      	ldr	r3, [pc, #208]	@ (8002120 <HAL_RCC_OscConfig+0x278>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7fe ffb7 	bl	8000fc4 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205a:	f7fe ffb3 	bl	8000fc4 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e1b4      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206c:	4b2b      	ldr	r3, [pc, #172]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	4b28      	ldr	r3, [pc, #160]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4925      	ldr	r1, [pc, #148]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e015      	b.n	80020ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208e:	4b24      	ldr	r3, [pc, #144]	@ (8002120 <HAL_RCC_OscConfig+0x278>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7fe ff96 	bl	8000fc4 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209c:	f7fe ff92 	bl	8000fc4 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e193      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ae:	4b1b      	ldr	r3, [pc, #108]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d036      	beq.n	8002134 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d016      	beq.n	80020fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ce:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d4:	f7fe ff76 	bl	8000fc4 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020dc:	f7fe ff72 	bl	8000fc4 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e173      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ee:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_RCC_OscConfig+0x274>)
 80020f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x234>
 80020fa:	e01b      	b.n	8002134 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fc:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002102:	f7fe ff5f 	bl	8000fc4 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002108:	e00e      	b.n	8002128 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210a:	f7fe ff5b 	bl	8000fc4 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d907      	bls.n	8002128 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e15c      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
 800211c:	40023800 	.word	0x40023800
 8002120:	42470000 	.word	0x42470000
 8002124:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	4b8a      	ldr	r3, [pc, #552]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 800212a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1ea      	bne.n	800210a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8097 	beq.w	8002270 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002146:	4b83      	ldr	r3, [pc, #524]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10f      	bne.n	8002172 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	4b7f      	ldr	r3, [pc, #508]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	4a7e      	ldr	r2, [pc, #504]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 800215c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002160:	6413      	str	r3, [r2, #64]	@ 0x40
 8002162:	4b7c      	ldr	r3, [pc, #496]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216e:	2301      	movs	r3, #1
 8002170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002172:	4b79      	ldr	r3, [pc, #484]	@ (8002358 <HAL_RCC_OscConfig+0x4b0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d118      	bne.n	80021b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217e:	4b76      	ldr	r3, [pc, #472]	@ (8002358 <HAL_RCC_OscConfig+0x4b0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a75      	ldr	r2, [pc, #468]	@ (8002358 <HAL_RCC_OscConfig+0x4b0>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218a:	f7fe ff1b 	bl	8000fc4 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002192:	f7fe ff17 	bl	8000fc4 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e118      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002358 <HAL_RCC_OscConfig+0x4b0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d106      	bne.n	80021c6 <HAL_RCC_OscConfig+0x31e>
 80021b8:	4b66      	ldr	r3, [pc, #408]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021bc:	4a65      	ldr	r2, [pc, #404]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021c4:	e01c      	b.n	8002200 <HAL_RCC_OscConfig+0x358>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b05      	cmp	r3, #5
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x340>
 80021ce:	4b61      	ldr	r3, [pc, #388]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d2:	4a60      	ldr	r2, [pc, #384]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021da:	4b5e      	ldr	r3, [pc, #376]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021de:	4a5d      	ldr	r2, [pc, #372]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0x358>
 80021e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 80021ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ec:	4a59      	ldr	r2, [pc, #356]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 80021ee:	f023 0301 	bic.w	r3, r3, #1
 80021f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021f4:	4b57      	ldr	r3, [pc, #348]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f8:	4a56      	ldr	r2, [pc, #344]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 80021fa:	f023 0304 	bic.w	r3, r3, #4
 80021fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d015      	beq.n	8002234 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7fe fedc 	bl	8000fc4 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220e:	e00a      	b.n	8002226 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002210:	f7fe fed8 	bl	8000fc4 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e0d7      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002226:	4b4b      	ldr	r3, [pc, #300]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0ee      	beq.n	8002210 <HAL_RCC_OscConfig+0x368>
 8002232:	e014      	b.n	800225e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7fe fec6 	bl	8000fc4 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223a:	e00a      	b.n	8002252 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7fe fec2 	bl	8000fc4 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0c1      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002252:	4b40      	ldr	r3, [pc, #256]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1ee      	bne.n	800223c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800225e:	7dfb      	ldrb	r3, [r7, #23]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d105      	bne.n	8002270 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002264:	4b3b      	ldr	r3, [pc, #236]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002268:	4a3a      	ldr	r2, [pc, #232]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 800226a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800226e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80ad 	beq.w	80023d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800227a:	4b36      	ldr	r3, [pc, #216]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b08      	cmp	r3, #8
 8002284:	d060      	beq.n	8002348 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d145      	bne.n	800231a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228e:	4b33      	ldr	r3, [pc, #204]	@ (800235c <HAL_RCC_OscConfig+0x4b4>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7fe fe96 	bl	8000fc4 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229c:	f7fe fe92 	bl	8000fc4 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e093      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ae:	4b29      	ldr	r3, [pc, #164]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69da      	ldr	r2, [r3, #28]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	019b      	lsls	r3, r3, #6
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d0:	085b      	lsrs	r3, r3, #1
 80022d2:	3b01      	subs	r3, #1
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022dc:	061b      	lsls	r3, r3, #24
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e4:	071b      	lsls	r3, r3, #28
 80022e6:	491b      	ldr	r1, [pc, #108]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ec:	4b1b      	ldr	r3, [pc, #108]	@ (800235c <HAL_RCC_OscConfig+0x4b4>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7fe fe67 	bl	8000fc4 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fa:	f7fe fe63 	bl	8000fc4 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e064      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230c:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x452>
 8002318:	e05c      	b.n	80023d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b10      	ldr	r3, [pc, #64]	@ (800235c <HAL_RCC_OscConfig+0x4b4>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe fe50 	bl	8000fc4 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe fe4c 	bl	8000fc4 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e04d      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_RCC_OscConfig+0x4ac>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x480>
 8002346:	e045      	b.n	80023d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d107      	bne.n	8002360 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e040      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
 8002354:	40023800 	.word	0x40023800
 8002358:	40007000 	.word	0x40007000
 800235c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002360:	4b1f      	ldr	r3, [pc, #124]	@ (80023e0 <HAL_RCC_OscConfig+0x538>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d030      	beq.n	80023d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d129      	bne.n	80023d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d122      	bne.n	80023d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002390:	4013      	ands	r3, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002398:	4293      	cmp	r3, r2
 800239a:	d119      	bne.n	80023d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	085b      	lsrs	r3, r3, #1
 80023a8:	3b01      	subs	r3, #1
 80023aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d10f      	bne.n	80023d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800

080023e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e042      	b.n	800247c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fe fc50 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2224      	movs	r2, #36	@ 0x24
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f82b 	bl	8002484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800243c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800244c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800245c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002488:	b0c0      	sub	sp, #256	@ 0x100
 800248a:	af00      	add	r7, sp, #0
 800248c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800249c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a0:	68d9      	ldr	r1, [r3, #12]
 80024a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	ea40 0301 	orr.w	r3, r0, r1
 80024ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80024dc:	f021 010c 	bic.w	r1, r1, #12
 80024e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024ea:	430b      	orrs	r3, r1
 80024ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80024fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024fe:	6999      	ldr	r1, [r3, #24]
 8002500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	ea40 0301 	orr.w	r3, r0, r1
 800250a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b8f      	ldr	r3, [pc, #572]	@ (8002750 <UART_SetConfig+0x2cc>)
 8002514:	429a      	cmp	r2, r3
 8002516:	d005      	beq.n	8002524 <UART_SetConfig+0xa0>
 8002518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4b8d      	ldr	r3, [pc, #564]	@ (8002754 <UART_SetConfig+0x2d0>)
 8002520:	429a      	cmp	r2, r3
 8002522:	d104      	bne.n	800252e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002524:	f7ff fa7c 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 8002528:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800252c:	e003      	b.n	8002536 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800252e:	f7ff fa63 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8002532:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002540:	f040 810c 	bne.w	800275c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002548:	2200      	movs	r2, #0
 800254a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800254e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002552:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002556:	4622      	mov	r2, r4
 8002558:	462b      	mov	r3, r5
 800255a:	1891      	adds	r1, r2, r2
 800255c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800255e:	415b      	adcs	r3, r3
 8002560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002562:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002566:	4621      	mov	r1, r4
 8002568:	eb12 0801 	adds.w	r8, r2, r1
 800256c:	4629      	mov	r1, r5
 800256e:	eb43 0901 	adc.w	r9, r3, r1
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800257e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002586:	4690      	mov	r8, r2
 8002588:	4699      	mov	r9, r3
 800258a:	4623      	mov	r3, r4
 800258c:	eb18 0303 	adds.w	r3, r8, r3
 8002590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002594:	462b      	mov	r3, r5
 8002596:	eb49 0303 	adc.w	r3, r9, r3
 800259a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800259e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80025aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80025ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80025b2:	460b      	mov	r3, r1
 80025b4:	18db      	adds	r3, r3, r3
 80025b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80025b8:	4613      	mov	r3, r2
 80025ba:	eb42 0303 	adc.w	r3, r2, r3
 80025be:	657b      	str	r3, [r7, #84]	@ 0x54
 80025c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80025c8:	f7fd fe1c 	bl	8000204 <__aeabi_uldivmod>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4b61      	ldr	r3, [pc, #388]	@ (8002758 <UART_SetConfig+0x2d4>)
 80025d2:	fba3 2302 	umull	r2, r3, r3, r2
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	011c      	lsls	r4, r3, #4
 80025da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025de:	2200      	movs	r2, #0
 80025e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80025e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80025ec:	4642      	mov	r2, r8
 80025ee:	464b      	mov	r3, r9
 80025f0:	1891      	adds	r1, r2, r2
 80025f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80025f4:	415b      	adcs	r3, r3
 80025f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025fc:	4641      	mov	r1, r8
 80025fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002602:	4649      	mov	r1, r9
 8002604:	eb43 0b01 	adc.w	fp, r3, r1
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002614:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800261c:	4692      	mov	sl, r2
 800261e:	469b      	mov	fp, r3
 8002620:	4643      	mov	r3, r8
 8002622:	eb1a 0303 	adds.w	r3, sl, r3
 8002626:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800262a:	464b      	mov	r3, r9
 800262c:	eb4b 0303 	adc.w	r3, fp, r3
 8002630:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002640:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002644:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002648:	460b      	mov	r3, r1
 800264a:	18db      	adds	r3, r3, r3
 800264c:	643b      	str	r3, [r7, #64]	@ 0x40
 800264e:	4613      	mov	r3, r2
 8002650:	eb42 0303 	adc.w	r3, r2, r3
 8002654:	647b      	str	r3, [r7, #68]	@ 0x44
 8002656:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800265a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800265e:	f7fd fdd1 	bl	8000204 <__aeabi_uldivmod>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4611      	mov	r1, r2
 8002668:	4b3b      	ldr	r3, [pc, #236]	@ (8002758 <UART_SetConfig+0x2d4>)
 800266a:	fba3 2301 	umull	r2, r3, r3, r1
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2264      	movs	r2, #100	@ 0x64
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	1acb      	subs	r3, r1, r3
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800267e:	4b36      	ldr	r3, [pc, #216]	@ (8002758 <UART_SetConfig+0x2d4>)
 8002680:	fba3 2302 	umull	r2, r3, r3, r2
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800268c:	441c      	add	r4, r3
 800268e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002692:	2200      	movs	r2, #0
 8002694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002698:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800269c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80026a0:	4642      	mov	r2, r8
 80026a2:	464b      	mov	r3, r9
 80026a4:	1891      	adds	r1, r2, r2
 80026a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026a8:	415b      	adcs	r3, r3
 80026aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026b0:	4641      	mov	r1, r8
 80026b2:	1851      	adds	r1, r2, r1
 80026b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80026b6:	4649      	mov	r1, r9
 80026b8:	414b      	adcs	r3, r1
 80026ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80026c8:	4659      	mov	r1, fp
 80026ca:	00cb      	lsls	r3, r1, #3
 80026cc:	4651      	mov	r1, sl
 80026ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026d2:	4651      	mov	r1, sl
 80026d4:	00ca      	lsls	r2, r1, #3
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	4603      	mov	r3, r0
 80026dc:	4642      	mov	r2, r8
 80026de:	189b      	adds	r3, r3, r2
 80026e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026e4:	464b      	mov	r3, r9
 80026e6:	460a      	mov	r2, r1
 80026e8:	eb42 0303 	adc.w	r3, r2, r3
 80026ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80026fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002700:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002704:	460b      	mov	r3, r1
 8002706:	18db      	adds	r3, r3, r3
 8002708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800270a:	4613      	mov	r3, r2
 800270c:	eb42 0303 	adc.w	r3, r2, r3
 8002710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002712:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002716:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800271a:	f7fd fd73 	bl	8000204 <__aeabi_uldivmod>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4b0d      	ldr	r3, [pc, #52]	@ (8002758 <UART_SetConfig+0x2d4>)
 8002724:	fba3 1302 	umull	r1, r3, r3, r2
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	2164      	movs	r1, #100	@ 0x64
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	3332      	adds	r3, #50	@ 0x32
 8002736:	4a08      	ldr	r2, [pc, #32]	@ (8002758 <UART_SetConfig+0x2d4>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	095b      	lsrs	r3, r3, #5
 800273e:	f003 0207 	and.w	r2, r3, #7
 8002742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4422      	add	r2, r4
 800274a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800274c:	e106      	b.n	800295c <UART_SetConfig+0x4d8>
 800274e:	bf00      	nop
 8002750:	40011000 	.word	0x40011000
 8002754:	40011400 	.word	0x40011400
 8002758:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800275c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002760:	2200      	movs	r2, #0
 8002762:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002766:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800276a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800276e:	4642      	mov	r2, r8
 8002770:	464b      	mov	r3, r9
 8002772:	1891      	adds	r1, r2, r2
 8002774:	6239      	str	r1, [r7, #32]
 8002776:	415b      	adcs	r3, r3
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
 800277a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800277e:	4641      	mov	r1, r8
 8002780:	1854      	adds	r4, r2, r1
 8002782:	4649      	mov	r1, r9
 8002784:	eb43 0501 	adc.w	r5, r3, r1
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	00eb      	lsls	r3, r5, #3
 8002792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002796:	00e2      	lsls	r2, r4, #3
 8002798:	4614      	mov	r4, r2
 800279a:	461d      	mov	r5, r3
 800279c:	4643      	mov	r3, r8
 800279e:	18e3      	adds	r3, r4, r3
 80027a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027a4:	464b      	mov	r3, r9
 80027a6:	eb45 0303 	adc.w	r3, r5, r3
 80027aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027ca:	4629      	mov	r1, r5
 80027cc:	008b      	lsls	r3, r1, #2
 80027ce:	4621      	mov	r1, r4
 80027d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027d4:	4621      	mov	r1, r4
 80027d6:	008a      	lsls	r2, r1, #2
 80027d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80027dc:	f7fd fd12 	bl	8000204 <__aeabi_uldivmod>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4b60      	ldr	r3, [pc, #384]	@ (8002968 <UART_SetConfig+0x4e4>)
 80027e6:	fba3 2302 	umull	r2, r3, r3, r2
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	011c      	lsls	r4, r3, #4
 80027ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027f2:	2200      	movs	r2, #0
 80027f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002800:	4642      	mov	r2, r8
 8002802:	464b      	mov	r3, r9
 8002804:	1891      	adds	r1, r2, r2
 8002806:	61b9      	str	r1, [r7, #24]
 8002808:	415b      	adcs	r3, r3
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002810:	4641      	mov	r1, r8
 8002812:	1851      	adds	r1, r2, r1
 8002814:	6139      	str	r1, [r7, #16]
 8002816:	4649      	mov	r1, r9
 8002818:	414b      	adcs	r3, r1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002828:	4659      	mov	r1, fp
 800282a:	00cb      	lsls	r3, r1, #3
 800282c:	4651      	mov	r1, sl
 800282e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002832:	4651      	mov	r1, sl
 8002834:	00ca      	lsls	r2, r1, #3
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	4603      	mov	r3, r0
 800283c:	4642      	mov	r2, r8
 800283e:	189b      	adds	r3, r3, r2
 8002840:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002844:	464b      	mov	r3, r9
 8002846:	460a      	mov	r2, r1
 8002848:	eb42 0303 	adc.w	r3, r2, r3
 800284c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	67bb      	str	r3, [r7, #120]	@ 0x78
 800285a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002868:	4649      	mov	r1, r9
 800286a:	008b      	lsls	r3, r1, #2
 800286c:	4641      	mov	r1, r8
 800286e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002872:	4641      	mov	r1, r8
 8002874:	008a      	lsls	r2, r1, #2
 8002876:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800287a:	f7fd fcc3 	bl	8000204 <__aeabi_uldivmod>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4611      	mov	r1, r2
 8002884:	4b38      	ldr	r3, [pc, #224]	@ (8002968 <UART_SetConfig+0x4e4>)
 8002886:	fba3 2301 	umull	r2, r3, r3, r1
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2264      	movs	r2, #100	@ 0x64
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	1acb      	subs	r3, r1, r3
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	3332      	adds	r3, #50	@ 0x32
 8002898:	4a33      	ldr	r2, [pc, #204]	@ (8002968 <UART_SetConfig+0x4e4>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028a4:	441c      	add	r4, r3
 80028a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028aa:	2200      	movs	r2, #0
 80028ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80028ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80028b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80028b4:	4642      	mov	r2, r8
 80028b6:	464b      	mov	r3, r9
 80028b8:	1891      	adds	r1, r2, r2
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	415b      	adcs	r3, r3
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028c4:	4641      	mov	r1, r8
 80028c6:	1851      	adds	r1, r2, r1
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	4649      	mov	r1, r9
 80028cc:	414b      	adcs	r3, r1
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028dc:	4659      	mov	r1, fp
 80028de:	00cb      	lsls	r3, r1, #3
 80028e0:	4651      	mov	r1, sl
 80028e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e6:	4651      	mov	r1, sl
 80028e8:	00ca      	lsls	r2, r1, #3
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	4642      	mov	r2, r8
 80028f2:	189b      	adds	r3, r3, r2
 80028f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028f6:	464b      	mov	r3, r9
 80028f8:	460a      	mov	r2, r1
 80028fa:	eb42 0303 	adc.w	r3, r2, r3
 80028fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	663b      	str	r3, [r7, #96]	@ 0x60
 800290a:	667a      	str	r2, [r7, #100]	@ 0x64
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002918:	4649      	mov	r1, r9
 800291a:	008b      	lsls	r3, r1, #2
 800291c:	4641      	mov	r1, r8
 800291e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002922:	4641      	mov	r1, r8
 8002924:	008a      	lsls	r2, r1, #2
 8002926:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800292a:	f7fd fc6b 	bl	8000204 <__aeabi_uldivmod>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4b0d      	ldr	r3, [pc, #52]	@ (8002968 <UART_SetConfig+0x4e4>)
 8002934:	fba3 1302 	umull	r1, r3, r3, r2
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	2164      	movs	r1, #100	@ 0x64
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	3332      	adds	r3, #50	@ 0x32
 8002946:	4a08      	ldr	r2, [pc, #32]	@ (8002968 <UART_SetConfig+0x4e4>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	f003 020f 	and.w	r2, r3, #15
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4422      	add	r2, r4
 800295a:	609a      	str	r2, [r3, #8]
}
 800295c:	bf00      	nop
 800295e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002962:	46bd      	mov	sp, r7
 8002964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002968:	51eb851f 	.word	0x51eb851f

0800296c <memset>:
 800296c:	4402      	add	r2, r0
 800296e:	4603      	mov	r3, r0
 8002970:	4293      	cmp	r3, r2
 8002972:	d100      	bne.n	8002976 <memset+0xa>
 8002974:	4770      	bx	lr
 8002976:	f803 1b01 	strb.w	r1, [r3], #1
 800297a:	e7f9      	b.n	8002970 <memset+0x4>

0800297c <__libc_init_array>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	4d0d      	ldr	r5, [pc, #52]	@ (80029b4 <__libc_init_array+0x38>)
 8002980:	4c0d      	ldr	r4, [pc, #52]	@ (80029b8 <__libc_init_array+0x3c>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	2600      	movs	r6, #0
 8002988:	42a6      	cmp	r6, r4
 800298a:	d109      	bne.n	80029a0 <__libc_init_array+0x24>
 800298c:	4d0b      	ldr	r5, [pc, #44]	@ (80029bc <__libc_init_array+0x40>)
 800298e:	4c0c      	ldr	r4, [pc, #48]	@ (80029c0 <__libc_init_array+0x44>)
 8002990:	f000 f818 	bl	80029c4 <_init>
 8002994:	1b64      	subs	r4, r4, r5
 8002996:	10a4      	asrs	r4, r4, #2
 8002998:	2600      	movs	r6, #0
 800299a:	42a6      	cmp	r6, r4
 800299c:	d105      	bne.n	80029aa <__libc_init_array+0x2e>
 800299e:	bd70      	pop	{r4, r5, r6, pc}
 80029a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a4:	4798      	blx	r3
 80029a6:	3601      	adds	r6, #1
 80029a8:	e7ee      	b.n	8002988 <__libc_init_array+0xc>
 80029aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ae:	4798      	blx	r3
 80029b0:	3601      	adds	r6, #1
 80029b2:	e7f2      	b.n	800299a <__libc_init_array+0x1e>
 80029b4:	08002a34 	.word	0x08002a34
 80029b8:	08002a34 	.word	0x08002a34
 80029bc:	08002a34 	.word	0x08002a34
 80029c0:	08002a38 	.word	0x08002a38

080029c4 <_init>:
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c6:	bf00      	nop
 80029c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ca:	bc08      	pop	{r3}
 80029cc:	469e      	mov	lr, r3
 80029ce:	4770      	bx	lr

080029d0 <_fini>:
 80029d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d2:	bf00      	nop
 80029d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d6:	bc08      	pop	{r3}
 80029d8:	469e      	mov	lr, r3
 80029da:	4770      	bx	lr
