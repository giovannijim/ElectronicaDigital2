
ProbandoMenu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007690  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08007854  08007854  00008854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d80  08007d80  00009028  2**0
                  CONTENTS
  4 .ARM          00000008  08007d80  08007d80  00008d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d88  08007d88  00009028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d88  08007d88  00008d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d8c  08007d8c  00008d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08007d90  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b68  20000028  08007db8  00009028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008b90  08007db8  00009b90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fda0  00000000  00000000  00009058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a27  00000000  00000000  00018df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  0001b820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9f  00000000  00000000  0001c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023653  00000000  00000000  0001d087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b57  00000000  00000000  000406da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce168  00000000  00000000  00055231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123399  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d0  00000000  00000000  001233dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00126bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000028 	.word	0x20000028
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800783c 	.word	0x0800783c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	0800783c 	.word	0x0800783c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2140      	movs	r1, #64	@ 0x40
 800050c:	4803      	ldr	r0, [pc, #12]	@ (800051c <SELECT+0x18>)
 800050e:	f001 ffbf 	bl	8002490 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f001 fc54 	bl	8001dc0 <HAL_Delay>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40020400 	.word	0x40020400

08000520 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2140      	movs	r1, #64	@ 0x40
 8000528:	4803      	ldr	r0, [pc, #12]	@ (8000538 <DESELECT+0x18>)
 800052a:	f001 ffb1 	bl	8002490 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800052e:	2001      	movs	r0, #1
 8000530:	f001 fc46 	bl	8001dc0 <HAL_Delay>
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40020400 	.word	0x40020400

0800053c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000546:	bf00      	nop
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <SPI_TxByte+0x30>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	2b02      	cmp	r3, #2
 8000554:	d1f8      	bne.n	8000548 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000556:	1df9      	adds	r1, r7, #7
 8000558:	2364      	movs	r3, #100	@ 0x64
 800055a:	2201      	movs	r2, #1
 800055c:	4803      	ldr	r0, [pc, #12]	@ (800056c <SPI_TxByte+0x30>)
 800055e:	f002 fd9c 	bl	800309a <HAL_SPI_Transmit>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	2000004c 	.word	0x2000004c

08000570 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800057c:	bf00      	nop
 800057e:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <SPI_TxBuffer+0x30>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	f003 0302 	and.w	r3, r3, #2
 8000588:	2b02      	cmp	r3, #2
 800058a:	d1f8      	bne.n	800057e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800058c:	887a      	ldrh	r2, [r7, #2]
 800058e:	2364      	movs	r3, #100	@ 0x64
 8000590:	6879      	ldr	r1, [r7, #4]
 8000592:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <SPI_TxBuffer+0x30>)
 8000594:	f002 fd81 	bl	800309a <HAL_SPI_Transmit>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000004c 	.word	0x2000004c

080005a4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80005aa:	23ff      	movs	r3, #255	@ 0xff
 80005ac:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005ae:	bf00      	nop
 80005b0:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <SPI_RxByte+0x34>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d1f8      	bne.n	80005b0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005be:	1dba      	adds	r2, r7, #6
 80005c0:	1df9      	adds	r1, r7, #7
 80005c2:	2364      	movs	r3, #100	@ 0x64
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <SPI_RxByte+0x34>)
 80005ca:	f002 fea9 	bl	8003320 <HAL_SPI_TransmitReceive>

	return data;
 80005ce:	79bb      	ldrb	r3, [r7, #6]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000004c 	.word	0x2000004c

080005dc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005e4:	f7ff ffde 	bl	80005a4 <SPI_RxByte>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	701a      	strb	r2, [r3, #0]
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <SD_ReadyWait+0x30>)
 8000600:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000604:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000606:	f7ff ffcd 	bl	80005a4 <SPI_RxByte>
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2bff      	cmp	r3, #255	@ 0xff
 8000612:	d003      	beq.n	800061c <SD_ReadyWait+0x24>
 8000614:	4b04      	ldr	r3, [pc, #16]	@ (8000628 <SD_ReadyWait+0x30>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1f4      	bne.n	8000606 <SD_ReadyWait+0xe>

	return res;
 800061c:	79fb      	ldrb	r3, [r7, #7]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000046 	.word	0x20000046

0800062c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000632:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000636:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000638:	f7ff ff72 	bl	8000520 <DESELECT>
	for(int i = 0; i < 10; i++)
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	e005      	b.n	800064e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000642:	20ff      	movs	r0, #255	@ 0xff
 8000644:	f7ff ff7a 	bl	800053c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	3301      	adds	r3, #1
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	2b09      	cmp	r3, #9
 8000652:	ddf6      	ble.n	8000642 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000654:	f7ff ff56 	bl	8000504 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000658:	2340      	movs	r3, #64	@ 0x40
 800065a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800066c:	2395      	movs	r3, #149	@ 0x95
 800066e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000670:	463b      	mov	r3, r7
 8000672:	2106      	movs	r1, #6
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff7b 	bl	8000570 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800067a:	e002      	b.n	8000682 <SD_PowerOn+0x56>
	{
		cnt--;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3b01      	subs	r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000682:	f7ff ff8f 	bl	80005a4 <SPI_RxByte>
 8000686:	4603      	mov	r3, r0
 8000688:	2b01      	cmp	r3, #1
 800068a:	d002      	beq.n	8000692 <SD_PowerOn+0x66>
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f4      	bne.n	800067c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000692:	f7ff ff45 	bl	8000520 <DESELECT>
	SPI_TxByte(0XFF);
 8000696:	20ff      	movs	r0, #255	@ 0xff
 8000698:	f7ff ff50 	bl	800053c <SPI_TxByte>

	PowerFlag = 1;
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <SD_PowerOn+0x80>)
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000049 	.word	0x20000049

080006b0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80006b4:	4b03      	ldr	r3, [pc, #12]	@ (80006c4 <SD_PowerOff+0x14>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	20000049 	.word	0x20000049

080006c8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	return PowerFlag;
 80006cc:	4b03      	ldr	r3, [pc, #12]	@ (80006dc <SD_CheckPower+0x14>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000049 	.word	0x20000049

080006e0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006ea:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <SD_RxDataBlock+0x58>)
 80006ec:	22c8      	movs	r2, #200	@ 0xc8
 80006ee:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006f0:	f7ff ff58 	bl	80005a4 <SPI_RxByte>
 80006f4:	4603      	mov	r3, r0
 80006f6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	2bff      	cmp	r3, #255	@ 0xff
 80006fc:	d103      	bne.n	8000706 <SD_RxDataBlock+0x26>
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SD_RxDataBlock+0x58>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1f4      	bne.n	80006f0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	2bfe      	cmp	r3, #254	@ 0xfe
 800070a:	d001      	beq.n	8000710 <SD_RxDataBlock+0x30>
 800070c:	2300      	movs	r3, #0
 800070e:	e00f      	b.n	8000730 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff60 	bl	80005dc <SPI_RxBytePtr>
	} while(len--);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	1e5a      	subs	r2, r3, #1
 8000720:	603a      	str	r2, [r7, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f4      	bne.n	8000710 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000726:	f7ff ff3d 	bl	80005a4 <SPI_RxByte>
	SPI_RxByte();
 800072a:	f7ff ff3b 	bl	80005a4 <SPI_RxByte>

	return TRUE;
 800072e:	2301      	movs	r3, #1
}
 8000730:	4618      	mov	r0, r3
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000044 	.word	0x20000044

0800073c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800074c:	f7ff ff54 	bl	80005f8 <SD_ReadyWait>
 8000750:	4603      	mov	r3, r0
 8000752:	2bff      	cmp	r3, #255	@ 0xff
 8000754:	d001      	beq.n	800075a <SD_TxDataBlock+0x1e>
 8000756:	2300      	movs	r3, #0
 8000758:	e02f      	b.n	80007ba <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff feed 	bl	800053c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	2bfd      	cmp	r3, #253	@ 0xfd
 8000766:	d020      	beq.n	80007aa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000768:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff feff 	bl	8000570 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000772:	f7ff ff17 	bl	80005a4 <SPI_RxByte>
		SPI_RxByte();
 8000776:	f7ff ff15 	bl	80005a4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800077a:	e00b      	b.n	8000794 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800077c:	f7ff ff12 	bl	80005a4 <SPI_RxByte>
 8000780:	4603      	mov	r3, r0
 8000782:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	f003 031f 	and.w	r3, r3, #31
 800078a:	2b05      	cmp	r3, #5
 800078c:	d006      	beq.n	800079c <SD_TxDataBlock+0x60>
			i++;
 800078e:	7bbb      	ldrb	r3, [r7, #14]
 8000790:	3301      	adds	r3, #1
 8000792:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000794:	7bbb      	ldrb	r3, [r7, #14]
 8000796:	2b40      	cmp	r3, #64	@ 0x40
 8000798:	d9f0      	bls.n	800077c <SD_TxDataBlock+0x40>
 800079a:	e000      	b.n	800079e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800079c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800079e:	bf00      	nop
 80007a0:	f7ff ff00 	bl	80005a4 <SPI_RxByte>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d0fa      	beq.n	80007a0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	f003 031f 	and.w	r3, r3, #31
 80007b0:	2b05      	cmp	r3, #5
 80007b2:	d101      	bne.n	80007b8 <SD_TxDataBlock+0x7c>
 80007b4:	2301      	movs	r3, #1
 80007b6:	e000      	b.n	80007ba <SD_TxDataBlock+0x7e>

	return FALSE;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b084      	sub	sp, #16
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	6039      	str	r1, [r7, #0]
 80007cc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007ce:	f7ff ff13 	bl	80005f8 <SD_ReadyWait>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2bff      	cmp	r3, #255	@ 0xff
 80007d6:	d001      	beq.n	80007dc <SD_SendCmd+0x1a>
 80007d8:	23ff      	movs	r3, #255	@ 0xff
 80007da:	e042      	b.n	8000862 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff feac 	bl	800053c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	0e1b      	lsrs	r3, r3, #24
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fea6 	bl	800053c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	0c1b      	lsrs	r3, r3, #16
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fea0 	bl	800053c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fe9a 	bl	800053c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fe95 	bl	800053c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b40      	cmp	r3, #64	@ 0x40
 8000816:	d102      	bne.n	800081e <SD_SendCmd+0x5c>
 8000818:	2395      	movs	r3, #149	@ 0x95
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	e007      	b.n	800082e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b48      	cmp	r3, #72	@ 0x48
 8000822:	d102      	bne.n	800082a <SD_SendCmd+0x68>
 8000824:	2387      	movs	r3, #135	@ 0x87
 8000826:	73fb      	strb	r3, [r7, #15]
 8000828:	e001      	b.n	800082e <SD_SendCmd+0x6c>
	else crc = 1;
 800082a:	2301      	movs	r3, #1
 800082c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fe83 	bl	800053c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b4c      	cmp	r3, #76	@ 0x4c
 800083a:	d101      	bne.n	8000840 <SD_SendCmd+0x7e>
 800083c:	f7ff feb2 	bl	80005a4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000840:	230a      	movs	r3, #10
 8000842:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000844:	f7ff feae 	bl	80005a4 <SPI_RxByte>
 8000848:	4603      	mov	r3, r0
 800084a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800084c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000850:	2b00      	cmp	r3, #0
 8000852:	da05      	bge.n	8000860 <SD_SendCmd+0x9e>
 8000854:	7bbb      	ldrb	r3, [r7, #14]
 8000856:	3b01      	subs	r3, #1
 8000858:	73bb      	strb	r3, [r7, #14]
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1f1      	bne.n	8000844 <SD_SendCmd+0x82>

	return res;
 8000860:	7b7b      	ldrb	r3, [r7, #13]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SD_disk_initialize+0x14>
 800087c:	2301      	movs	r3, #1
 800087e:	e0d1      	b.n	8000a24 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000880:	4b6a      	ldr	r3, [pc, #424]	@ (8000a2c <SD_disk_initialize+0x1c0>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	2b00      	cmp	r3, #0
 800088c:	d003      	beq.n	8000896 <SD_disk_initialize+0x2a>
 800088e:	4b67      	ldr	r3, [pc, #412]	@ (8000a2c <SD_disk_initialize+0x1c0>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	e0c6      	b.n	8000a24 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000896:	f7ff fec9 	bl	800062c <SD_PowerOn>

	/* slave select */
	SELECT();
 800089a:	f7ff fe33 	bl	8000504 <SELECT>

	/* check disk type */
	type = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80008a2:	2100      	movs	r1, #0
 80008a4:	2040      	movs	r0, #64	@ 0x40
 80008a6:	f7ff ff8c 	bl	80007c2 <SD_SendCmd>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	f040 80a1 	bne.w	80009f4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80008b2:	4b5f      	ldr	r3, [pc, #380]	@ (8000a30 <SD_disk_initialize+0x1c4>)
 80008b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80008ba:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80008be:	2048      	movs	r0, #72	@ 0x48
 80008c0:	f7ff ff7f 	bl	80007c2 <SD_SendCmd>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d155      	bne.n	8000976 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]
 80008ce:	e00c      	b.n	80008ea <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008d0:	7bfc      	ldrb	r4, [r7, #15]
 80008d2:	f7ff fe67 	bl	80005a4 <SPI_RxByte>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	f104 0310 	add.w	r3, r4, #16
 80008de:	443b      	add	r3, r7
 80008e0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	3301      	adds	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d9ef      	bls.n	80008d0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008f0:	7abb      	ldrb	r3, [r7, #10]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d17e      	bne.n	80009f4 <SD_disk_initialize+0x188>
 80008f6:	7afb      	ldrb	r3, [r7, #11]
 80008f8:	2baa      	cmp	r3, #170	@ 0xaa
 80008fa:	d17b      	bne.n	80009f4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008fc:	2100      	movs	r1, #0
 80008fe:	2077      	movs	r0, #119	@ 0x77
 8000900:	f7ff ff5f 	bl	80007c2 <SD_SendCmd>
 8000904:	4603      	mov	r3, r0
 8000906:	2b01      	cmp	r3, #1
 8000908:	d807      	bhi.n	800091a <SD_disk_initialize+0xae>
 800090a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800090e:	2069      	movs	r0, #105	@ 0x69
 8000910:	f7ff ff57 	bl	80007c2 <SD_SendCmd>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d004      	beq.n	8000924 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800091a:	4b45      	ldr	r3, [pc, #276]	@ (8000a30 <SD_disk_initialize+0x1c4>)
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1ec      	bne.n	80008fc <SD_disk_initialize+0x90>
 8000922:	e000      	b.n	8000926 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000924:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000926:	4b42      	ldr	r3, [pc, #264]	@ (8000a30 <SD_disk_initialize+0x1c4>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d062      	beq.n	80009f4 <SD_disk_initialize+0x188>
 800092e:	2100      	movs	r1, #0
 8000930:	207a      	movs	r0, #122	@ 0x7a
 8000932:	f7ff ff46 	bl	80007c2 <SD_SendCmd>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d15b      	bne.n	80009f4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e00c      	b.n	800095c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000942:	7bfc      	ldrb	r4, [r7, #15]
 8000944:	f7ff fe2e 	bl	80005a4 <SPI_RxByte>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	f104 0310 	add.w	r3, r4, #16
 8000950:	443b      	add	r3, r7
 8000952:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	3301      	adds	r3, #1
 800095a:	73fb      	strb	r3, [r7, #15]
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	2b03      	cmp	r3, #3
 8000960:	d9ef      	bls.n	8000942 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000962:	7a3b      	ldrb	r3, [r7, #8]
 8000964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SD_disk_initialize+0x104>
 800096c:	230c      	movs	r3, #12
 800096e:	e000      	b.n	8000972 <SD_disk_initialize+0x106>
 8000970:	2304      	movs	r3, #4
 8000972:	73bb      	strb	r3, [r7, #14]
 8000974:	e03e      	b.n	80009f4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000976:	2100      	movs	r1, #0
 8000978:	2077      	movs	r0, #119	@ 0x77
 800097a:	f7ff ff22 	bl	80007c2 <SD_SendCmd>
 800097e:	4603      	mov	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	d808      	bhi.n	8000996 <SD_disk_initialize+0x12a>
 8000984:	2100      	movs	r1, #0
 8000986:	2069      	movs	r0, #105	@ 0x69
 8000988:	f7ff ff1b 	bl	80007c2 <SD_SendCmd>
 800098c:	4603      	mov	r3, r0
 800098e:	2b01      	cmp	r3, #1
 8000990:	d801      	bhi.n	8000996 <SD_disk_initialize+0x12a>
 8000992:	2302      	movs	r3, #2
 8000994:	e000      	b.n	8000998 <SD_disk_initialize+0x12c>
 8000996:	2301      	movs	r3, #1
 8000998:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800099a:	7bbb      	ldrb	r3, [r7, #14]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d10e      	bne.n	80009be <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80009a0:	2100      	movs	r1, #0
 80009a2:	2077      	movs	r0, #119	@ 0x77
 80009a4:	f7ff ff0d 	bl	80007c2 <SD_SendCmd>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d80e      	bhi.n	80009cc <SD_disk_initialize+0x160>
 80009ae:	2100      	movs	r1, #0
 80009b0:	2069      	movs	r0, #105	@ 0x69
 80009b2:	f7ff ff06 	bl	80007c2 <SD_SendCmd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d107      	bne.n	80009cc <SD_disk_initialize+0x160>
 80009bc:	e00c      	b.n	80009d8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009be:	2100      	movs	r1, #0
 80009c0:	2041      	movs	r0, #65	@ 0x41
 80009c2:	f7ff fefe 	bl	80007c2 <SD_SendCmd>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d004      	beq.n	80009d6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80009cc:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <SD_disk_initialize+0x1c4>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1e2      	bne.n	800099a <SD_disk_initialize+0x12e>
 80009d4:	e000      	b.n	80009d8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009d6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009d8:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <SD_disk_initialize+0x1c4>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d007      	beq.n	80009f0 <SD_disk_initialize+0x184>
 80009e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009e4:	2050      	movs	r0, #80	@ 0x50
 80009e6:	f7ff feec 	bl	80007c2 <SD_SendCmd>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SD_disk_initialize+0x188>
 80009f0:	2300      	movs	r3, #0
 80009f2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a34 <SD_disk_initialize+0x1c8>)
 80009f6:	7bbb      	ldrb	r3, [r7, #14]
 80009f8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009fa:	f7ff fd91 	bl	8000520 <DESELECT>
	SPI_RxByte();
 80009fe:	f7ff fdd1 	bl	80005a4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a02:	7bbb      	ldrb	r3, [r7, #14]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d008      	beq.n	8000a1a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <SD_disk_initialize+0x1c0>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	f023 0301 	bic.w	r3, r3, #1
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <SD_disk_initialize+0x1c0>)
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	e001      	b.n	8000a1e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a1a:	f7ff fe49 	bl	80006b0 <SD_PowerOff>
	}

	return Stat;
 8000a1e:	4b03      	ldr	r3, [pc, #12]	@ (8000a2c <SD_disk_initialize+0x1c0>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b2db      	uxtb	r3, r3
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000044 	.word	0x20000044
 8000a34:	20000048 	.word	0x20000048

08000a38 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SD_disk_status+0x14>
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e002      	b.n	8000a52 <SD_disk_status+0x1a>
	return Stat;
 8000a4c:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <SD_disk_status+0x28>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000000 	.word	0x20000000

08000a64 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	4603      	mov	r3, r0
 8000a72:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <SD_disk_read+0x1c>
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d101      	bne.n	8000a84 <SD_disk_read+0x20>
 8000a80:	2304      	movs	r3, #4
 8000a82:	e051      	b.n	8000b28 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a84:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <SD_disk_read+0xcc>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SD_disk_read+0x32>
 8000a92:	2303      	movs	r3, #3
 8000a94:	e048      	b.n	8000b28 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a96:	4b27      	ldr	r3, [pc, #156]	@ (8000b34 <SD_disk_read+0xd0>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <SD_disk_read+0x44>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	025b      	lsls	r3, r3, #9
 8000aa6:	607b      	str	r3, [r7, #4]

	SELECT();
 8000aa8:	f7ff fd2c 	bl	8000504 <SELECT>

	if (count == 1)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d111      	bne.n	8000ad6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2051      	movs	r0, #81	@ 0x51
 8000ab6:	f7ff fe84 	bl	80007c2 <SD_SendCmd>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d129      	bne.n	8000b14 <SD_disk_read+0xb0>
 8000ac0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ac4:	68b8      	ldr	r0, [r7, #8]
 8000ac6:	f7ff fe0b 	bl	80006e0 <SD_RxDataBlock>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d021      	beq.n	8000b14 <SD_disk_read+0xb0>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	e01e      	b.n	8000b14 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	2052      	movs	r0, #82	@ 0x52
 8000ada:	f7ff fe72 	bl	80007c2 <SD_SendCmd>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d117      	bne.n	8000b14 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ae4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ae8:	68b8      	ldr	r0, [r7, #8]
 8000aea:	f7ff fdf9 	bl	80006e0 <SD_RxDataBlock>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00a      	beq.n	8000b0a <SD_disk_read+0xa6>
				buff += 512;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000afa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1ed      	bne.n	8000ae4 <SD_disk_read+0x80>
 8000b08:	e000      	b.n	8000b0c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b0a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	204c      	movs	r0, #76	@ 0x4c
 8000b10:	f7ff fe57 	bl	80007c2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b14:	f7ff fd04 	bl	8000520 <DESELECT>
	SPI_RxByte();
 8000b18:	f7ff fd44 	bl	80005a4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bf14      	ite	ne
 8000b22:	2301      	movne	r3, #1
 8000b24:	2300      	moveq	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000048 	.word	0x20000048

08000b38 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	4603      	mov	r3, r0
 8000b46:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d102      	bne.n	8000b54 <SD_disk_write+0x1c>
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d101      	bne.n	8000b58 <SD_disk_write+0x20>
 8000b54:	2304      	movs	r3, #4
 8000b56:	e06b      	b.n	8000c30 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b58:	4b37      	ldr	r3, [pc, #220]	@ (8000c38 <SD_disk_write+0x100>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SD_disk_write+0x32>
 8000b66:	2303      	movs	r3, #3
 8000b68:	e062      	b.n	8000c30 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b6a:	4b33      	ldr	r3, [pc, #204]	@ (8000c38 <SD_disk_write+0x100>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SD_disk_write+0x44>
 8000b78:	2302      	movs	r3, #2
 8000b7a:	e059      	b.n	8000c30 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c3c <SD_disk_write+0x104>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <SD_disk_write+0x56>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	025b      	lsls	r3, r3, #9
 8000b8c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b8e:	f7ff fcb9 	bl	8000504 <SELECT>

	if (count == 1)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d110      	bne.n	8000bba <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	2058      	movs	r0, #88	@ 0x58
 8000b9c:	f7ff fe11 	bl	80007c2 <SD_SendCmd>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d13a      	bne.n	8000c1c <SD_disk_write+0xe4>
 8000ba6:	21fe      	movs	r1, #254	@ 0xfe
 8000ba8:	68b8      	ldr	r0, [r7, #8]
 8000baa:	f7ff fdc7 	bl	800073c <SD_TxDataBlock>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d033      	beq.n	8000c1c <SD_disk_write+0xe4>
			count = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	e030      	b.n	8000c1c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000bba:	4b20      	ldr	r3, [pc, #128]	@ (8000c3c <SD_disk_write+0x104>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d007      	beq.n	8000bd6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2077      	movs	r0, #119	@ 0x77
 8000bca:	f7ff fdfa 	bl	80007c2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bce:	6839      	ldr	r1, [r7, #0]
 8000bd0:	2057      	movs	r0, #87	@ 0x57
 8000bd2:	f7ff fdf6 	bl	80007c2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	2059      	movs	r0, #89	@ 0x59
 8000bda:	f7ff fdf2 	bl	80007c2 <SD_SendCmd>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d11b      	bne.n	8000c1c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000be4:	21fc      	movs	r1, #252	@ 0xfc
 8000be6:	68b8      	ldr	r0, [r7, #8]
 8000be8:	f7ff fda8 	bl	800073c <SD_TxDataBlock>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00a      	beq.n	8000c08 <SD_disk_write+0xd0>
				buff += 512;
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bf8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1ee      	bne.n	8000be4 <SD_disk_write+0xac>
 8000c06:	e000      	b.n	8000c0a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c08:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c0a:	21fd      	movs	r1, #253	@ 0xfd
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff fd95 	bl	800073c <SD_TxDataBlock>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <SD_disk_write+0xe4>
			{
				count = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c1c:	f7ff fc80 	bl	8000520 <DESELECT>
	SPI_RxByte();
 8000c20:	f7ff fcc0 	bl	80005a4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	bf14      	ite	ne
 8000c2a:	2301      	movne	r3, #1
 8000c2c:	2300      	moveq	r3, #0
 8000c2e:	b2db      	uxtb	r3, r3
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000048 	.word	0x20000048

08000c40 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b08b      	sub	sp, #44	@ 0x2c
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	603a      	str	r2, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SD_disk_ioctl+0x1e>
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	e113      	b.n	8000e86 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	2b05      	cmp	r3, #5
 8000c68:	d124      	bne.n	8000cb4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d012      	beq.n	8000c98 <SD_disk_ioctl+0x58>
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	dc1a      	bgt.n	8000cac <SD_disk_ioctl+0x6c>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <SD_disk_ioctl+0x40>
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d006      	beq.n	8000c8c <SD_disk_ioctl+0x4c>
 8000c7e:	e015      	b.n	8000cac <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c80:	f7ff fd16 	bl	80006b0 <SD_PowerOff>
			res = RES_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c8a:	e0fa      	b.n	8000e82 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c8c:	f7ff fcce 	bl	800062c <SD_PowerOn>
			res = RES_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c96:	e0f4      	b.n	8000e82 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	1c5c      	adds	r4, r3, #1
 8000c9c:	f7ff fd14 	bl	80006c8 <SD_CheckPower>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000caa:	e0ea      	b.n	8000e82 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000cac:	2304      	movs	r3, #4
 8000cae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000cb2:	e0e6      	b.n	8000e82 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000cb4:	4b76      	ldr	r3, [pc, #472]	@ (8000e90 <SD_disk_ioctl+0x250>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SD_disk_ioctl+0x86>
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e0df      	b.n	8000e86 <SD_disk_ioctl+0x246>

		SELECT();
 8000cc6:	f7ff fc1d 	bl	8000504 <SELECT>

		switch (ctrl)
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	2b0d      	cmp	r3, #13
 8000cce:	f200 80c9 	bhi.w	8000e64 <SD_disk_ioctl+0x224>
 8000cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd8 <SD_disk_ioctl+0x98>)
 8000cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd8:	08000dcf 	.word	0x08000dcf
 8000cdc:	08000d11 	.word	0x08000d11
 8000ce0:	08000dbf 	.word	0x08000dbf
 8000ce4:	08000e65 	.word	0x08000e65
 8000ce8:	08000e65 	.word	0x08000e65
 8000cec:	08000e65 	.word	0x08000e65
 8000cf0:	08000e65 	.word	0x08000e65
 8000cf4:	08000e65 	.word	0x08000e65
 8000cf8:	08000e65 	.word	0x08000e65
 8000cfc:	08000e65 	.word	0x08000e65
 8000d00:	08000e65 	.word	0x08000e65
 8000d04:	08000de1 	.word	0x08000de1
 8000d08:	08000e05 	.word	0x08000e05
 8000d0c:	08000e29 	.word	0x08000e29
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d10:	2100      	movs	r1, #0
 8000d12:	2049      	movs	r0, #73	@ 0x49
 8000d14:	f7ff fd55 	bl	80007c2 <SD_SendCmd>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f040 80a6 	bne.w	8000e6c <SD_disk_ioctl+0x22c>
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	2110      	movs	r1, #16
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fcda 	bl	80006e0 <SD_RxDataBlock>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 809c 	beq.w	8000e6c <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000d34:	7b3b      	ldrb	r3, [r7, #12]
 8000d36:	099b      	lsrs	r3, r3, #6
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d10d      	bne.n	8000d5a <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d3e:	7d7b      	ldrb	r3, [r7, #21]
 8000d40:	461a      	mov	r2, r3
 8000d42:	7d3b      	ldrb	r3, [r7, #20]
 8000d44:	021b      	lsls	r3, r3, #8
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4413      	add	r3, r2
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d50:	8bfb      	ldrh	r3, [r7, #30]
 8000d52:	029a      	lsls	r2, r3, #10
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	e02d      	b.n	8000db6 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d5a:	7c7b      	ldrb	r3, [r7, #17]
 8000d5c:	f003 030f 	and.w	r3, r3, #15
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	7dbb      	ldrb	r3, [r7, #22]
 8000d64:	09db      	lsrs	r3, r3, #7
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4413      	add	r3, r2
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	7d7b      	ldrb	r3, [r7, #21]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 0306 	and.w	r3, r3, #6
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	4413      	add	r3, r2
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d82:	7d3b      	ldrb	r3, [r7, #20]
 8000d84:	099b      	lsrs	r3, r3, #6
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	7cfb      	ldrb	r3, [r7, #19]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	7cbb      	ldrb	r3, [r7, #18]
 8000d96:	029b      	lsls	r3, r3, #10
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4413      	add	r3, r2
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	3301      	adds	r3, #1
 8000da6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000da8:	8bfa      	ldrh	r2, [r7, #30]
 8000daa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dae:	3b09      	subs	r3, #9
 8000db0:	409a      	lsls	r2, r3
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000dbc:	e056      	b.n	8000e6c <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dc4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dcc:	e055      	b.n	8000e7a <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000dce:	f7ff fc13 	bl	80005f8 <SD_ReadyWait>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2bff      	cmp	r3, #255	@ 0xff
 8000dd6:	d14b      	bne.n	8000e70 <SD_disk_ioctl+0x230>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dde:	e047      	b.n	8000e70 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000de0:	2100      	movs	r1, #0
 8000de2:	2049      	movs	r0, #73	@ 0x49
 8000de4:	f7ff fced 	bl	80007c2 <SD_SendCmd>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d142      	bne.n	8000e74 <SD_disk_ioctl+0x234>
 8000dee:	2110      	movs	r1, #16
 8000df0:	6a38      	ldr	r0, [r7, #32]
 8000df2:	f7ff fc75 	bl	80006e0 <SD_RxDataBlock>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d03b      	beq.n	8000e74 <SD_disk_ioctl+0x234>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e02:	e037      	b.n	8000e74 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e04:	2100      	movs	r1, #0
 8000e06:	204a      	movs	r0, #74	@ 0x4a
 8000e08:	f7ff fcdb 	bl	80007c2 <SD_SendCmd>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d132      	bne.n	8000e78 <SD_disk_ioctl+0x238>
 8000e12:	2110      	movs	r1, #16
 8000e14:	6a38      	ldr	r0, [r7, #32]
 8000e16:	f7ff fc63 	bl	80006e0 <SD_RxDataBlock>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d02b      	beq.n	8000e78 <SD_disk_ioctl+0x238>
 8000e20:	2300      	movs	r3, #0
 8000e22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e26:	e027      	b.n	8000e78 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	207a      	movs	r0, #122	@ 0x7a
 8000e2c:	f7ff fcc9 	bl	80007c2 <SD_SendCmd>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d116      	bne.n	8000e64 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e3c:	e00b      	b.n	8000e56 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000e3e:	6a3c      	ldr	r4, [r7, #32]
 8000e40:	1c63      	adds	r3, r4, #1
 8000e42:	623b      	str	r3, [r7, #32]
 8000e44:	f7ff fbae 	bl	80005a4 <SPI_RxByte>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e50:	3301      	adds	r3, #1
 8000e52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d9ef      	bls.n	8000e3e <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000e64:	2304      	movs	r3, #4
 8000e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e6a:	e006      	b.n	8000e7a <SD_disk_ioctl+0x23a>
			break;
 8000e6c:	bf00      	nop
 8000e6e:	e004      	b.n	8000e7a <SD_disk_ioctl+0x23a>
			break;
 8000e70:	bf00      	nop
 8000e72:	e002      	b.n	8000e7a <SD_disk_ioctl+0x23a>
			break;
 8000e74:	bf00      	nop
 8000e76:	e000      	b.n	8000e7a <SD_disk_ioctl+0x23a>
			break;
 8000e78:	bf00      	nop
		}

		DESELECT();
 8000e7a:	f7ff fb51 	bl	8000520 <DESELECT>
		SPI_RxByte();
 8000e7e:	f7ff fb91 	bl	80005a4 <SPI_RxByte>
	}

	return res;
 8000e82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	372c      	adds	r7, #44	@ 0x2c
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000000 	.word	0x20000000

08000e94 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4878      	ldr	r0, [pc, #480]	@ (8001080 <LCD_Init+0x1ec>)
 8000e9e:	f001 faf7 	bl	8002490 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2113      	movs	r1, #19
 8000ea6:	4877      	ldr	r0, [pc, #476]	@ (8001084 <LCD_Init+0x1f0>)
 8000ea8:	f001 faf2 	bl	8002490 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4875      	ldr	r0, [pc, #468]	@ (8001088 <LCD_Init+0x1f4>)
 8000eb2:	f001 faed 	bl	8002490 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000eb6:	2005      	movs	r0, #5
 8000eb8:	f000 ff82 	bl	8001dc0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	4871      	ldr	r0, [pc, #452]	@ (8001088 <LCD_Init+0x1f4>)
 8000ec2:	f001 fae5 	bl	8002490 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000ec6:	2014      	movs	r0, #20
 8000ec8:	f000 ff7a 	bl	8001dc0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2102      	movs	r1, #2
 8000ed0:	486d      	ldr	r0, [pc, #436]	@ (8001088 <LCD_Init+0x1f4>)
 8000ed2:	f001 fadd 	bl	8002490 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000ed6:	2096      	movs	r0, #150	@ 0x96
 8000ed8:	f000 ff72 	bl	8001dc0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2101      	movs	r1, #1
 8000ee0:	4867      	ldr	r0, [pc, #412]	@ (8001080 <LCD_Init+0x1ec>)
 8000ee2:	f001 fad5 	bl	8002490 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000ee6:	20e9      	movs	r0, #233	@ 0xe9
 8000ee8:	f000 f8d0 	bl	800108c <LCD_CMD>
	LCD_DATA(0x20);
 8000eec:	2020      	movs	r0, #32
 8000eee:	f000 f973 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 8000ef2:	2011      	movs	r0, #17
 8000ef4:	f000 f8ca 	bl	800108c <LCD_CMD>
	HAL_Delay(100);
 8000ef8:	2064      	movs	r0, #100	@ 0x64
 8000efa:	f000 ff61 	bl	8001dc0 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 8000efe:	20d1      	movs	r0, #209	@ 0xd1
 8000f00:	f000 f8c4 	bl	800108c <LCD_CMD>
	LCD_DATA(0x00);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f000 f967 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x71);
 8000f0a:	2071      	movs	r0, #113	@ 0x71
 8000f0c:	f000 f964 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x19);
 8000f10:	2019      	movs	r0, #25
 8000f12:	f000 f961 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000f16:	20d0      	movs	r0, #208	@ 0xd0
 8000f18:	f000 f8b8 	bl	800108c <LCD_CMD>
	LCD_DATA(0x07);
 8000f1c:	2007      	movs	r0, #7
 8000f1e:	f000 f95b 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x01);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f000 f958 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x08);
 8000f28:	2008      	movs	r0, #8
 8000f2a:	f000 f955 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 8000f2e:	2036      	movs	r0, #54	@ 0x36
 8000f30:	f000 f8ac 	bl	800108c <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 8000f34:	20e8      	movs	r0, #232	@ 0xe8
 8000f36:	f000 f94f 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 8000f3a:	203a      	movs	r0, #58	@ 0x3a
 8000f3c:	f000 f8a6 	bl	800108c <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 8000f40:	2005      	movs	r0, #5
 8000f42:	f000 f949 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 8000f46:	20c1      	movs	r0, #193	@ 0xc1
 8000f48:	f000 f8a0 	bl	800108c <LCD_CMD>
	LCD_DATA(0x10);
 8000f4c:	2010      	movs	r0, #16
 8000f4e:	f000 f943 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x10);
 8000f52:	2010      	movs	r0, #16
 8000f54:	f000 f940 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x02);
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f000 f93d 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x02);
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f000 f93a 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 8000f64:	20c0      	movs	r0, #192	@ 0xc0
 8000f66:	f000 f891 	bl	800108c <LCD_CMD>
	LCD_DATA(0x00);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f000 f934 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x35);
 8000f70:	2035      	movs	r0, #53	@ 0x35
 8000f72:	f000 f931 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x00);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f92e 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x00);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 f92b 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x01);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f000 f928 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x02);
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f000 f925 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 8000f8e:	20c5      	movs	r0, #197	@ 0xc5
 8000f90:	f000 f87c 	bl	800108c <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8000f94:	2004      	movs	r0, #4
 8000f96:	f000 f91f 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 8000f9a:	20d2      	movs	r0, #210	@ 0xd2
 8000f9c:	f000 f876 	bl	800108c <LCD_CMD>
	LCD_DATA(0x01);
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f000 f919 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x44);
 8000fa6:	2044      	movs	r0, #68	@ 0x44
 8000fa8:	f000 f916 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8000fac:	20c8      	movs	r0, #200	@ 0xc8
 8000fae:	f000 f86d 	bl	800108c <LCD_CMD>
	LCD_DATA(0x04);
 8000fb2:	2004      	movs	r0, #4
 8000fb4:	f000 f910 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x67);
 8000fb8:	2067      	movs	r0, #103	@ 0x67
 8000fba:	f000 f90d 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x35);
 8000fbe:	2035      	movs	r0, #53	@ 0x35
 8000fc0:	f000 f90a 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x04);
 8000fc4:	2004      	movs	r0, #4
 8000fc6:	f000 f907 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x08);
 8000fca:	2008      	movs	r0, #8
 8000fcc:	f000 f904 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x06);
 8000fd0:	2006      	movs	r0, #6
 8000fd2:	f000 f901 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x24);
 8000fd6:	2024      	movs	r0, #36	@ 0x24
 8000fd8:	f000 f8fe 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x01);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f000 f8fb 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x37);
 8000fe2:	2037      	movs	r0, #55	@ 0x37
 8000fe4:	f000 f8f8 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x40);
 8000fe8:	2040      	movs	r0, #64	@ 0x40
 8000fea:	f000 f8f5 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x03);
 8000fee:	2003      	movs	r0, #3
 8000ff0:	f000 f8f2 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x10);
 8000ff4:	2010      	movs	r0, #16
 8000ff6:	f000 f8ef 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x08);
 8000ffa:	2008      	movs	r0, #8
 8000ffc:	f000 f8ec 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x80);
 8001000:	2080      	movs	r0, #128	@ 0x80
 8001002:	f000 f8e9 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x00);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f8e6 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 800100c:	202a      	movs	r0, #42	@ 0x2a
 800100e:	f000 f83d 	bl	800108c <LCD_CMD>
	LCD_DATA(0x00);
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f8e0 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x00);
 8001018:	2000      	movs	r0, #0
 800101a:	f000 f8dd 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x01);
 800101e:	2001      	movs	r0, #1
 8001020:	f000 f8da 	bl	80011d8 <LCD_DATA>
	//LCD_DATA(0x3F);
	LCD_DATA(0xEF);
 8001024:	20ef      	movs	r0, #239	@ 0xef
 8001026:	f000 f8d7 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 800102a:	202b      	movs	r0, #43	@ 0x2b
 800102c:	f000 f82e 	bl	800108c <LCD_CMD>
	LCD_DATA(0x00);
 8001030:	2000      	movs	r0, #0
 8001032:	f000 f8d1 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x00);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f8ce 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x01);
 800103c:	2001      	movs	r0, #1
 800103e:	f000 f8cb 	bl	80011d8 <LCD_DATA>
	//LCD_DATA(0xE0);
	LCD_DATA(0x3F);
 8001042:	203f      	movs	r0, #63	@ 0x3f
 8001044:	f000 f8c8 	bl	80011d8 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 8001048:	2029      	movs	r0, #41	@ 0x29
 800104a:	f000 f81f 	bl	800108c <LCD_CMD>
	LCD_CMD(0x2C); //display on
 800104e:	202c      	movs	r0, #44	@ 0x2c
 8001050:	f000 f81c 	bl	800108c <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8001054:	2020      	movs	r0, #32
 8001056:	f000 f819 	bl	800108c <LCD_CMD>
	HAL_Delay(120);
 800105a:	2078      	movs	r0, #120	@ 0x78
 800105c:	f000 feb0 	bl	8001dc0 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 8001060:	2011      	movs	r0, #17
 8001062:	f000 f813 	bl	800108c <LCD_CMD>
	HAL_Delay(120);
 8001066:	2078      	movs	r0, #120	@ 0x78
 8001068:	f000 feaa 	bl	8001dc0 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 800106c:	2029      	movs	r0, #41	@ 0x29
 800106e:	f000 f80d 	bl	800108c <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	2101      	movs	r1, #1
 8001076:	4802      	ldr	r0, [pc, #8]	@ (8001080 <LCD_Init+0x1ec>)
 8001078:	f001 fa0a 	bl	8002490 <HAL_GPIO_WritePin>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40020400 	.word	0x40020400
 8001084:	40020000 	.word	0x40020000
 8001088:	40020800 	.word	0x40020800

0800108c <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2110      	movs	r1, #16
 800109a:	484c      	ldr	r0, [pc, #304]	@ (80011cc <LCD_CMD+0x140>)
 800109c:	f001 f9f8 	bl	8002490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2102      	movs	r1, #2
 80010a4:	4849      	ldr	r0, [pc, #292]	@ (80011cc <LCD_CMD+0x140>)
 80010a6:	f001 f9f3 	bl	8002490 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d006      	beq.n	80010c2 <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010ba:	4844      	ldr	r0, [pc, #272]	@ (80011cc <LCD_CMD+0x140>)
 80010bc:	f001 f9e8 	bl	8002490 <HAL_GPIO_WritePin>
 80010c0:	e005      	b.n	80010ce <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010c8:	4840      	ldr	r0, [pc, #256]	@ (80011cc <LCD_CMD+0x140>)
 80010ca:	f001 f9e1 	bl	8002490 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2180      	movs	r1, #128	@ 0x80
 80010dc:	483c      	ldr	r0, [pc, #240]	@ (80011d0 <LCD_CMD+0x144>)
 80010de:	f001 f9d7 	bl	8002490 <HAL_GPIO_WritePin>
 80010e2:	e004      	b.n	80010ee <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2180      	movs	r1, #128	@ 0x80
 80010e8:	4839      	ldr	r0, [pc, #228]	@ (80011d0 <LCD_CMD+0x144>)
 80010ea:	f001 f9d1 	bl	8002490 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010fe:	4833      	ldr	r0, [pc, #204]	@ (80011cc <LCD_CMD+0x140>)
 8001100:	f001 f9c6 	bl	8002490 <HAL_GPIO_WritePin>
 8001104:	e005      	b.n	8001112 <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800110c:	482f      	ldr	r0, [pc, #188]	@ (80011cc <LCD_CMD+0x140>)
 800110e:	f001 f9bf 	bl	8002490 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2108      	movs	r1, #8
 8001120:	482c      	ldr	r0, [pc, #176]	@ (80011d4 <LCD_CMD+0x148>)
 8001122:	f001 f9b5 	bl	8002490 <HAL_GPIO_WritePin>
 8001126:	e004      	b.n	8001132 <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2108      	movs	r1, #8
 800112c:	4829      	ldr	r0, [pc, #164]	@ (80011d4 <LCD_CMD+0x148>)
 800112e:	f001 f9af 	bl	8002490 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	2120      	movs	r1, #32
 8001140:	4824      	ldr	r0, [pc, #144]	@ (80011d4 <LCD_CMD+0x148>)
 8001142:	f001 f9a5 	bl	8002490 <HAL_GPIO_WritePin>
 8001146:	e004      	b.n	8001152 <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2120      	movs	r1, #32
 800114c:	4821      	ldr	r0, [pc, #132]	@ (80011d4 <LCD_CMD+0x148>)
 800114e:	f001 f99f 	bl	8002490 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 0320 	and.w	r3, r3, #32
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2110      	movs	r1, #16
 8001160:	481c      	ldr	r0, [pc, #112]	@ (80011d4 <LCD_CMD+0x148>)
 8001162:	f001 f995 	bl	8002490 <HAL_GPIO_WritePin>
 8001166:	e004      	b.n	8001172 <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2110      	movs	r1, #16
 800116c:	4819      	ldr	r0, [pc, #100]	@ (80011d4 <LCD_CMD+0x148>)
 800116e:	f001 f98f 	bl	8002490 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001182:	4814      	ldr	r0, [pc, #80]	@ (80011d4 <LCD_CMD+0x148>)
 8001184:	f001 f984 	bl	8002490 <HAL_GPIO_WritePin>
 8001188:	e005      	b.n	8001196 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001190:	4810      	ldr	r0, [pc, #64]	@ (80011d4 <LCD_CMD+0x148>)
 8001192:	f001 f97d 	bl	8002490 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	da06      	bge.n	80011ac <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a4:	4809      	ldr	r0, [pc, #36]	@ (80011cc <LCD_CMD+0x140>)
 80011a6:	f001 f973 	bl	8002490 <HAL_GPIO_WritePin>
 80011aa:	e005      	b.n	80011b8 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b2:	4806      	ldr	r0, [pc, #24]	@ (80011cc <LCD_CMD+0x140>)
 80011b4:	f001 f96c 	bl	8002490 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2102      	movs	r1, #2
 80011bc:	4803      	ldr	r0, [pc, #12]	@ (80011cc <LCD_CMD+0x140>)
 80011be:	f001 f967 	bl	8002490 <HAL_GPIO_WritePin>

}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020400 	.word	0x40020400

080011d8 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2110      	movs	r1, #16
 80011e6:	484c      	ldr	r0, [pc, #304]	@ (8001318 <LCD_DATA+0x140>)
 80011e8:	f001 f952 	bl	8002490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2102      	movs	r1, #2
 80011f0:	4849      	ldr	r0, [pc, #292]	@ (8001318 <LCD_DATA+0x140>)
 80011f2:	f001 f94d 	bl	8002490 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001206:	4844      	ldr	r0, [pc, #272]	@ (8001318 <LCD_DATA+0x140>)
 8001208:	f001 f942 	bl	8002490 <HAL_GPIO_WritePin>
 800120c:	e005      	b.n	800121a <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001214:	4840      	ldr	r0, [pc, #256]	@ (8001318 <LCD_DATA+0x140>)
 8001216:	f001 f93b 	bl	8002490 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2180      	movs	r1, #128	@ 0x80
 8001228:	483c      	ldr	r0, [pc, #240]	@ (800131c <LCD_DATA+0x144>)
 800122a:	f001 f931 	bl	8002490 <HAL_GPIO_WritePin>
 800122e:	e004      	b.n	800123a <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2180      	movs	r1, #128	@ 0x80
 8001234:	4839      	ldr	r0, [pc, #228]	@ (800131c <LCD_DATA+0x144>)
 8001236:	f001 f92b 	bl	8002490 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800124a:	4833      	ldr	r0, [pc, #204]	@ (8001318 <LCD_DATA+0x140>)
 800124c:	f001 f920 	bl	8002490 <HAL_GPIO_WritePin>
 8001250:	e005      	b.n	800125e <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001258:	482f      	ldr	r0, [pc, #188]	@ (8001318 <LCD_DATA+0x140>)
 800125a:	f001 f919 	bl	8002490 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	2108      	movs	r1, #8
 800126c:	482c      	ldr	r0, [pc, #176]	@ (8001320 <LCD_DATA+0x148>)
 800126e:	f001 f90f 	bl	8002490 <HAL_GPIO_WritePin>
 8001272:	e004      	b.n	800127e <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2108      	movs	r1, #8
 8001278:	4829      	ldr	r0, [pc, #164]	@ (8001320 <LCD_DATA+0x148>)
 800127a:	f001 f909 	bl	8002490 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	2120      	movs	r1, #32
 800128c:	4824      	ldr	r0, [pc, #144]	@ (8001320 <LCD_DATA+0x148>)
 800128e:	f001 f8ff 	bl	8002490 <HAL_GPIO_WritePin>
 8001292:	e004      	b.n	800129e <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2120      	movs	r1, #32
 8001298:	4821      	ldr	r0, [pc, #132]	@ (8001320 <LCD_DATA+0x148>)
 800129a:	f001 f8f9 	bl	8002490 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 0320 	and.w	r3, r3, #32
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2110      	movs	r1, #16
 80012ac:	481c      	ldr	r0, [pc, #112]	@ (8001320 <LCD_DATA+0x148>)
 80012ae:	f001 f8ef 	bl	8002490 <HAL_GPIO_WritePin>
 80012b2:	e004      	b.n	80012be <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2110      	movs	r1, #16
 80012b8:	4819      	ldr	r0, [pc, #100]	@ (8001320 <LCD_DATA+0x148>)
 80012ba:	f001 f8e9 	bl	8002490 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d006      	beq.n	80012d6 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012ce:	4814      	ldr	r0, [pc, #80]	@ (8001320 <LCD_DATA+0x148>)
 80012d0:	f001 f8de 	bl	8002490 <HAL_GPIO_WritePin>
 80012d4:	e005      	b.n	80012e2 <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012dc:	4810      	ldr	r0, [pc, #64]	@ (8001320 <LCD_DATA+0x148>)
 80012de:	f001 f8d7 	bl	8002490 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da06      	bge.n	80012f8 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012f0:	4809      	ldr	r0, [pc, #36]	@ (8001318 <LCD_DATA+0x140>)
 80012f2:	f001 f8cd 	bl	8002490 <HAL_GPIO_WritePin>
 80012f6:	e005      	b.n	8001304 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012fe:	4806      	ldr	r0, [pc, #24]	@ (8001318 <LCD_DATA+0x140>)
 8001300:	f001 f8c6 	bl	8002490 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	2102      	movs	r1, #2
 8001308:	4803      	ldr	r0, [pc, #12]	@ (8001318 <LCD_DATA+0x140>)
 800130a:	f001 f8c1 	bl	8002490 <HAL_GPIO_WritePin>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40020000 	.word	0x40020000
 800131c:	40020800 	.word	0x40020800
 8001320:	40020400 	.word	0x40020400

08001324 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 8001332:	202a      	movs	r0, #42	@ 0x2a
 8001334:	f7ff feaa 	bl	800108c <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff4a 	bl	80011d8 <LCD_DATA>
	LCD_DATA(x1);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff45 	bl	80011d8 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	b2db      	uxtb	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff3f 	bl	80011d8 <LCD_DATA>
	LCD_DATA(x2);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff3a 	bl	80011d8 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8001364:	202b      	movs	r0, #43	@ 0x2b
 8001366:	f7ff fe91 	bl	800108c <LCD_CMD>
	LCD_DATA(y1 >> 8);
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	b2db      	uxtb	r3, r3
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff31 	bl	80011d8 <LCD_DATA>
	LCD_DATA(y1);
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff2c 	bl	80011d8 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	0a1b      	lsrs	r3, r3, #8
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff26 	bl	80011d8 <LCD_DATA>
	LCD_DATA(y2);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff21 	bl	80011d8 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8001396:	202c      	movs	r0, #44	@ 0x2c
 8001398:	f7ff fe78 	bl	800108c <LCD_CMD>
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <LCD_Bitmap>:
	}
}
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width, unsigned int height, unsigned char bitmap[]) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2C); // write_memory_start
 80013b2:	202c      	movs	r0, #44	@ 0x2c
 80013b4:	f7ff fe6a 	bl	800108c <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2110      	movs	r1, #16
 80013bc:	4822      	ldr	r0, [pc, #136]	@ (8001448 <LCD_Bitmap+0xa4>)
 80013be:	f001 f867 	bl	8002490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2101      	movs	r1, #1
 80013c6:	4821      	ldr	r0, [pc, #132]	@ (800144c <LCD_Bitmap+0xa8>)
 80013c8:	f001 f862 	bl	8002490 <HAL_GPIO_WritePin>

	unsigned int k = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
	SetWindows(x, y, x + width - 1, y + height - 1);
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	4413      	add	r3, r2
 80013de:	3b01      	subs	r3, #1
 80013e0:	460a      	mov	r2, r1
 80013e2:	68b9      	ldr	r1, [r7, #8]
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f7ff ff9d 	bl	8001324 <SetWindows>

	// Intercambiar el recorrido de 'i' y 'j' para ajustar la orientación horizontal
	for (int i = 0; i < height; i++) {      // Recorrer las filas de la imagen (ahora las columnas en pantalla horizontal)
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	e01e      	b.n	800142e <LCD_Bitmap+0x8a>
		for (int j = 0; j < width; j++) {   // Recorrer las columnas de la imagen (ahora las filas en pantalla horizontal)
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e014      	b.n	8001420 <LCD_Bitmap+0x7c>
			LCD_DATA(bitmap[k]);
 80013f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	4413      	add	r3, r2
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff feea 	bl	80011d8 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	3301      	adds	r3, #1
 8001408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800140a:	4413      	add	r3, r2
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fee2 	bl	80011d8 <LCD_DATA>
			k += 2;
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	3302      	adds	r3, #2
 8001418:	61fb      	str	r3, [r7, #28]
		for (int j = 0; j < width; j++) {   // Recorrer las columnas de la imagen (ahora las filas en pantalla horizontal)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8e6      	bhi.n	80013f6 <LCD_Bitmap+0x52>
	for (int i = 0; i < height; i++) {      // Recorrer las filas de la imagen (ahora las columnas en pantalla horizontal)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	3301      	adds	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d8dc      	bhi.n	80013f0 <LCD_Bitmap+0x4c>
		}
	}

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	2101      	movs	r1, #1
 800143a:	4804      	ldr	r0, [pc, #16]	@ (800144c <LCD_Bitmap+0xa8>)
 800143c:	f001 f828 	bl	8002490 <HAL_GPIO_WritePin>
}
 8001440:	bf00      	nop
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40020000 	.word	0x40020000
 800144c:	40020400 	.word	0x40020400

08001450 <transmit_uart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void transmit_uart(char *string){
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint8_t len=strlen(string);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7fe fed3 	bl	8000204 <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart2, (uint8_t*)string, len, 200);
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	b29a      	uxth	r2, r3
 8001466:	23c8      	movs	r3, #200	@ 0xc8
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4803      	ldr	r0, [pc, #12]	@ (8001478 <transmit_uart+0x28>)
 800146c:	f002 fa34 	bl	80038d8 <HAL_UART_Transmit>
}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200010dc 	.word	0x200010dc

0800147c <load_image_from_sd_to_play>:


// Función para leer una imagen desde la SD y almacenarla en la variable play
int load_image_from_sd_to_play(const char* filename) {
 800147c:	b580      	push	{r7, lr}
 800147e:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8001482:	af00      	add	r7, sp, #0
 8001484:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001488:	f843 0c3c 	str.w	r0, [r3, #-60]
    FIL fil;
    UINT bytes_read;
    FRESULT fres;

    fres = f_mount(&fs, "/", 0);
 800148c:	2200      	movs	r2, #0
 800148e:	492e      	ldr	r1, [pc, #184]	@ (8001548 <load_image_from_sd_to_play+0xcc>)
 8001490:	482e      	ldr	r0, [pc, #184]	@ (800154c <load_image_from_sd_to_play+0xd0>)
 8001492:	f005 fc6f 	bl	8006d74 <f_mount>
 8001496:	4603      	mov	r3, r0
 8001498:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800149c:	f102 021f 	add.w	r2, r2, #31
 80014a0:	7013      	strb	r3, [r2, #0]
		transmit_uart("Error al montar la SD\n");
		//free(image_buffer);
		return;
	}*/
    // Abrir el archivo desde la SD
    fres = f_open(&fil, filename, FA_READ);
 80014a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014a6:	4619      	mov	r1, r3
 80014a8:	f107 0320 	add.w	r3, r7, #32
 80014ac:	3b14      	subs	r3, #20
 80014ae:	2201      	movs	r2, #1
 80014b0:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f005 fca3 	bl	8006e00 <f_open>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80014c0:	f102 021f 	add.w	r2, r2, #31
 80014c4:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK) {
 80014c6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80014ca:	f103 031f 	add.w	r3, r3, #31
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d004      	beq.n	80014de <load_image_from_sd_to_play+0x62>
       transmit_uart("Error al abrir el archivo en la SD\n");
 80014d4:	481e      	ldr	r0, [pc, #120]	@ (8001550 <load_image_from_sd_to_play+0xd4>)
 80014d6:	f7ff ffbb 	bl	8001450 <transmit_uart>
        return 0;  // Error al abrir el archivo
 80014da:	2300      	movs	r3, #0
 80014dc:	e02f      	b.n	800153e <load_image_from_sd_to_play+0xc2>
    }

    // Leer los datos del archivo y almacenarlos en la variable play
    fres = f_read(&fil, image, 30720, &bytes_read);
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	3b18      	subs	r3, #24
 80014e4:	f107 0020 	add.w	r0, r7, #32
 80014e8:	3814      	subs	r0, #20
 80014ea:	f44f 42f0 	mov.w	r2, #30720	@ 0x7800
 80014ee:	4919      	ldr	r1, [pc, #100]	@ (8001554 <load_image_from_sd_to_play+0xd8>)
 80014f0:	f005 fe4e 	bl	8007190 <f_read>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80014fa:	f102 021f 	add.w	r2, r2, #31
 80014fe:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK || bytes_read == 0) {
 8001500:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001504:	f103 031f 	add.w	r3, r3, #31
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d105      	bne.n	800151a <load_image_from_sd_to_play+0x9e>
 800150e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001512:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10a      	bne.n	8001530 <load_image_from_sd_to_play+0xb4>
       transmit_uart("Error al leer la imagen desde la SD\n");
 800151a:	480f      	ldr	r0, [pc, #60]	@ (8001558 <load_image_from_sd_to_play+0xdc>)
 800151c:	f7ff ff98 	bl	8001450 <transmit_uart>
        f_close(&fil);
 8001520:	f107 0320 	add.w	r3, r7, #32
 8001524:	3b14      	subs	r3, #20
 8001526:	4618      	mov	r0, r3
 8001528:	f006 f80f 	bl	800754a <f_close>
        return 0;  // Error al leer el archivo
 800152c:	2300      	movs	r3, #0
 800152e:	e006      	b.n	800153e <load_image_from_sd_to_play+0xc2>
    }

    // Cerrar el archivo
    f_close(&fil);
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	3b14      	subs	r3, #20
 8001536:	4618      	mov	r0, r3
 8001538:	f006 f807 	bl	800754a <f_close>
   // transmit_uart("Imagen cargada correctamente desde la SD a la variable play\n");
    return 1;  // Éxito
 800153c:	2301      	movs	r3, #1
}
 800153e:	4618      	mov	r0, r3
 8001540:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	08007854 	.word	0x08007854
 800154c:	200000a4 	.word	0x200000a4
 8001550:	08007858 	.word	0x08007858
 8001554:	20001150 	.word	0x20001150
 8001558:	0800787c 	.word	0x0800787c

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001562:	f000 fbbb 	bl	8001cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001566:	f000 f865 	bl	8001634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156a:	f000 f92f 	bl	80017cc <MX_GPIO_Init>
  MX_SPI1_Init();
 800156e:	f000 f8cd 	bl	800170c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001572:	f000 f901 	bl	8001778 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001576:	f003 f9b5 	bl	80048e4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 800157a:	f7ff fc8b 	bl	8000e94 <LCD_Init>
	//Fondo
	if (load_image_from_sd_to_play("fb1_h.bin")) {
 800157e:	4827      	ldr	r0, [pc, #156]	@ (800161c <main+0xc0>)
 8001580:	f7ff ff7c 	bl	800147c <load_image_from_sd_to_play>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d008      	beq.n	800159c <main+0x40>
		LCD_Bitmap(0, 0, 320, 48, image);
 800158a:	4b25      	ldr	r3, [pc, #148]	@ (8001620 <main+0xc4>)
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2330      	movs	r3, #48	@ 0x30
 8001590:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001594:	2100      	movs	r1, #0
 8001596:	2000      	movs	r0, #0
 8001598:	f7ff ff04 	bl	80013a4 <LCD_Bitmap>

	}
	if (load_image_from_sd_to_play("fb2_h.bin")) {
 800159c:	4821      	ldr	r0, [pc, #132]	@ (8001624 <main+0xc8>)
 800159e:	f7ff ff6d 	bl	800147c <load_image_from_sd_to_play>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <main+0x5e>
		LCD_Bitmap(0, 48, 320, 48, image);
 80015a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <main+0xc4>)
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2330      	movs	r3, #48	@ 0x30
 80015ae:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015b2:	2130      	movs	r1, #48	@ 0x30
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff fef5 	bl	80013a4 <LCD_Bitmap>
	}
	if (load_image_from_sd_to_play("fb3_h.bin")) {
 80015ba:	481b      	ldr	r0, [pc, #108]	@ (8001628 <main+0xcc>)
 80015bc:	f7ff ff5e 	bl	800147c <load_image_from_sd_to_play>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <main+0x7c>
		LCD_Bitmap(0, 96, 320, 48, image);
 80015c6:	4b16      	ldr	r3, [pc, #88]	@ (8001620 <main+0xc4>)
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2330      	movs	r3, #48	@ 0x30
 80015cc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015d0:	2160      	movs	r1, #96	@ 0x60
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff fee6 	bl	80013a4 <LCD_Bitmap>

	}
	if (load_image_from_sd_to_play("fb4_h.bin")) {
 80015d8:	4814      	ldr	r0, [pc, #80]	@ (800162c <main+0xd0>)
 80015da:	f7ff ff4f 	bl	800147c <load_image_from_sd_to_play>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d008      	beq.n	80015f6 <main+0x9a>
		LCD_Bitmap(0, 144, 320, 48, image);
 80015e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <main+0xc4>)
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2330      	movs	r3, #48	@ 0x30
 80015ea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015ee:	2190      	movs	r1, #144	@ 0x90
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff fed7 	bl	80013a4 <LCD_Bitmap>
	}
	if (load_image_from_sd_to_play("fb5_h.bin")) {
 80015f6:	480e      	ldr	r0, [pc, #56]	@ (8001630 <main+0xd4>)
 80015f8:	f7ff ff40 	bl	800147c <load_image_from_sd_to_play>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d009      	beq.n	8001616 <main+0xba>
		LCD_Bitmap(0, 192, 320, 48, image);
 8001602:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <main+0xc4>)
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2330      	movs	r3, #48	@ 0x30
 8001608:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800160c:	21c0      	movs	r1, #192	@ 0xc0
 800160e:	2000      	movs	r0, #0
 8001610:	f7ff fec8 	bl	80013a4 <LCD_Bitmap>
	  */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	e7fd      	b.n	8001616 <main+0xba>
 800161a:	bf00      	nop
 800161c:	080078a4 	.word	0x080078a4
 8001620:	20001150 	.word	0x20001150
 8001624:	080078b0 	.word	0x080078b0
 8001628:	080078bc 	.word	0x080078bc
 800162c:	080078c8 	.word	0x080078c8
 8001630:	080078d4 	.word	0x080078d4

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b094      	sub	sp, #80	@ 0x50
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	2234      	movs	r2, #52	@ 0x34
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f006 f8ce 	bl	80077e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	4b29      	ldr	r3, [pc, #164]	@ (8001704 <SystemClock_Config+0xd0>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	4a28      	ldr	r2, [pc, #160]	@ (8001704 <SystemClock_Config+0xd0>)
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001666:	6413      	str	r3, [r2, #64]	@ 0x40
 8001668:	4b26      	ldr	r3, [pc, #152]	@ (8001704 <SystemClock_Config+0xd0>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001674:	2300      	movs	r3, #0
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	4b23      	ldr	r3, [pc, #140]	@ (8001708 <SystemClock_Config+0xd4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001680:	4a21      	ldr	r2, [pc, #132]	@ (8001708 <SystemClock_Config+0xd4>)
 8001682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <SystemClock_Config+0xd4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001694:	2302      	movs	r3, #2
 8001696:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001698:	2301      	movs	r3, #1
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800169c:	2310      	movs	r3, #16
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a0:	2302      	movs	r3, #2
 80016a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016a4:	2300      	movs	r3, #0
 80016a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016a8:	2308      	movs	r3, #8
 80016aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80016ac:	2350      	movs	r3, #80	@ 0x50
 80016ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 f9c3 	bl	8002a4c <HAL_RCC_OscConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80016cc:	f000 f9b0 	bl	8001a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d0:	230f      	movs	r3, #15
 80016d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d4:	2302      	movs	r3, #2
 80016d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	2102      	movs	r1, #2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 fee9 	bl	80024c4 <HAL_RCC_ClockConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80016f8:	f000 f99a 	bl	8001a30 <Error_Handler>
  }
}
 80016fc:	bf00      	nop
 80016fe:	3750      	adds	r7, #80	@ 0x50
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	40007000 	.word	0x40007000

0800170c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001710:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001712:	4a18      	ldr	r2, [pc, #96]	@ (8001774 <MX_SPI1_Init+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001716:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001718:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800171c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800171e:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <MX_SPI1_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001730:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800173c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800173e:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001740:	2210      	movs	r2, #16
 8001742:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001744:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001746:	2200      	movs	r2, #0
 8001748:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <MX_SPI1_Init+0x64>)
 800174c:	2200      	movs	r2, #0
 800174e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001750:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001752:	2200      	movs	r2, #0
 8001754:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001758:	220a      	movs	r2, #10
 800175a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800175c:	4804      	ldr	r0, [pc, #16]	@ (8001770 <MX_SPI1_Init+0x64>)
 800175e:	f001 fc13 	bl	8002f88 <HAL_SPI_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001768:	f000 f962 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	2000004c 	.word	0x2000004c
 8001774:	40013000 	.word	0x40013000

08001778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <MX_USART2_UART_Init+0x4c>)
 800177e:	4a12      	ldr	r2, [pc, #72]	@ (80017c8 <MX_USART2_UART_Init+0x50>)
 8001780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <MX_USART2_UART_Init+0x4c>)
 8001784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <MX_USART2_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <MX_USART2_UART_Init+0x4c>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <MX_USART2_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <MX_USART2_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <MX_USART2_UART_Init+0x4c>)
 80017b0:	f002 f842 	bl	8003838 <HAL_UART_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017ba:	f000 f939 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200010dc 	.word	0x200010dc
 80017c8:	40004400 	.word	0x40004400

080017cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b45      	ldr	r3, [pc, #276]	@ (80018fc <MX_GPIO_Init+0x130>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a44      	ldr	r2, [pc, #272]	@ (80018fc <MX_GPIO_Init+0x130>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b42      	ldr	r3, [pc, #264]	@ (80018fc <MX_GPIO_Init+0x130>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b3e      	ldr	r3, [pc, #248]	@ (80018fc <MX_GPIO_Init+0x130>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a3d      	ldr	r2, [pc, #244]	@ (80018fc <MX_GPIO_Init+0x130>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b3b      	ldr	r3, [pc, #236]	@ (80018fc <MX_GPIO_Init+0x130>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b37      	ldr	r3, [pc, #220]	@ (80018fc <MX_GPIO_Init+0x130>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a36      	ldr	r2, [pc, #216]	@ (80018fc <MX_GPIO_Init+0x130>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b34      	ldr	r3, [pc, #208]	@ (80018fc <MX_GPIO_Init+0x130>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b30      	ldr	r3, [pc, #192]	@ (80018fc <MX_GPIO_Init+0x130>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a2f      	ldr	r2, [pc, #188]	@ (80018fc <MX_GPIO_Init+0x130>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b2d      	ldr	r3, [pc, #180]	@ (80018fc <MX_GPIO_Init+0x130>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2182      	movs	r1, #130	@ 0x82
 8001856:	482a      	ldr	r0, [pc, #168]	@ (8001900 <MX_GPIO_Init+0x134>)
 8001858:	f000 fe1a 	bl	8002490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 800185c:	2200      	movs	r2, #0
 800185e:	f240 7113 	movw	r1, #1811	@ 0x713
 8001862:	4828      	ldr	r0, [pc, #160]	@ (8001904 <MX_GPIO_Init+0x138>)
 8001864:	f000 fe14 	bl	8002490 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8001868:	2200      	movs	r2, #0
 800186a:	f240 4139 	movw	r1, #1081	@ 0x439
 800186e:	4826      	ldr	r0, [pc, #152]	@ (8001908 <MX_GPIO_Init+0x13c>)
 8001870:	f000 fe0e 	bl	8002490 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 8001874:	2201      	movs	r2, #1
 8001876:	2140      	movs	r1, #64	@ 0x40
 8001878:	4823      	ldr	r0, [pc, #140]	@ (8001908 <MX_GPIO_Init+0x13c>)
 800187a:	f000 fe09 	bl	8002490 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 800187e:	2382      	movs	r3, #130	@ 0x82
 8001880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800188a:	2302      	movs	r3, #2
 800188c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	481a      	ldr	r0, [pc, #104]	@ (8001900 <MX_GPIO_Init+0x134>)
 8001896:	f000 fc67 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 800189a:	f240 7313 	movw	r3, #1811	@ 0x713
 800189e:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a8:	2302      	movs	r3, #2
 80018aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4814      	ldr	r0, [pc, #80]	@ (8001904 <MX_GPIO_Init+0x138>)
 80018b4:	f000 fc58 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80018b8:	f240 4339 	movw	r3, #1081	@ 0x439
 80018bc:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c6:	2302      	movs	r3, #2
 80018c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	480d      	ldr	r0, [pc, #52]	@ (8001908 <MX_GPIO_Init+0x13c>)
 80018d2:	f000 fc49 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 80018d6:	2340      	movs	r3, #64	@ 0x40
 80018d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018e2:	2301      	movs	r3, #1
 80018e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4806      	ldr	r0, [pc, #24]	@ (8001908 <MX_GPIO_Init+0x13c>)
 80018ee:	f000 fc3b 	bl	8002168 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	@ 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020800 	.word	0x40020800
 8001904:	40020000 	.word	0x40020000
 8001908:	40020400 	.word	0x40020400

0800190c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	if(buffer[0] == 'u'){
 8001914:	4b42      	ldr	r3, [pc, #264]	@ (8001a20 <HAL_UART_RxCpltCallback+0x114>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b75      	cmp	r3, #117	@ 0x75
 800191a:	d11a      	bne.n	8001952 <HAL_UART_RxCpltCallback+0x46>
		if (position_p1[0]<140){
 800191c:	4b41      	ldr	r3, [pc, #260]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b8b      	cmp	r3, #139	@ 0x8b
 8001922:	d808      	bhi.n	8001936 <HAL_UART_RxCpltCallback+0x2a>
		position_p1[0]+=20;
 8001924:	4b3f      	ldr	r3, [pc, #252]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	3314      	adds	r3, #20
 800192a:	b2da      	uxtb	r2, r3
 800192c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 800192e:	701a      	strb	r2, [r3, #0]
		position_p1[2]=8;}
 8001930:	4b3c      	ldr	r3, [pc, #240]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 8001932:	2208      	movs	r2, #8
 8001934:	709a      	strb	r2, [r3, #2]

		if(p1.x<140){
 8001936:	4b3c      	ldr	r3, [pc, #240]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b8b      	cmp	r3, #139	@ 0x8b
 800193c:	d809      	bhi.n	8001952 <HAL_UART_RxCpltCallback+0x46>
			p1.x=p1.x+p1.vel;
 800193e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b39      	ldr	r3, [pc, #228]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	4413      	add	r3, r2
 8001948:	4a37      	ldr	r2, [pc, #220]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 800194a:	6013      	str	r3, [r2, #0]
			p1.vista=8;
 800194c:	4b36      	ldr	r3, [pc, #216]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 800194e:	2208      	movs	r2, #8
 8001950:	61da      	str	r2, [r3, #28]
		}
	}
	if(buffer[0] == 'd'){
 8001952:	4b33      	ldr	r3, [pc, #204]	@ (8001a20 <HAL_UART_RxCpltCallback+0x114>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b64      	cmp	r3, #100	@ 0x64
 8001958:	d11a      	bne.n	8001990 <HAL_UART_RxCpltCallback+0x84>
		if (position_p1[0]>0){
 800195a:	4b32      	ldr	r3, [pc, #200]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <HAL_UART_RxCpltCallback+0x68>
		position_p1[0]-=20;
 8001962:	4b30      	ldr	r3, [pc, #192]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	3b14      	subs	r3, #20
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 800196c:	701a      	strb	r2, [r3, #0]
		position_p1[2]=2;}
 800196e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 8001970:	2202      	movs	r2, #2
 8001972:	709a      	strb	r2, [r3, #2]

		if (p1.x>0){
 8001974:	4b2c      	ldr	r3, [pc, #176]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d009      	beq.n	8001990 <HAL_UART_RxCpltCallback+0x84>
			p1.x=p1.x-p1.vel;
 800197c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b29      	ldr	r3, [pc, #164]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	4a28      	ldr	r2, [pc, #160]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 8001988:	6013      	str	r3, [r2, #0]
			p1.vista=4;
 800198a:	4b27      	ldr	r3, [pc, #156]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 800198c:	2204      	movs	r2, #4
 800198e:	61da      	str	r2, [r3, #28]
		}
	}
	if(buffer[0] == 'r'){
 8001990:	4b23      	ldr	r3, [pc, #140]	@ (8001a20 <HAL_UART_RxCpltCallback+0x114>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b72      	cmp	r3, #114	@ 0x72
 8001996:	d11a      	bne.n	80019ce <HAL_UART_RxCpltCallback+0xc2>
		if (position_p1[1]<220){
 8001998:	4b22      	ldr	r3, [pc, #136]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 800199a:	785b      	ldrb	r3, [r3, #1]
 800199c:	2bdb      	cmp	r3, #219	@ 0xdb
 800199e:	d808      	bhi.n	80019b2 <HAL_UART_RxCpltCallback+0xa6>
		position_p1[1]+=20;
 80019a0:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 80019a2:	785b      	ldrb	r3, [r3, #1]
 80019a4:	3314      	adds	r3, #20
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 80019aa:	705a      	strb	r2, [r3, #1]
		position_p1[2]=6;}
 80019ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 80019ae:	2206      	movs	r2, #6
 80019b0:	709a      	strb	r2, [r3, #2]

		if (p1.y<220){
 80019b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2bdb      	cmp	r3, #219	@ 0xdb
 80019b8:	d809      	bhi.n	80019ce <HAL_UART_RxCpltCallback+0xc2>
			p1.y=p1.y+p1.vel;
 80019ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a18      	ldr	r2, [pc, #96]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 80019c6:	6053      	str	r3, [r2, #4]
			p1.vista=6;
 80019c8:	4b17      	ldr	r3, [pc, #92]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 80019ca:	2206      	movs	r2, #6
 80019cc:	61da      	str	r2, [r3, #28]
		}
	}
	if(buffer[0] == 'l'){
 80019ce:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <HAL_UART_RxCpltCallback+0x114>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b6c      	cmp	r3, #108	@ 0x6c
 80019d4:	d11a      	bne.n	8001a0c <HAL_UART_RxCpltCallback+0x100>
		if(position_p1[1]>0){
 80019d6:	4b13      	ldr	r3, [pc, #76]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 80019d8:	785b      	ldrb	r3, [r3, #1]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d008      	beq.n	80019f0 <HAL_UART_RxCpltCallback+0xe4>
		position_p1[1]-=20;
 80019de:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 80019e0:	785b      	ldrb	r3, [r3, #1]
 80019e2:	3b14      	subs	r3, #20
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 80019e8:	705a      	strb	r2, [r3, #1]
		position_p1[2]=4;}
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 80019ec:	2204      	movs	r2, #4
 80019ee:	709a      	strb	r2, [r3, #2]

		if (p1.y>0){
 80019f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d009      	beq.n	8001a0c <HAL_UART_RxCpltCallback+0x100>
			p1.y=p1.y-p1.vel;
 80019f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	4a09      	ldr	r2, [pc, #36]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 8001a04:	6053      	str	r3, [r2, #4]
			p1.vista=4;
 8001a06:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 8001a08:	2204      	movs	r2, #4
 8001a0a:	61da      	str	r2, [r3, #28]
	    //verificar_golpe(&e1, position_p1);
	    //verificar_golpe(&e2, position_p1);
	    //verificar_golpe(&e3, position_p1);
	}
	// Vuelve a activar la recepción por interrupción
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4904      	ldr	r1, [pc, #16]	@ (8001a20 <HAL_UART_RxCpltCallback+0x114>)
 8001a10:	4806      	ldr	r0, [pc, #24]	@ (8001a2c <HAL_UART_RxCpltCallback+0x120>)
 8001a12:	f001 ffec 	bl	80039ee <HAL_UART_Receive_IT>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20001124 	.word	0x20001124
 8001a24:	20000004 	.word	0x20000004
 8001a28:	20001130 	.word	0x20001130
 8001a2c:	200010dc 	.word	0x200010dc

08001a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a34:	b672      	cpsid	i
}
 8001a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <Error_Handler+0x8>

08001a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	4a08      	ldr	r2, [pc, #32]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800

08001a8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	@ 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	@ (8001b10 <HAL_SPI_MspInit+0x84>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d12b      	bne.n	8001b06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	4b18      	ldr	r3, [pc, #96]	@ (8001b14 <HAL_SPI_MspInit+0x88>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	4a17      	ldr	r2, [pc, #92]	@ (8001b14 <HAL_SPI_MspInit+0x88>)
 8001ab8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <HAL_SPI_MspInit+0x88>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <HAL_SPI_MspInit+0x88>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a10      	ldr	r2, [pc, #64]	@ (8001b14 <HAL_SPI_MspInit+0x88>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <HAL_SPI_MspInit+0x88>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ae6:	23e0      	movs	r3, #224	@ 0xe0
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001af6:	2305      	movs	r3, #5
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <HAL_SPI_MspInit+0x8c>)
 8001b02:	f000 fb31 	bl	8002168 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	@ 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40013000 	.word	0x40013000
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020000 	.word	0x40020000

08001b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	@ 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb0 <HAL_UART_MspInit+0x94>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d133      	bne.n	8001ba6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb4 <HAL_UART_MspInit+0x98>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	4a1b      	ldr	r2, [pc, #108]	@ (8001bb4 <HAL_UART_MspInit+0x98>)
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b4e:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <HAL_UART_MspInit+0x98>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <HAL_UART_MspInit+0x98>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4a14      	ldr	r2, [pc, #80]	@ (8001bb4 <HAL_UART_MspInit+0x98>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6a:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <HAL_UART_MspInit+0x98>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b76:	230c      	movs	r3, #12
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b86:	2307      	movs	r3, #7
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4809      	ldr	r0, [pc, #36]	@ (8001bb8 <HAL_UART_MspInit+0x9c>)
 8001b92:	f000 fae9 	bl	8002168 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2026      	movs	r0, #38	@ 0x26
 8001b9c:	f000 fa0f 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ba0:	2026      	movs	r0, #38	@ 0x26
 8001ba2:	f000 fa28 	bl	8001ff6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3728      	adds	r7, #40	@ 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40004400 	.word	0x40004400
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020000 	.word	0x40020000

08001bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <NMI_Handler+0x4>

08001bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0){
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <SysTick_Handler+0x38>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <SysTick_Handler+0x18>
	Timer1--;
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <SysTick_Handler+0x38>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <SysTick_Handler+0x38>)
 8001c26:	801a      	strh	r2, [r3, #0]
	}
	if(Timer2 > 0){
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <SysTick_Handler+0x3c>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <SysTick_Handler+0x2c>
	Timer2--;
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <SysTick_Handler+0x3c>)
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b04      	ldr	r3, [pc, #16]	@ (8001c4c <SysTick_Handler+0x3c>)
 8001c3a:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c3c:	f000 f8a0 	bl	8001d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001c40:	f000 f9f3 	bl	800202a <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000044 	.word	0x20000044
 8001c4c:	20000046 	.word	0x20000046

08001c50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <USART2_IRQHandler+0x10>)
 8001c56:	f001 feef 	bl	8003a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200010dc 	.word	0x200010dc

08001c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <SystemInit+0x20>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c6e:	4a05      	ldr	r2, [pc, #20]	@ (8001c84 <SystemInit+0x20>)
 8001c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c8c:	f7ff ffea 	bl	8001c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c90:	480c      	ldr	r0, [pc, #48]	@ (8001cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c92:	490d      	ldr	r1, [pc, #52]	@ (8001cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c98:	e002      	b.n	8001ca0 <LoopCopyDataInit>

08001c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9e:	3304      	adds	r3, #4

08001ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca4:	d3f9      	bcc.n	8001c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8001cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cac:	e001      	b.n	8001cb2 <LoopFillZerobss>

08001cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb0:	3204      	adds	r2, #4

08001cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb4:	d3fb      	bcc.n	8001cae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001cb6:	f005 fd9d 	bl	80077f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cba:	f7ff fc4f 	bl	800155c <main>
  bx  lr    
 8001cbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001ccc:	08007d90 	.word	0x08007d90
  ldr r2, =_sbss
 8001cd0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001cd4:	20008b90 	.word	0x20008b90

08001cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC_IRQHandler>
	...

08001cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d1c <HAL_Init+0x40>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d1c <HAL_Init+0x40>)
 8001ce6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cec:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <HAL_Init+0x40>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8001d1c <HAL_Init+0x40>)
 8001cf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf8:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <HAL_Init+0x40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a07      	ldr	r2, [pc, #28]	@ (8001d1c <HAL_Init+0x40>)
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d04:	2003      	movs	r0, #3
 8001d06:	f000 f94f 	bl	8001fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0a:	200f      	movs	r0, #15
 8001d0c:	f000 f808 	bl	8001d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d10:	f7ff fe94 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023c00 	.word	0x40023c00

08001d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d28:	4b12      	ldr	r3, [pc, #72]	@ (8001d74 <HAL_InitTick+0x54>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <HAL_InitTick+0x58>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f967 	bl	8002012 <HAL_SYSTICK_Config>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00e      	b.n	8001d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b0f      	cmp	r3, #15
 8001d52:	d80a      	bhi.n	8001d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d54:	2200      	movs	r2, #0
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f000 f92f 	bl	8001fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d60:	4a06      	ldr	r2, [pc, #24]	@ (8001d7c <HAL_InitTick+0x5c>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e000      	b.n	8001d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000008 	.word	0x20000008
 8001d78:	20000010 	.word	0x20000010
 8001d7c:	2000000c 	.word	0x2000000c

08001d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <HAL_IncTick+0x20>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_IncTick+0x24>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a04      	ldr	r2, [pc, #16]	@ (8001da4 <HAL_IncTick+0x24>)
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000010 	.word	0x20000010
 8001da4:	20008950 	.word	0x20008950

08001da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dac:	4b03      	ldr	r3, [pc, #12]	@ (8001dbc <HAL_GetTick+0x14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20008950 	.word	0x20008950

08001dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc8:	f7ff ffee 	bl	8001da8 <HAL_GetTick>
 8001dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd8:	d005      	beq.n	8001de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dda:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <HAL_Delay+0x44>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001de6:	bf00      	nop
 8001de8:	f7ff ffde 	bl	8001da8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d8f7      	bhi.n	8001de8 <HAL_Delay+0x28>
  {
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000010 	.word	0x20000010

08001e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e24:	4013      	ands	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3a:	4a04      	ldr	r2, [pc, #16]	@ (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	60d3      	str	r3, [r2, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e54:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <__NVIC_GetPriorityGrouping+0x18>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	f003 0307 	and.w	r3, r3, #7
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	db0b      	blt.n	8001e96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4907      	ldr	r1, [pc, #28]	@ (8001ea4 <__NVIC_EnableIRQ+0x38>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000e100 	.word	0xe000e100

08001ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	db0a      	blt.n	8001ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	490c      	ldr	r1, [pc, #48]	@ (8001ef4 <__NVIC_SetPriority+0x4c>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	0112      	lsls	r2, r2, #4
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed0:	e00a      	b.n	8001ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4908      	ldr	r1, [pc, #32]	@ (8001ef8 <__NVIC_SetPriority+0x50>)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	3b04      	subs	r3, #4
 8001ee0:	0112      	lsls	r2, r2, #4
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	761a      	strb	r2, [r3, #24]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000e100 	.word	0xe000e100
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	@ 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f1c3 0307 	rsb	r3, r3, #7
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	bf28      	it	cs
 8001f1a:	2304      	movcs	r3, #4
 8001f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d902      	bls.n	8001f2c <NVIC_EncodePriority+0x30>
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3b03      	subs	r3, #3
 8001f2a:	e000      	b.n	8001f2e <NVIC_EncodePriority+0x32>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	f04f 32ff 	mov.w	r2, #4294967295
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43d9      	mvns	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	4313      	orrs	r3, r2
         );
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	@ 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f74:	d301      	bcc.n	8001f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00f      	b.n	8001f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa4 <SysTick_Config+0x40>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f82:	210f      	movs	r1, #15
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	f7ff ff8e 	bl	8001ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f8c:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <SysTick_Config+0x40>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f92:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <SysTick_Config+0x40>)
 8001f94:	2207      	movs	r2, #7
 8001f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	e000e010 	.word	0xe000e010

08001fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ff29 	bl	8001e08 <__NVIC_SetPriorityGrouping>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd0:	f7ff ff3e 	bl	8001e50 <__NVIC_GetPriorityGrouping>
 8001fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	6978      	ldr	r0, [r7, #20]
 8001fdc:	f7ff ff8e 	bl	8001efc <NVIC_EncodePriority>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff5d 	bl	8001ea8 <__NVIC_SetPriority>
}
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff31 	bl	8001e6c <__NVIC_EnableIRQ>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffa2 	bl	8001f64 <SysTick_Config>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800202e:	f000 f802 	bl	8002036 <HAL_SYSTICK_Callback>
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002050:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002052:	f7ff fea9 	bl	8001da8 <HAL_GetTick>
 8002056:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d008      	beq.n	8002076 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2280      	movs	r2, #128	@ 0x80
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e052      	b.n	800211c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0216 	bic.w	r2, r2, #22
 8002084:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695a      	ldr	r2, [r3, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002094:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	2b00      	cmp	r3, #0
 800209c:	d103      	bne.n	80020a6 <HAL_DMA_Abort+0x62>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0208 	bic.w	r2, r2, #8
 80020b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0201 	bic.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c6:	e013      	b.n	80020f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020c8:	f7ff fe6e 	bl	8001da8 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d90c      	bls.n	80020f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2220      	movs	r2, #32
 80020da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2203      	movs	r2, #3
 80020e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e015      	b.n	800211c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1e4      	bne.n	80020c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002102:	223f      	movs	r2, #63	@ 0x3f
 8002104:	409a      	lsls	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d004      	beq.n	8002142 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2280      	movs	r2, #128	@ 0x80
 800213c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00c      	b.n	800215c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2205      	movs	r2, #5
 8002146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0201 	bic.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	@ 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	e165      	b.n	8002450 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002184:	2201      	movs	r2, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	429a      	cmp	r2, r3
 800219e:	f040 8154 	bne.w	800244a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d005      	beq.n	80021ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d130      	bne.n	800221c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	2203      	movs	r2, #3
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 0201 	and.w	r2, r3, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b03      	cmp	r3, #3
 8002226:	d017      	beq.n	8002258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d123      	bne.n	80022ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	08da      	lsrs	r2, r3, #3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3208      	adds	r2, #8
 800226c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	220f      	movs	r2, #15
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	08da      	lsrs	r2, r3, #3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3208      	adds	r2, #8
 80022a6:	69b9      	ldr	r1, [r7, #24]
 80022a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0203 	and.w	r2, r3, #3
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80ae 	beq.w	800244a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002468 <HAL_GPIO_Init+0x300>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002468 <HAL_GPIO_Init+0x300>)
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002468 <HAL_GPIO_Init+0x300>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800230a:	4a58      	ldr	r2, [pc, #352]	@ (800246c <HAL_GPIO_Init+0x304>)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3302      	adds	r3, #2
 8002312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	220f      	movs	r2, #15
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4f      	ldr	r2, [pc, #316]	@ (8002470 <HAL_GPIO_Init+0x308>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d025      	beq.n	8002382 <HAL_GPIO_Init+0x21a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4e      	ldr	r2, [pc, #312]	@ (8002474 <HAL_GPIO_Init+0x30c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01f      	beq.n	800237e <HAL_GPIO_Init+0x216>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4d      	ldr	r2, [pc, #308]	@ (8002478 <HAL_GPIO_Init+0x310>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d019      	beq.n	800237a <HAL_GPIO_Init+0x212>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4c      	ldr	r2, [pc, #304]	@ (800247c <HAL_GPIO_Init+0x314>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d013      	beq.n	8002376 <HAL_GPIO_Init+0x20e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4b      	ldr	r2, [pc, #300]	@ (8002480 <HAL_GPIO_Init+0x318>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00d      	beq.n	8002372 <HAL_GPIO_Init+0x20a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4a      	ldr	r2, [pc, #296]	@ (8002484 <HAL_GPIO_Init+0x31c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d007      	beq.n	800236e <HAL_GPIO_Init+0x206>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a49      	ldr	r2, [pc, #292]	@ (8002488 <HAL_GPIO_Init+0x320>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_GPIO_Init+0x202>
 8002366:	2306      	movs	r3, #6
 8002368:	e00c      	b.n	8002384 <HAL_GPIO_Init+0x21c>
 800236a:	2307      	movs	r3, #7
 800236c:	e00a      	b.n	8002384 <HAL_GPIO_Init+0x21c>
 800236e:	2305      	movs	r3, #5
 8002370:	e008      	b.n	8002384 <HAL_GPIO_Init+0x21c>
 8002372:	2304      	movs	r3, #4
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x21c>
 8002376:	2303      	movs	r3, #3
 8002378:	e004      	b.n	8002384 <HAL_GPIO_Init+0x21c>
 800237a:	2302      	movs	r3, #2
 800237c:	e002      	b.n	8002384 <HAL_GPIO_Init+0x21c>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_GPIO_Init+0x21c>
 8002382:	2300      	movs	r3, #0
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	f002 0203 	and.w	r2, r2, #3
 800238a:	0092      	lsls	r2, r2, #2
 800238c:	4093      	lsls	r3, r2
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002394:	4935      	ldr	r1, [pc, #212]	@ (800246c <HAL_GPIO_Init+0x304>)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	3302      	adds	r3, #2
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023a2:	4b3a      	ldr	r3, [pc, #232]	@ (800248c <HAL_GPIO_Init+0x324>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023c6:	4a31      	ldr	r2, [pc, #196]	@ (800248c <HAL_GPIO_Init+0x324>)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023cc:	4b2f      	ldr	r3, [pc, #188]	@ (800248c <HAL_GPIO_Init+0x324>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f0:	4a26      	ldr	r2, [pc, #152]	@ (800248c <HAL_GPIO_Init+0x324>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023f6:	4b25      	ldr	r3, [pc, #148]	@ (800248c <HAL_GPIO_Init+0x324>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800241a:	4a1c      	ldr	r2, [pc, #112]	@ (800248c <HAL_GPIO_Init+0x324>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002420:	4b1a      	ldr	r3, [pc, #104]	@ (800248c <HAL_GPIO_Init+0x324>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002444:	4a11      	ldr	r2, [pc, #68]	@ (800248c <HAL_GPIO_Init+0x324>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3301      	adds	r3, #1
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	2b0f      	cmp	r3, #15
 8002454:	f67f ae96 	bls.w	8002184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3724      	adds	r7, #36	@ 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	40013800 	.word	0x40013800
 8002470:	40020000 	.word	0x40020000
 8002474:	40020400 	.word	0x40020400
 8002478:	40020800 	.word	0x40020800
 800247c:	40020c00 	.word	0x40020c00
 8002480:	40021000 	.word	0x40021000
 8002484:	40021400 	.word	0x40021400
 8002488:	40021800 	.word	0x40021800
 800248c:	40013c00 	.word	0x40013c00

08002490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]
 800249c:	4613      	mov	r3, r2
 800249e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a0:	787b      	ldrb	r3, [r7, #1]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024a6:	887a      	ldrh	r2, [r7, #2]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024ac:	e003      	b.n	80024b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ae:	887b      	ldrh	r3, [r7, #2]
 80024b0:	041a      	lsls	r2, r3, #16
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	619a      	str	r2, [r3, #24]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0cc      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b68      	ldr	r3, [pc, #416]	@ (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d90c      	bls.n	8002500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b65      	ldr	r3, [pc, #404]	@ (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b63      	ldr	r3, [pc, #396]	@ (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0b8      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002518:	4b59      	ldr	r3, [pc, #356]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a58      	ldr	r2, [pc, #352]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002530:	4b53      	ldr	r3, [pc, #332]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a52      	ldr	r2, [pc, #328]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800253a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253c:	4b50      	ldr	r3, [pc, #320]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	494d      	ldr	r1, [pc, #308]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d044      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b47      	ldr	r3, [pc, #284]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d119      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e07f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d003      	beq.n	8002582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257e:	2b03      	cmp	r3, #3
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002582:	4b3f      	ldr	r3, [pc, #252]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002592:	4b3b      	ldr	r3, [pc, #236]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e067      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a2:	4b37      	ldr	r3, [pc, #220]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4934      	ldr	r1, [pc, #208]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b4:	f7ff fbf8 	bl	8001da8 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7ff fbf4 	bl	8001da8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e04f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 020c 	and.w	r2, r3, #12
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1eb      	bne.n	80025bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e4:	4b25      	ldr	r3, [pc, #148]	@ (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d20c      	bcs.n	800260c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b22      	ldr	r3, [pc, #136]	@ (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b20      	ldr	r3, [pc, #128]	@ (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e032      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002618:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4916      	ldr	r1, [pc, #88]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002636:	4b12      	ldr	r3, [pc, #72]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	490e      	ldr	r1, [pc, #56]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800264a:	f000 f855 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 800264e:	4602      	mov	r2, r0
 8002650:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	490a      	ldr	r1, [pc, #40]	@ (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	5ccb      	ldrb	r3, [r1, r3]
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	4a09      	ldr	r2, [pc, #36]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002666:	4b09      	ldr	r3, [pc, #36]	@ (800268c <HAL_RCC_ClockConfig+0x1c8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fb58 	bl	8001d20 <HAL_InitTick>

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023c00 	.word	0x40023c00
 8002680:	40023800 	.word	0x40023800
 8002684:	08007928 	.word	0x08007928
 8002688:	20000008 	.word	0x20000008
 800268c:	2000000c 	.word	0x2000000c

08002690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002694:	4b03      	ldr	r3, [pc, #12]	@ (80026a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000008 	.word	0x20000008

080026a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026ac:	f7ff fff0 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	0a9b      	lsrs	r3, r3, #10
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4903      	ldr	r1, [pc, #12]	@ (80026cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40023800 	.word	0x40023800
 80026cc:	08007938 	.word	0x08007938

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026d4:	f7ff ffdc 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0b5b      	lsrs	r3, r3, #13
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	@ (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	08007938 	.word	0x08007938

080026f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026fc:	b0a6      	sub	sp, #152	@ 0x98
 80026fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800271e:	4bc8      	ldr	r3, [pc, #800]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x348>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b0c      	cmp	r3, #12
 8002728:	f200 817e 	bhi.w	8002a28 <HAL_RCC_GetSysClockFreq+0x330>
 800272c:	a201      	add	r2, pc, #4	@ (adr r2, 8002734 <HAL_RCC_GetSysClockFreq+0x3c>)
 800272e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002732:	bf00      	nop
 8002734:	08002769 	.word	0x08002769
 8002738:	08002a29 	.word	0x08002a29
 800273c:	08002a29 	.word	0x08002a29
 8002740:	08002a29 	.word	0x08002a29
 8002744:	08002771 	.word	0x08002771
 8002748:	08002a29 	.word	0x08002a29
 800274c:	08002a29 	.word	0x08002a29
 8002750:	08002a29 	.word	0x08002a29
 8002754:	08002779 	.word	0x08002779
 8002758:	08002a29 	.word	0x08002a29
 800275c:	08002a29 	.word	0x08002a29
 8002760:	08002a29 	.word	0x08002a29
 8002764:	080028e3 	.word	0x080028e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002768:	4bb6      	ldr	r3, [pc, #728]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x34c>)
 800276a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 800276e:	e15f      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002770:	4bb5      	ldr	r3, [pc, #724]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x350>)
 8002772:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002776:	e15b      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002778:	4bb1      	ldr	r3, [pc, #708]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x348>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002780:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002784:	4bae      	ldr	r3, [pc, #696]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x348>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d031      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002790:	4bab      	ldr	r3, [pc, #684]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x348>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	2200      	movs	r2, #0
 8002798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800279a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800279c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800279e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80027a4:	2300      	movs	r3, #0
 80027a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80027a8:	4ba7      	ldr	r3, [pc, #668]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x350>)
 80027aa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80027ae:	462a      	mov	r2, r5
 80027b0:	fb03 f202 	mul.w	r2, r3, r2
 80027b4:	2300      	movs	r3, #0
 80027b6:	4621      	mov	r1, r4
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	4aa2      	ldr	r2, [pc, #648]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x350>)
 80027c0:	4621      	mov	r1, r4
 80027c2:	fba1 1202 	umull	r1, r2, r1, r2
 80027c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80027c8:	460a      	mov	r2, r1
 80027ca:	67ba      	str	r2, [r7, #120]	@ 0x78
 80027cc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80027ce:	4413      	add	r3, r2
 80027d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027d6:	2200      	movs	r2, #0
 80027d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80027dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027e0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80027e4:	f7fd fd16 	bl	8000214 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4613      	mov	r3, r2
 80027ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027f2:	e064      	b.n	80028be <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f4:	4b92      	ldr	r3, [pc, #584]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x348>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	2200      	movs	r2, #0
 80027fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80027fe:	657a      	str	r2, [r7, #84]	@ 0x54
 8002800:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002806:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002808:	2300      	movs	r3, #0
 800280a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800280c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002810:	4622      	mov	r2, r4
 8002812:	462b      	mov	r3, r5
 8002814:	f04f 0000 	mov.w	r0, #0
 8002818:	f04f 0100 	mov.w	r1, #0
 800281c:	0159      	lsls	r1, r3, #5
 800281e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002822:	0150      	lsls	r0, r2, #5
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4621      	mov	r1, r4
 800282a:	1a51      	subs	r1, r2, r1
 800282c:	6139      	str	r1, [r7, #16]
 800282e:	4629      	mov	r1, r5
 8002830:	eb63 0301 	sbc.w	r3, r3, r1
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002842:	4659      	mov	r1, fp
 8002844:	018b      	lsls	r3, r1, #6
 8002846:	4651      	mov	r1, sl
 8002848:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800284c:	4651      	mov	r1, sl
 800284e:	018a      	lsls	r2, r1, #6
 8002850:	4651      	mov	r1, sl
 8002852:	ebb2 0801 	subs.w	r8, r2, r1
 8002856:	4659      	mov	r1, fp
 8002858:	eb63 0901 	sbc.w	r9, r3, r1
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002868:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800286c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002870:	4690      	mov	r8, r2
 8002872:	4699      	mov	r9, r3
 8002874:	4623      	mov	r3, r4
 8002876:	eb18 0303 	adds.w	r3, r8, r3
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	462b      	mov	r3, r5
 800287e:	eb49 0303 	adc.w	r3, r9, r3
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002890:	4629      	mov	r1, r5
 8002892:	028b      	lsls	r3, r1, #10
 8002894:	4621      	mov	r1, r4
 8002896:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800289a:	4621      	mov	r1, r4
 800289c:	028a      	lsls	r2, r1, #10
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028a6:	2200      	movs	r2, #0
 80028a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80028aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80028ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028b0:	f7fd fcb0 	bl	8000214 <__aeabi_uldivmod>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4613      	mov	r3, r2
 80028ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028be:	4b60      	ldr	r3, [pc, #384]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x348>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	3301      	adds	r3, #1
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80028d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80028d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80028e0:	e0a6      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e2:	4b57      	ldr	r3, [pc, #348]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x348>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028ee:	4b54      	ldr	r3, [pc, #336]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x348>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d02a      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fa:	4b51      	ldr	r3, [pc, #324]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x348>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	099b      	lsrs	r3, r3, #6
 8002900:	2200      	movs	r2, #0
 8002902:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002904:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002908:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800290c:	2100      	movs	r1, #0
 800290e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x350>)
 8002910:	fb03 f201 	mul.w	r2, r3, r1
 8002914:	2300      	movs	r3, #0
 8002916:	fb00 f303 	mul.w	r3, r0, r3
 800291a:	4413      	add	r3, r2
 800291c:	4a4a      	ldr	r2, [pc, #296]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x350>)
 800291e:	fba0 1202 	umull	r1, r2, r0, r2
 8002922:	677a      	str	r2, [r7, #116]	@ 0x74
 8002924:	460a      	mov	r2, r1
 8002926:	673a      	str	r2, [r7, #112]	@ 0x70
 8002928:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800292a:	4413      	add	r3, r2
 800292c:	677b      	str	r3, [r7, #116]	@ 0x74
 800292e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002932:	2200      	movs	r2, #0
 8002934:	633b      	str	r3, [r7, #48]	@ 0x30
 8002936:	637a      	str	r2, [r7, #52]	@ 0x34
 8002938:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800293c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002940:	f7fd fc68 	bl	8000214 <__aeabi_uldivmod>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4613      	mov	r3, r2
 800294a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800294e:	e05b      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002950:	4b3b      	ldr	r3, [pc, #236]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x348>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	099b      	lsrs	r3, r3, #6
 8002956:	2200      	movs	r2, #0
 8002958:	62bb      	str	r3, [r7, #40]	@ 0x28
 800295a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800295c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002962:	623b      	str	r3, [r7, #32]
 8002964:	2300      	movs	r3, #0
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
 8002968:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800296c:	4642      	mov	r2, r8
 800296e:	464b      	mov	r3, r9
 8002970:	f04f 0000 	mov.w	r0, #0
 8002974:	f04f 0100 	mov.w	r1, #0
 8002978:	0159      	lsls	r1, r3, #5
 800297a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800297e:	0150      	lsls	r0, r2, #5
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4641      	mov	r1, r8
 8002986:	ebb2 0a01 	subs.w	sl, r2, r1
 800298a:	4649      	mov	r1, r9
 800298c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800299c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029a4:	ebb2 040a 	subs.w	r4, r2, sl
 80029a8:	eb63 050b 	sbc.w	r5, r3, fp
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	00eb      	lsls	r3, r5, #3
 80029b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ba:	00e2      	lsls	r2, r4, #3
 80029bc:	4614      	mov	r4, r2
 80029be:	461d      	mov	r5, r3
 80029c0:	4643      	mov	r3, r8
 80029c2:	18e3      	adds	r3, r4, r3
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	464b      	mov	r3, r9
 80029c8:	eb45 0303 	adc.w	r3, r5, r3
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029da:	4629      	mov	r1, r5
 80029dc:	028b      	lsls	r3, r1, #10
 80029de:	4621      	mov	r1, r4
 80029e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029e4:	4621      	mov	r1, r4
 80029e6:	028a      	lsls	r2, r1, #10
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029f0:	2200      	movs	r2, #0
 80029f2:	61bb      	str	r3, [r7, #24]
 80029f4:	61fa      	str	r2, [r7, #28]
 80029f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029fa:	f7fd fc0b 	bl	8000214 <__aeabi_uldivmod>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4613      	mov	r3, r2
 8002a04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a08:	4b0d      	ldr	r3, [pc, #52]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	0f1b      	lsrs	r3, r3, #28
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8002a16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002a26:	e003      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002a2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002a2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3798      	adds	r7, #152	@ 0x98
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	00f42400 	.word	0x00f42400
 8002a48:	017d7840 	.word	0x017d7840

08002a4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e28d      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8083 	beq.w	8002b72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a6c:	4b94      	ldr	r3, [pc, #592]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d019      	beq.n	8002aac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a78:	4b91      	ldr	r3, [pc, #580]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a84:	4b8e      	ldr	r3, [pc, #568]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a90:	d00c      	beq.n	8002aac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a92:	4b8b      	ldr	r3, [pc, #556]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a9a:	2b0c      	cmp	r3, #12
 8002a9c:	d112      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a9e:	4b88      	ldr	r3, [pc, #544]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	4b84      	ldr	r3, [pc, #528]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d05b      	beq.n	8002b70 <HAL_RCC_OscConfig+0x124>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d157      	bne.n	8002b70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e25a      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002acc:	d106      	bne.n	8002adc <HAL_RCC_OscConfig+0x90>
 8002ace:	4b7c      	ldr	r3, [pc, #496]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a7b      	ldr	r2, [pc, #492]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e01d      	b.n	8002b18 <HAL_RCC_OscConfig+0xcc>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0xb4>
 8002ae6:	4b76      	ldr	r3, [pc, #472]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a75      	ldr	r2, [pc, #468]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b73      	ldr	r3, [pc, #460]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a72      	ldr	r2, [pc, #456]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e00b      	b.n	8002b18 <HAL_RCC_OscConfig+0xcc>
 8002b00:	4b6f      	ldr	r3, [pc, #444]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a6e      	ldr	r2, [pc, #440]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b6c      	ldr	r3, [pc, #432]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a6b      	ldr	r2, [pc, #428]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d013      	beq.n	8002b48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7ff f942 	bl	8001da8 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b28:	f7ff f93e 	bl	8001da8 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	@ 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e21f      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	4b61      	ldr	r3, [pc, #388]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0xdc>
 8002b46:	e014      	b.n	8002b72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7ff f92e 	bl	8001da8 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b50:	f7ff f92a 	bl	8001da8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	@ 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e20b      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b62:	4b57      	ldr	r3, [pc, #348]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x104>
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d06f      	beq.n	8002c5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b7e:	4b50      	ldr	r3, [pc, #320]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d017      	beq.n	8002bba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b8a:	4b4d      	ldr	r3, [pc, #308]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d105      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b96:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00b      	beq.n	8002bba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ba2:	4b47      	ldr	r3, [pc, #284]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002baa:	2b0c      	cmp	r3, #12
 8002bac:	d11c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bae:	4b44      	ldr	r3, [pc, #272]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d116      	bne.n	8002be8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bba:	4b41      	ldr	r3, [pc, #260]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x186>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e1d3      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4937      	ldr	r1, [pc, #220]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be6:	e03a      	b.n	8002c5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf0:	4b34      	ldr	r3, [pc, #208]	@ (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf6:	f7ff f8d7 	bl	8001da8 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bfe:	f7ff f8d3 	bl	8001da8 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e1b4      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1c:	4b28      	ldr	r3, [pc, #160]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4925      	ldr	r1, [pc, #148]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]
 8002c30:	e015      	b.n	8002c5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c32:	4b24      	ldr	r3, [pc, #144]	@ (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7ff f8b6 	bl	8001da8 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c40:	f7ff f8b2 	bl	8001da8 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e193      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d036      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d016      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c72:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7ff f896 	bl	8001da8 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c80:	f7ff f892 	bl	8001da8 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e173      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x234>
 8002c9e:	e01b      	b.n	8002cd8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca0:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca6:	f7ff f87f 	bl	8001da8 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cac:	e00e      	b.n	8002ccc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cae:	f7ff f87b 	bl	8001da8 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d907      	bls.n	8002ccc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e15c      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	42470000 	.word	0x42470000
 8002cc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ccc:	4b8a      	ldr	r3, [pc, #552]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1ea      	bne.n	8002cae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8097 	beq.w	8002e14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cea:	4b83      	ldr	r3, [pc, #524]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10f      	bne.n	8002d16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	4a7e      	ldr	r2, [pc, #504]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d06:	4b7c      	ldr	r3, [pc, #496]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d12:	2301      	movs	r3, #1
 8002d14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d16:	4b79      	ldr	r3, [pc, #484]	@ (8002efc <HAL_RCC_OscConfig+0x4b0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d118      	bne.n	8002d54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d22:	4b76      	ldr	r3, [pc, #472]	@ (8002efc <HAL_RCC_OscConfig+0x4b0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a75      	ldr	r2, [pc, #468]	@ (8002efc <HAL_RCC_OscConfig+0x4b0>)
 8002d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2e:	f7ff f83b 	bl	8001da8 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d36:	f7ff f837 	bl	8001da8 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e118      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	4b6c      	ldr	r3, [pc, #432]	@ (8002efc <HAL_RCC_OscConfig+0x4b0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d106      	bne.n	8002d6a <HAL_RCC_OscConfig+0x31e>
 8002d5c:	4b66      	ldr	r3, [pc, #408]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d60:	4a65      	ldr	r2, [pc, #404]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d68:	e01c      	b.n	8002da4 <HAL_RCC_OscConfig+0x358>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b05      	cmp	r3, #5
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x340>
 8002d72:	4b61      	ldr	r3, [pc, #388]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d76:	4a60      	ldr	r2, [pc, #384]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d78:	f043 0304 	orr.w	r3, r3, #4
 8002d7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d7e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d82:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCC_OscConfig+0x358>
 8002d8c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d90:	4a59      	ldr	r2, [pc, #356]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d98:	4b57      	ldr	r3, [pc, #348]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9c:	4a56      	ldr	r2, [pc, #344]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d9e:	f023 0304 	bic.w	r3, r3, #4
 8002da2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d015      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dac:	f7fe fffc 	bl	8001da8 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db2:	e00a      	b.n	8002dca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db4:	f7fe fff8 	bl	8001da8 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e0d7      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dca:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0ee      	beq.n	8002db4 <HAL_RCC_OscConfig+0x368>
 8002dd6:	e014      	b.n	8002e02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fe ffe6 	bl	8001da8 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dde:	e00a      	b.n	8002df6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de0:	f7fe ffe2 	bl	8001da8 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e0c1      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df6:	4b40      	ldr	r3, [pc, #256]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1ee      	bne.n	8002de0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d105      	bne.n	8002e14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e08:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	4a3a      	ldr	r2, [pc, #232]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002e0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80ad 	beq.w	8002f78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e1e:	4b36      	ldr	r3, [pc, #216]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d060      	beq.n	8002eec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d145      	bne.n	8002ebe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e32:	4b33      	ldr	r3, [pc, #204]	@ (8002f00 <HAL_RCC_OscConfig+0x4b4>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe ffb6 	bl	8001da8 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe ffb2 	bl	8001da8 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e093      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e52:	4b29      	ldr	r3, [pc, #164]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	019b      	lsls	r3, r3, #6
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	085b      	lsrs	r3, r3, #1
 8002e76:	3b01      	subs	r3, #1
 8002e78:	041b      	lsls	r3, r3, #16
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e80:	061b      	lsls	r3, r3, #24
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	071b      	lsls	r3, r3, #28
 8002e8a:	491b      	ldr	r1, [pc, #108]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e90:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <HAL_RCC_OscConfig+0x4b4>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e96:	f7fe ff87 	bl	8001da8 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fe ff83 	bl	8001da8 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e064      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x452>
 8002ebc:	e05c      	b.n	8002f78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebe:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <HAL_RCC_OscConfig+0x4b4>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fe ff70 	bl	8001da8 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe ff6c 	bl	8001da8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e04d      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ede:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x480>
 8002eea:	e045      	b.n	8002f78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e040      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40007000 	.word	0x40007000
 8002f00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f04:	4b1f      	ldr	r3, [pc, #124]	@ (8002f84 <HAL_RCC_OscConfig+0x538>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d030      	beq.n	8002f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d129      	bne.n	8002f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d122      	bne.n	8002f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f34:	4013      	ands	r3, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d119      	bne.n	8002f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d10f      	bne.n	8002f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d107      	bne.n	8002f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800

08002f88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e07b      	b.n	8003092 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d108      	bne.n	8002fb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002faa:	d009      	beq.n	8002fc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	61da      	str	r2, [r3, #28]
 8002fb2:	e005      	b.n	8002fc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe fd56 	bl	8001a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ff6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003044:	ea42 0103 	orr.w	r1, r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	f003 0104 	and.w	r1, r3, #4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003066:	f003 0210 	and.w	r2, r3, #16
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003080:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b088      	sub	sp, #32
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	4613      	mov	r3, r2
 80030a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_SPI_Transmit+0x22>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e12d      	b.n	8003318 <HAL_SPI_Transmit+0x27e>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030c4:	f7fe fe70 	bl	8001da8 <HAL_GetTick>
 80030c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d002      	beq.n	80030e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030da:	2302      	movs	r3, #2
 80030dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030de:	e116      	b.n	800330e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <HAL_SPI_Transmit+0x52>
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030f0:	e10d      	b.n	800330e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2203      	movs	r2, #3
 80030f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	88fa      	ldrh	r2, [r7, #6]
 800310a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003138:	d10f      	bne.n	800315a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003148:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003158:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003164:	2b40      	cmp	r3, #64	@ 0x40
 8003166:	d007      	beq.n	8003178 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003176:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003180:	d14f      	bne.n	8003222 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_SPI_Transmit+0xf6>
 800318a:	8afb      	ldrh	r3, [r7, #22]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d142      	bne.n	8003216 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003194:	881a      	ldrh	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a0:	1c9a      	adds	r2, r3, #2
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031b4:	e02f      	b.n	8003216 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d112      	bne.n	80031ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c8:	881a      	ldrh	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d4:	1c9a      	adds	r2, r3, #2
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80031e8:	e015      	b.n	8003216 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ea:	f7fe fddd 	bl	8001da8 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d803      	bhi.n	8003202 <HAL_SPI_Transmit+0x168>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d102      	bne.n	8003208 <HAL_SPI_Transmit+0x16e>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003214:	e07b      	b.n	800330e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1ca      	bne.n	80031b6 <HAL_SPI_Transmit+0x11c>
 8003220:	e050      	b.n	80032c4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_SPI_Transmit+0x196>
 800322a:	8afb      	ldrh	r3, [r7, #22]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d144      	bne.n	80032ba <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	7812      	ldrb	r2, [r2, #0]
 800323c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003256:	e030      	b.n	80032ba <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b02      	cmp	r3, #2
 8003264:	d113      	bne.n	800328e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	330c      	adds	r3, #12
 8003270:	7812      	ldrb	r2, [r2, #0]
 8003272:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800328c:	e015      	b.n	80032ba <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800328e:	f7fe fd8b 	bl	8001da8 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d803      	bhi.n	80032a6 <HAL_SPI_Transmit+0x20c>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d102      	bne.n	80032ac <HAL_SPI_Transmit+0x212>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80032b8:	e029      	b.n	800330e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1c9      	bne.n	8003258 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	6839      	ldr	r1, [r7, #0]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 fa61 	bl	8003790 <SPI_EndRxTxTransaction>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10a      	bne.n	80032f8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	77fb      	strb	r3, [r7, #31]
 8003304:	e003      	b.n	800330e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003316:	7ffb      	ldrb	r3, [r7, #31]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3720      	adds	r7, #32
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08c      	sub	sp, #48	@ 0x30
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800332e:	2301      	movs	r3, #1
 8003330:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_SPI_TransmitReceive+0x26>
 8003342:	2302      	movs	r3, #2
 8003344:	e198      	b.n	8003678 <HAL_SPI_TransmitReceive+0x358>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800334e:	f7fe fd2b 	bl	8001da8 <HAL_GetTick>
 8003352:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800335a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003368:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800336c:	2b01      	cmp	r3, #1
 800336e:	d00f      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x70>
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003376:	d107      	bne.n	8003388 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d103      	bne.n	8003388 <HAL_SPI_TransmitReceive+0x68>
 8003380:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003384:	2b04      	cmp	r3, #4
 8003386:	d003      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003388:	2302      	movs	r3, #2
 800338a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800338e:	e16d      	b.n	800366c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_SPI_TransmitReceive+0x82>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_SPI_TransmitReceive+0x82>
 800339c:	887b      	ldrh	r3, [r7, #2]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80033a8:	e160      	b.n	800366c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d003      	beq.n	80033be <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2205      	movs	r2, #5
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	887a      	ldrh	r2, [r7, #2]
 80033ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	887a      	ldrh	r2, [r7, #2]
 80033d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	887a      	ldrh	r2, [r7, #2]
 80033e6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fe:	2b40      	cmp	r3, #64	@ 0x40
 8003400:	d007      	beq.n	8003412 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003410:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800341a:	d17c      	bne.n	8003516 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_SPI_TransmitReceive+0x10a>
 8003424:	8b7b      	ldrh	r3, [r7, #26]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d16a      	bne.n	8003500 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	881a      	ldrh	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	1c9a      	adds	r2, r3, #2
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800344e:	e057      	b.n	8003500 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b02      	cmp	r3, #2
 800345c:	d11b      	bne.n	8003496 <HAL_SPI_TransmitReceive+0x176>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d016      	beq.n	8003496 <HAL_SPI_TransmitReceive+0x176>
 8003468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346a:	2b01      	cmp	r3, #1
 800346c:	d113      	bne.n	8003496 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003472:	881a      	ldrh	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	1c9a      	adds	r2, r3, #2
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d119      	bne.n	80034d8 <HAL_SPI_TransmitReceive+0x1b8>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d014      	beq.n	80034d8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b8:	b292      	uxth	r2, r2
 80034ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c0:	1c9a      	adds	r2, r3, #2
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034d4:	2301      	movs	r3, #1
 80034d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034d8:	f7fe fc66 	bl	8001da8 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d80b      	bhi.n	8003500 <HAL_SPI_TransmitReceive+0x1e0>
 80034e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ee:	d007      	beq.n	8003500 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80034fe:	e0b5      	b.n	800366c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1a2      	bne.n	8003450 <HAL_SPI_TransmitReceive+0x130>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d19d      	bne.n	8003450 <HAL_SPI_TransmitReceive+0x130>
 8003514:	e080      	b.n	8003618 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_SPI_TransmitReceive+0x204>
 800351e:	8b7b      	ldrh	r3, [r7, #26]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d16f      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	330c      	adds	r3, #12
 800352e:	7812      	ldrb	r2, [r2, #0]
 8003530:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800354a:	e05b      	b.n	8003604 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b02      	cmp	r3, #2
 8003558:	d11c      	bne.n	8003594 <HAL_SPI_TransmitReceive+0x274>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d017      	beq.n	8003594 <HAL_SPI_TransmitReceive+0x274>
 8003564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003566:	2b01      	cmp	r3, #1
 8003568:	d114      	bne.n	8003594 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	7812      	ldrb	r2, [r2, #0]
 8003576:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d119      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x2b6>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d014      	beq.n	80035d6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035d2:	2301      	movs	r3, #1
 80035d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035d6:	f7fe fbe7 	bl	8001da8 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d803      	bhi.n	80035ee <HAL_SPI_TransmitReceive+0x2ce>
 80035e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d102      	bne.n	80035f4 <HAL_SPI_TransmitReceive+0x2d4>
 80035ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d107      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003602:	e033      	b.n	800366c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d19e      	bne.n	800354c <HAL_SPI_TransmitReceive+0x22c>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d199      	bne.n	800354c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f8b7 	bl	8003790 <SPI_EndRxTxTransaction>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d006      	beq.n	8003636 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003634:	e01a      	b.n	800366c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10a      	bne.n	8003654 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003662:	e003      	b.n	800366c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003674:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003678:	4618      	mov	r0, r3
 800367a:	3730      	adds	r7, #48	@ 0x30
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003690:	f7fe fb8a 	bl	8001da8 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	4413      	add	r3, r2
 800369e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036a0:	f7fe fb82 	bl	8001da8 <HAL_GetTick>
 80036a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036a6:	4b39      	ldr	r3, [pc, #228]	@ (800378c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	015b      	lsls	r3, r3, #5
 80036ac:	0d1b      	lsrs	r3, r3, #20
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	fb02 f303 	mul.w	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036b6:	e054      	b.n	8003762 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036be:	d050      	beq.n	8003762 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036c0:	f7fe fb72 	bl	8001da8 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d902      	bls.n	80036d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d13d      	bne.n	8003752 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036ee:	d111      	bne.n	8003714 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036f8:	d004      	beq.n	8003704 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003702:	d107      	bne.n	8003714 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003712:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800371c:	d10f      	bne.n	800373e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800373c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e017      	b.n	8003782 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3b01      	subs	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4013      	ands	r3, r2
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	429a      	cmp	r2, r3
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	429a      	cmp	r2, r3
 800377e:	d19b      	bne.n	80036b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000008 	.word	0x20000008

08003790 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2201      	movs	r2, #1
 80037a4:	2102      	movs	r1, #2
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f7ff ff6a 	bl	8003680 <SPI_WaitFlagStateUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b6:	f043 0220 	orr.w	r2, r3, #32
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e032      	b.n	8003828 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003830 <SPI_EndRxTxTransaction+0xa0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003834 <SPI_EndRxTxTransaction+0xa4>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	0d5b      	lsrs	r3, r3, #21
 80037ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037e0:	d112      	bne.n	8003808 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2200      	movs	r2, #0
 80037ea:	2180      	movs	r1, #128	@ 0x80
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f7ff ff47 	bl	8003680 <SPI_WaitFlagStateUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d016      	beq.n	8003826 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e00f      	b.n	8003828 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	3b01      	subs	r3, #1
 8003812:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381e:	2b80      	cmp	r3, #128	@ 0x80
 8003820:	d0f2      	beq.n	8003808 <SPI_EndRxTxTransaction+0x78>
 8003822:	e000      	b.n	8003826 <SPI_EndRxTxTransaction+0x96>
        break;
 8003824:	bf00      	nop
  }

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20000008 	.word	0x20000008
 8003834:	165e9f81 	.word	0x165e9f81

08003838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e042      	b.n	80038d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fe f95c 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2224      	movs	r2, #36	@ 0x24
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800387a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fdbd 	bl	80043fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	@ 0x28
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d175      	bne.n	80039e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_UART_Transmit+0x2c>
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e06e      	b.n	80039e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2221      	movs	r2, #33	@ 0x21
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003916:	f7fe fa47 	bl	8001da8 <HAL_GetTick>
 800391a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	88fa      	ldrh	r2, [r7, #6]
 8003920:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	88fa      	ldrh	r2, [r7, #6]
 8003926:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003930:	d108      	bne.n	8003944 <HAL_UART_Transmit+0x6c>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d104      	bne.n	8003944 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	e003      	b.n	800394c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800394c:	e02e      	b.n	80039ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2200      	movs	r2, #0
 8003956:	2180      	movs	r1, #128	@ 0x80
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fb1f 	bl	8003f9c <UART_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e03a      	b.n	80039e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003984:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	3302      	adds	r3, #2
 800398a:	61bb      	str	r3, [r7, #24]
 800398c:	e007      	b.n	800399e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	3301      	adds	r3, #1
 800399c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1cb      	bne.n	800394e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2200      	movs	r2, #0
 80039be:	2140      	movs	r1, #64	@ 0x40
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 faeb 	bl	8003f9c <UART_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e006      	b.n	80039e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d112      	bne.n	8003a2e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_UART_Receive_IT+0x26>
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e00b      	b.n	8003a30 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	461a      	mov	r2, r3
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fb12 	bl	800404e <UART_Start_Receive_IT>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	e000      	b.n	8003a30 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a2e:	2302      	movs	r3, #2
  }
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b0ba      	sub	sp, #232	@ 0xe8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10f      	bne.n	8003a9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_UART_IRQHandler+0x66>
 8003a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fbf2 	bl	8004280 <UART_Receive_IT>
      return;
 8003a9c:	e25b      	b.n	8003f56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80de 	beq.w	8003c64 <HAL_UART_IRQHandler+0x22c>
 8003aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ab8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80d1 	beq.w	8003c64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00b      	beq.n	8003ae6 <HAL_UART_IRQHandler+0xae>
 8003ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ade:	f043 0201 	orr.w	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <HAL_UART_IRQHandler+0xd2>
 8003af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b02:	f043 0202 	orr.w	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_UART_IRQHandler+0xf6>
 8003b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b26:	f043 0204 	orr.w	r2, r3, #4
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d011      	beq.n	8003b5e <HAL_UART_IRQHandler+0x126>
 8003b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d105      	bne.n	8003b52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	f043 0208 	orr.w	r2, r3, #8
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 81f2 	beq.w	8003f4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_UART_IRQHandler+0x14e>
 8003b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fb7d 	bl	8004280 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b90:	2b40      	cmp	r3, #64	@ 0x40
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d103      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x17a>
 8003baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d04f      	beq.n	8003c52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fa85 	bl	80040c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc2:	2b40      	cmp	r3, #64	@ 0x40
 8003bc4:	d141      	bne.n	8003c4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3314      	adds	r3, #20
 8003bcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003be0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003be4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3314      	adds	r3, #20
 8003bee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003bf2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1d9      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d013      	beq.n	8003c42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e18 <HAL_UART_IRQHandler+0x3e0>)
 8003c20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fa7c 	bl	8002124 <HAL_DMA_Abort_IT>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d016      	beq.n	8003c60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	e00e      	b.n	8003c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f994 	bl	8003f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	e00a      	b.n	8003c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f990 	bl	8003f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	e006      	b.n	8003c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f98c 	bl	8003f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c5e:	e175      	b.n	8003f4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c60:	bf00      	nop
    return;
 8003c62:	e173      	b.n	8003f4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	f040 814f 	bne.w	8003f0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8148 	beq.w	8003f0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8141 	beq.w	8003f0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003caa:	2b40      	cmp	r3, #64	@ 0x40
 8003cac:	f040 80b6 	bne.w	8003e1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8145 	beq.w	8003f50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	f080 813e 	bcs.w	8003f50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cda:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ce6:	f000 8088 	beq.w	8003dfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	330c      	adds	r3, #12
 8003cf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1d9      	bne.n	8003cea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3314      	adds	r3, #20
 8003d3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3314      	adds	r3, #20
 8003d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d66:	e841 2300 	strex	r3, r2, [r1]
 8003d6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e1      	bne.n	8003d36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3314      	adds	r3, #20
 8003d78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3314      	adds	r3, #20
 8003d92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003da4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e3      	bne.n	8003d72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dc2:	e853 3f00 	ldrex	r3, [r3]
 8003dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003dc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dca:	f023 0310 	bic.w	r3, r3, #16
 8003dce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	330c      	adds	r3, #12
 8003dd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ddc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003dde:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003de2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003dea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e3      	bne.n	8003db8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fe f925 	bl	8002044 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f8b7 	bl	8003f84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e16:	e09b      	b.n	8003f50 <HAL_UART_IRQHandler+0x518>
 8003e18:	08004189 	.word	0x08004189
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 808e 	beq.w	8003f54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8089 	beq.w	8003f54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e66:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e3      	bne.n	8003e42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3314      	adds	r3, #20
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	623b      	str	r3, [r7, #32]
   return(result);
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3314      	adds	r3, #20
 8003e9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ea6:	e841 2300 	strex	r3, r2, [r1]
 8003eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e3      	bne.n	8003e7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	e853 3f00 	ldrex	r3, [r3]
 8003ece:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0310 	bic.w	r3, r3, #16
 8003ed6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	330c      	adds	r3, #12
 8003ee0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ee4:	61fa      	str	r2, [r7, #28]
 8003ee6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	69b9      	ldr	r1, [r7, #24]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e3      	bne.n	8003ec0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003efe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f02:	4619      	mov	r1, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f83d 	bl	8003f84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f0a:	e023      	b.n	8003f54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d009      	beq.n	8003f2c <HAL_UART_IRQHandler+0x4f4>
 8003f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f943 	bl	80041b0 <UART_Transmit_IT>
    return;
 8003f2a:	e014      	b.n	8003f56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00e      	beq.n	8003f56 <HAL_UART_IRQHandler+0x51e>
 8003f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f983 	bl	8004250 <UART_EndTransmit_IT>
    return;
 8003f4a:	e004      	b.n	8003f56 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f4c:	bf00      	nop
 8003f4e:	e002      	b.n	8003f56 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f50:	bf00      	nop
 8003f52:	e000      	b.n	8003f56 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f54:	bf00      	nop
  }
}
 8003f56:	37e8      	adds	r7, #232	@ 0xe8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fac:	e03b      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb4:	d037      	beq.n	8004026 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb6:	f7fd fef7 	bl	8001da8 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	6a3a      	ldr	r2, [r7, #32]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d302      	bcc.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x30>
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e03a      	b.n	8004046 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d023      	beq.n	8004026 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b80      	cmp	r3, #128	@ 0x80
 8003fe2:	d020      	beq.n	8004026 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b40      	cmp	r3, #64	@ 0x40
 8003fe8:	d01d      	beq.n	8004026 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d116      	bne.n	8004026 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f857 	bl	80040c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2208      	movs	r2, #8
 8004018:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e00f      	b.n	8004046 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4013      	ands	r3, r2
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	429a      	cmp	r2, r3
 8004034:	bf0c      	ite	eq
 8004036:	2301      	moveq	r3, #1
 8004038:	2300      	movne	r3, #0
 800403a:	b2db      	uxtb	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	429a      	cmp	r2, r3
 8004042:	d0b4      	beq.n	8003fae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	4613      	mov	r3, r2
 800405a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	88fa      	ldrh	r2, [r7, #6]
 8004066:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	88fa      	ldrh	r2, [r7, #6]
 800406c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2222      	movs	r2, #34	@ 0x22
 8004078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d007      	beq.n	8004094 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004092:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0220 	orr.w	r2, r2, #32
 80040b2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b095      	sub	sp, #84	@ 0x54
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	330c      	adds	r3, #12
 80040d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	330c      	adds	r3, #12
 80040e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80040ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e5      	bne.n	80040ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3314      	adds	r3, #20
 8004104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	61fb      	str	r3, [r7, #28]
   return(result);
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3314      	adds	r3, #20
 800411c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800411e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004120:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e5      	bne.n	80040fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	2b01      	cmp	r3, #1
 8004138:	d119      	bne.n	800416e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	60bb      	str	r3, [r7, #8]
   return(result);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f023 0310 	bic.w	r3, r3, #16
 8004150:	647b      	str	r3, [r7, #68]	@ 0x44
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800415a:	61ba      	str	r2, [r7, #24]
 800415c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6979      	ldr	r1, [r7, #20]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	613b      	str	r3, [r7, #16]
   return(result);
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e5      	bne.n	800413a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800417c:	bf00      	nop
 800417e:	3754      	adds	r7, #84	@ 0x54
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004194:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7ff fee4 	bl	8003f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b21      	cmp	r3, #33	@ 0x21
 80041c2:	d13e      	bne.n	8004242 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041cc:	d114      	bne.n	80041f8 <UART_Transmit_IT+0x48>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d110      	bne.n	80041f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	1c9a      	adds	r2, r3, #2
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	621a      	str	r2, [r3, #32]
 80041f6:	e008      	b.n	800420a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	1c59      	adds	r1, r3, #1
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6211      	str	r1, [r2, #32]
 8004202:	781a      	ldrb	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29b      	uxth	r3, r3
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	4619      	mov	r1, r3
 8004218:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10f      	bne.n	800423e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800422c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800423c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	e000      	b.n	8004244 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004242:	2302      	movs	r3, #2
  }
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004266:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff fe73 	bl	8003f5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08c      	sub	sp, #48	@ 0x30
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b22      	cmp	r3, #34	@ 0x22
 8004292:	f040 80ae 	bne.w	80043f2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800429e:	d117      	bne.n	80042d0 <UART_Receive_IT+0x50>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d113      	bne.n	80042d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042be:	b29a      	uxth	r2, r3
 80042c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	1c9a      	adds	r2, r3, #2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80042ce:	e026      	b.n	800431e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80042d6:	2300      	movs	r3, #0
 80042d8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e2:	d007      	beq.n	80042f4 <UART_Receive_IT+0x74>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <UART_Receive_IT+0x82>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fe:	701a      	strb	r2, [r3, #0]
 8004300:	e008      	b.n	8004314 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800430e:	b2da      	uxtb	r2, r3
 8004310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004312:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29b      	uxth	r3, r3
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	4619      	mov	r1, r3
 800432c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800432e:	2b00      	cmp	r3, #0
 8004330:	d15d      	bne.n	80043ee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0220 	bic.w	r2, r2, #32
 8004340:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004350:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0201 	bic.w	r2, r2, #1
 8004360:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004374:	2b01      	cmp	r3, #1
 8004376:	d135      	bne.n	80043e4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	330c      	adds	r3, #12
 8004384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	613b      	str	r3, [r7, #16]
   return(result);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f023 0310 	bic.w	r3, r3, #16
 8004394:	627b      	str	r3, [r7, #36]	@ 0x24
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439e:	623a      	str	r2, [r7, #32]
 80043a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	69f9      	ldr	r1, [r7, #28]
 80043a4:	6a3a      	ldr	r2, [r7, #32]
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e5      	bne.n	800437e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d10a      	bne.n	80043d6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043da:	4619      	mov	r1, r3
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff fdd1 	bl	8003f84 <HAL_UARTEx_RxEventCallback>
 80043e2:	e002      	b.n	80043ea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7fd fa91 	bl	800190c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e002      	b.n	80043f4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e000      	b.n	80043f4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043f2:	2302      	movs	r3, #2
  }
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3730      	adds	r7, #48	@ 0x30
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004400:	b0c0      	sub	sp, #256	@ 0x100
 8004402:	af00      	add	r7, sp, #0
 8004404:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004418:	68d9      	ldr	r1, [r3, #12]
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	ea40 0301 	orr.w	r3, r0, r1
 8004424:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	431a      	orrs	r2, r3
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	431a      	orrs	r2, r3
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004454:	f021 010c 	bic.w	r1, r1, #12
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004462:	430b      	orrs	r3, r1
 8004464:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004476:	6999      	ldr	r1, [r3, #24]
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	ea40 0301 	orr.w	r3, r0, r1
 8004482:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4b8f      	ldr	r3, [pc, #572]	@ (80046c8 <UART_SetConfig+0x2cc>)
 800448c:	429a      	cmp	r2, r3
 800448e:	d005      	beq.n	800449c <UART_SetConfig+0xa0>
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b8d      	ldr	r3, [pc, #564]	@ (80046cc <UART_SetConfig+0x2d0>)
 8004498:	429a      	cmp	r2, r3
 800449a:	d104      	bne.n	80044a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800449c:	f7fe f918 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 80044a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80044a4:	e003      	b.n	80044ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044a6:	f7fe f8ff 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 80044aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044b8:	f040 810c 	bne.w	80046d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044c0:	2200      	movs	r2, #0
 80044c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044ce:	4622      	mov	r2, r4
 80044d0:	462b      	mov	r3, r5
 80044d2:	1891      	adds	r1, r2, r2
 80044d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044d6:	415b      	adcs	r3, r3
 80044d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044de:	4621      	mov	r1, r4
 80044e0:	eb12 0801 	adds.w	r8, r2, r1
 80044e4:	4629      	mov	r1, r5
 80044e6:	eb43 0901 	adc.w	r9, r3, r1
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044fe:	4690      	mov	r8, r2
 8004500:	4699      	mov	r9, r3
 8004502:	4623      	mov	r3, r4
 8004504:	eb18 0303 	adds.w	r3, r8, r3
 8004508:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800450c:	462b      	mov	r3, r5
 800450e:	eb49 0303 	adc.w	r3, r9, r3
 8004512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004522:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004526:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800452a:	460b      	mov	r3, r1
 800452c:	18db      	adds	r3, r3, r3
 800452e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004530:	4613      	mov	r3, r2
 8004532:	eb42 0303 	adc.w	r3, r2, r3
 8004536:	657b      	str	r3, [r7, #84]	@ 0x54
 8004538:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800453c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004540:	f7fb fe68 	bl	8000214 <__aeabi_uldivmod>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4b61      	ldr	r3, [pc, #388]	@ (80046d0 <UART_SetConfig+0x2d4>)
 800454a:	fba3 2302 	umull	r2, r3, r3, r2
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	011c      	lsls	r4, r3, #4
 8004552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004556:	2200      	movs	r2, #0
 8004558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800455c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004560:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004564:	4642      	mov	r2, r8
 8004566:	464b      	mov	r3, r9
 8004568:	1891      	adds	r1, r2, r2
 800456a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800456c:	415b      	adcs	r3, r3
 800456e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004570:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004574:	4641      	mov	r1, r8
 8004576:	eb12 0a01 	adds.w	sl, r2, r1
 800457a:	4649      	mov	r1, r9
 800457c:	eb43 0b01 	adc.w	fp, r3, r1
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800458c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004590:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004594:	4692      	mov	sl, r2
 8004596:	469b      	mov	fp, r3
 8004598:	4643      	mov	r3, r8
 800459a:	eb1a 0303 	adds.w	r3, sl, r3
 800459e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045a2:	464b      	mov	r3, r9
 80045a4:	eb4b 0303 	adc.w	r3, fp, r3
 80045a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045c0:	460b      	mov	r3, r1
 80045c2:	18db      	adds	r3, r3, r3
 80045c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80045c6:	4613      	mov	r3, r2
 80045c8:	eb42 0303 	adc.w	r3, r2, r3
 80045cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045d6:	f7fb fe1d 	bl	8000214 <__aeabi_uldivmod>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4611      	mov	r1, r2
 80045e0:	4b3b      	ldr	r3, [pc, #236]	@ (80046d0 <UART_SetConfig+0x2d4>)
 80045e2:	fba3 2301 	umull	r2, r3, r3, r1
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	2264      	movs	r2, #100	@ 0x64
 80045ea:	fb02 f303 	mul.w	r3, r2, r3
 80045ee:	1acb      	subs	r3, r1, r3
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045f6:	4b36      	ldr	r3, [pc, #216]	@ (80046d0 <UART_SetConfig+0x2d4>)
 80045f8:	fba3 2302 	umull	r2, r3, r3, r2
 80045fc:	095b      	lsrs	r3, r3, #5
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004604:	441c      	add	r4, r3
 8004606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800460a:	2200      	movs	r2, #0
 800460c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004610:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004614:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004618:	4642      	mov	r2, r8
 800461a:	464b      	mov	r3, r9
 800461c:	1891      	adds	r1, r2, r2
 800461e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004620:	415b      	adcs	r3, r3
 8004622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004624:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004628:	4641      	mov	r1, r8
 800462a:	1851      	adds	r1, r2, r1
 800462c:	6339      	str	r1, [r7, #48]	@ 0x30
 800462e:	4649      	mov	r1, r9
 8004630:	414b      	adcs	r3, r1
 8004632:	637b      	str	r3, [r7, #52]	@ 0x34
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004640:	4659      	mov	r1, fp
 8004642:	00cb      	lsls	r3, r1, #3
 8004644:	4651      	mov	r1, sl
 8004646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800464a:	4651      	mov	r1, sl
 800464c:	00ca      	lsls	r2, r1, #3
 800464e:	4610      	mov	r0, r2
 8004650:	4619      	mov	r1, r3
 8004652:	4603      	mov	r3, r0
 8004654:	4642      	mov	r2, r8
 8004656:	189b      	adds	r3, r3, r2
 8004658:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800465c:	464b      	mov	r3, r9
 800465e:	460a      	mov	r2, r1
 8004660:	eb42 0303 	adc.w	r3, r2, r3
 8004664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004674:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004678:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800467c:	460b      	mov	r3, r1
 800467e:	18db      	adds	r3, r3, r3
 8004680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004682:	4613      	mov	r3, r2
 8004684:	eb42 0303 	adc.w	r3, r2, r3
 8004688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800468a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800468e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004692:	f7fb fdbf 	bl	8000214 <__aeabi_uldivmod>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <UART_SetConfig+0x2d4>)
 800469c:	fba3 1302 	umull	r1, r3, r3, r2
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	2164      	movs	r1, #100	@ 0x64
 80046a4:	fb01 f303 	mul.w	r3, r1, r3
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	3332      	adds	r3, #50	@ 0x32
 80046ae:	4a08      	ldr	r2, [pc, #32]	@ (80046d0 <UART_SetConfig+0x2d4>)
 80046b0:	fba2 2303 	umull	r2, r3, r2, r3
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	f003 0207 	and.w	r2, r3, #7
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4422      	add	r2, r4
 80046c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046c4:	e106      	b.n	80048d4 <UART_SetConfig+0x4d8>
 80046c6:	bf00      	nop
 80046c8:	40011000 	.word	0x40011000
 80046cc:	40011400 	.word	0x40011400
 80046d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046d8:	2200      	movs	r2, #0
 80046da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046e6:	4642      	mov	r2, r8
 80046e8:	464b      	mov	r3, r9
 80046ea:	1891      	adds	r1, r2, r2
 80046ec:	6239      	str	r1, [r7, #32]
 80046ee:	415b      	adcs	r3, r3
 80046f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046f6:	4641      	mov	r1, r8
 80046f8:	1854      	adds	r4, r2, r1
 80046fa:	4649      	mov	r1, r9
 80046fc:	eb43 0501 	adc.w	r5, r3, r1
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	00eb      	lsls	r3, r5, #3
 800470a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800470e:	00e2      	lsls	r2, r4, #3
 8004710:	4614      	mov	r4, r2
 8004712:	461d      	mov	r5, r3
 8004714:	4643      	mov	r3, r8
 8004716:	18e3      	adds	r3, r4, r3
 8004718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800471c:	464b      	mov	r3, r9
 800471e:	eb45 0303 	adc.w	r3, r5, r3
 8004722:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004732:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004742:	4629      	mov	r1, r5
 8004744:	008b      	lsls	r3, r1, #2
 8004746:	4621      	mov	r1, r4
 8004748:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800474c:	4621      	mov	r1, r4
 800474e:	008a      	lsls	r2, r1, #2
 8004750:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004754:	f7fb fd5e 	bl	8000214 <__aeabi_uldivmod>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4b60      	ldr	r3, [pc, #384]	@ (80048e0 <UART_SetConfig+0x4e4>)
 800475e:	fba3 2302 	umull	r2, r3, r3, r2
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	011c      	lsls	r4, r3, #4
 8004766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800476a:	2200      	movs	r2, #0
 800476c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004770:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004774:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004778:	4642      	mov	r2, r8
 800477a:	464b      	mov	r3, r9
 800477c:	1891      	adds	r1, r2, r2
 800477e:	61b9      	str	r1, [r7, #24]
 8004780:	415b      	adcs	r3, r3
 8004782:	61fb      	str	r3, [r7, #28]
 8004784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004788:	4641      	mov	r1, r8
 800478a:	1851      	adds	r1, r2, r1
 800478c:	6139      	str	r1, [r7, #16]
 800478e:	4649      	mov	r1, r9
 8004790:	414b      	adcs	r3, r1
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047a0:	4659      	mov	r1, fp
 80047a2:	00cb      	lsls	r3, r1, #3
 80047a4:	4651      	mov	r1, sl
 80047a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047aa:	4651      	mov	r1, sl
 80047ac:	00ca      	lsls	r2, r1, #3
 80047ae:	4610      	mov	r0, r2
 80047b0:	4619      	mov	r1, r3
 80047b2:	4603      	mov	r3, r0
 80047b4:	4642      	mov	r2, r8
 80047b6:	189b      	adds	r3, r3, r2
 80047b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047bc:	464b      	mov	r3, r9
 80047be:	460a      	mov	r2, r1
 80047c0:	eb42 0303 	adc.w	r3, r2, r3
 80047c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047e0:	4649      	mov	r1, r9
 80047e2:	008b      	lsls	r3, r1, #2
 80047e4:	4641      	mov	r1, r8
 80047e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ea:	4641      	mov	r1, r8
 80047ec:	008a      	lsls	r2, r1, #2
 80047ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047f2:	f7fb fd0f 	bl	8000214 <__aeabi_uldivmod>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	4b38      	ldr	r3, [pc, #224]	@ (80048e0 <UART_SetConfig+0x4e4>)
 80047fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	2264      	movs	r2, #100	@ 0x64
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	1acb      	subs	r3, r1, r3
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	3332      	adds	r3, #50	@ 0x32
 8004810:	4a33      	ldr	r2, [pc, #204]	@ (80048e0 <UART_SetConfig+0x4e4>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800481c:	441c      	add	r4, r3
 800481e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004822:	2200      	movs	r2, #0
 8004824:	673b      	str	r3, [r7, #112]	@ 0x70
 8004826:	677a      	str	r2, [r7, #116]	@ 0x74
 8004828:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800482c:	4642      	mov	r2, r8
 800482e:	464b      	mov	r3, r9
 8004830:	1891      	adds	r1, r2, r2
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	415b      	adcs	r3, r3
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800483c:	4641      	mov	r1, r8
 800483e:	1851      	adds	r1, r2, r1
 8004840:	6039      	str	r1, [r7, #0]
 8004842:	4649      	mov	r1, r9
 8004844:	414b      	adcs	r3, r1
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004854:	4659      	mov	r1, fp
 8004856:	00cb      	lsls	r3, r1, #3
 8004858:	4651      	mov	r1, sl
 800485a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800485e:	4651      	mov	r1, sl
 8004860:	00ca      	lsls	r2, r1, #3
 8004862:	4610      	mov	r0, r2
 8004864:	4619      	mov	r1, r3
 8004866:	4603      	mov	r3, r0
 8004868:	4642      	mov	r2, r8
 800486a:	189b      	adds	r3, r3, r2
 800486c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800486e:	464b      	mov	r3, r9
 8004870:	460a      	mov	r2, r1
 8004872:	eb42 0303 	adc.w	r3, r2, r3
 8004876:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	663b      	str	r3, [r7, #96]	@ 0x60
 8004882:	667a      	str	r2, [r7, #100]	@ 0x64
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004890:	4649      	mov	r1, r9
 8004892:	008b      	lsls	r3, r1, #2
 8004894:	4641      	mov	r1, r8
 8004896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800489a:	4641      	mov	r1, r8
 800489c:	008a      	lsls	r2, r1, #2
 800489e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048a2:	f7fb fcb7 	bl	8000214 <__aeabi_uldivmod>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4b0d      	ldr	r3, [pc, #52]	@ (80048e0 <UART_SetConfig+0x4e4>)
 80048ac:	fba3 1302 	umull	r1, r3, r3, r2
 80048b0:	095b      	lsrs	r3, r3, #5
 80048b2:	2164      	movs	r1, #100	@ 0x64
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	3332      	adds	r3, #50	@ 0x32
 80048be:	4a08      	ldr	r2, [pc, #32]	@ (80048e0 <UART_SetConfig+0x4e4>)
 80048c0:	fba2 2303 	umull	r2, r3, r2, r3
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	f003 020f 	and.w	r2, r3, #15
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4422      	add	r2, r4
 80048d2:	609a      	str	r2, [r3, #8]
}
 80048d4:	bf00      	nop
 80048d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048da:	46bd      	mov	sp, r7
 80048dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e0:	51eb851f 	.word	0x51eb851f

080048e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80048e8:	4904      	ldr	r1, [pc, #16]	@ (80048fc <MX_FATFS_Init+0x18>)
 80048ea:	4805      	ldr	r0, [pc, #20]	@ (8004900 <MX_FATFS_Init+0x1c>)
 80048ec:	f002 fea4 	bl	8007638 <FATFS_LinkDriver>
 80048f0:	4603      	mov	r3, r0
 80048f2:	461a      	mov	r2, r3
 80048f4:	4b03      	ldr	r3, [pc, #12]	@ (8004904 <MX_FATFS_Init+0x20>)
 80048f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80048f8:	bf00      	nop
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20008958 	.word	0x20008958
 8004900:	20000014 	.word	0x20000014
 8004904:	20008954 	.word	0x20008954

08004908 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800490c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800490e:	4618      	mov	r0, r3
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//Stat = STA_NOINIT;
	//return Stat;
	SD_disk_initialize (pdrv);
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	4618      	mov	r0, r3
 8004926:	f7fb ffa1 	bl	800086c <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800492a:	bf00      	nop
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_status (pdrv);
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	4618      	mov	r0, r3
 8004942:	f7fc f879 	bl	8000a38 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8004946:	bf00      	nop
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	607a      	str	r2, [r7, #4]
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	4603      	mov	r3, r0
 800495e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read ( pdrv, buff, sector, count);
 8004960:	7bf8      	ldrb	r0, [r7, #15]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	f7fc f87c 	bl	8000a64 <SD_disk_read>
  /* USER CODE END READ */
}
 800496c:	bf00      	nop
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	4603      	mov	r3, r0
 8004984:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	SD_disk_write (pdrv, buff, sector,count);
 8004986:	7bf8      	ldrb	r0, [r7, #15]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	f7fc f8d3 	bl	8000b38 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8004992:	bf00      	nop
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	603a      	str	r2, [r7, #0]
 80049a6:	71fb      	strb	r3, [r7, #7]
 80049a8:	460b      	mov	r3, r1
 80049aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl (pdrv, cmd, buff);
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	79b9      	ldrb	r1, [r7, #6]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fc f944 	bl	8000c40 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 80049b8:	bf00      	nop
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	4a08      	ldr	r2, [pc, #32]	@ (80049f4 <disk_status+0x30>)
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	79fa      	ldrb	r2, [r7, #7]
 80049dc:	4905      	ldr	r1, [pc, #20]	@ (80049f4 <disk_status+0x30>)
 80049de:	440a      	add	r2, r1
 80049e0:	7a12      	ldrb	r2, [r2, #8]
 80049e2:	4610      	mov	r0, r2
 80049e4:	4798      	blx	r3
 80049e6:	4603      	mov	r3, r0
 80049e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20008b84 	.word	0x20008b84

080049f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	4a0e      	ldr	r2, [pc, #56]	@ (8004a44 <disk_initialize+0x4c>)
 8004a0a:	5cd3      	ldrb	r3, [r2, r3]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d114      	bne.n	8004a3a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	4a0c      	ldr	r2, [pc, #48]	@ (8004a44 <disk_initialize+0x4c>)
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	79fa      	ldrb	r2, [r7, #7]
 8004a1e:	4909      	ldr	r1, [pc, #36]	@ (8004a44 <disk_initialize+0x4c>)
 8004a20:	440a      	add	r2, r1
 8004a22:	7a12      	ldrb	r2, [r2, #8]
 8004a24:	4610      	mov	r0, r2
 8004a26:	4798      	blx	r3
 8004a28:	4603      	mov	r3, r0
 8004a2a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d103      	bne.n	8004a3a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	4a03      	ldr	r2, [pc, #12]	@ (8004a44 <disk_initialize+0x4c>)
 8004a36:	2101      	movs	r1, #1
 8004a38:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20008b84 	.word	0x20008b84

08004a48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004a48:	b590      	push	{r4, r7, lr}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	4603      	mov	r3, r0
 8004a56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a84 <disk_read+0x3c>)
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	689c      	ldr	r4, [r3, #8]
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	4a07      	ldr	r2, [pc, #28]	@ (8004a84 <disk_read+0x3c>)
 8004a68:	4413      	add	r3, r2
 8004a6a:	7a18      	ldrb	r0, [r3, #8]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	47a0      	blx	r4
 8004a74:	4603      	mov	r3, r0
 8004a76:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd90      	pop	{r4, r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20008b84 	.word	0x20008b84

08004a88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	4603      	mov	r3, r0
 8004a96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac4 <disk_write+0x3c>)
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	68dc      	ldr	r4, [r3, #12]
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	4a07      	ldr	r2, [pc, #28]	@ (8004ac4 <disk_write+0x3c>)
 8004aa8:	4413      	add	r3, r2
 8004aaa:	7a18      	ldrb	r0, [r3, #8]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	47a0      	blx	r4
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd90      	pop	{r4, r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20008b84 	.word	0x20008b84

08004ac8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	603a      	str	r2, [r7, #0]
 8004ad2:	71fb      	strb	r3, [r7, #7]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	4a09      	ldr	r2, [pc, #36]	@ (8004b00 <disk_ioctl+0x38>)
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	79fa      	ldrb	r2, [r7, #7]
 8004ae6:	4906      	ldr	r1, [pc, #24]	@ (8004b00 <disk_ioctl+0x38>)
 8004ae8:	440a      	add	r2, r1
 8004aea:	7a10      	ldrb	r0, [r2, #8]
 8004aec:	79b9      	ldrb	r1, [r7, #6]
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	4798      	blx	r3
 8004af2:	4603      	mov	r3, r0
 8004af4:	73fb      	strb	r3, [r7, #15]
  return res;
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20008b84 	.word	0x20008b84

08004b04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004b14:	89fb      	ldrh	r3, [r7, #14]
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	b21a      	sxth	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	b21b      	sxth	r3, r3
 8004b20:	4313      	orrs	r3, r2
 8004b22:	b21b      	sxth	r3, r3
 8004b24:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004b26:	89fb      	ldrh	r3, [r7, #14]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3303      	adds	r3, #3
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	3202      	adds	r2, #2
 8004b4c:	7812      	ldrb	r2, [r2, #0]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	3201      	adds	r2, #1
 8004b5a:	7812      	ldrb	r2, [r2, #0]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	7812      	ldrb	r2, [r2, #0]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
	return rv;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	460b      	mov	r3, r1
 8004b84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	887a      	ldrh	r2, [r7, #2]
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	887b      	ldrh	r3, [r7, #2]
 8004b94:	0a1b      	lsrs	r3, r3, #8
 8004b96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	887a      	ldrh	r2, [r7, #2]
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	701a      	strb	r2, [r3, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	0a1b      	lsrs	r3, r3, #8
 8004bca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	607a      	str	r2, [r7, #4]
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	0a1b      	lsrs	r3, r3, #8
 8004bdc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	0a1b      	lsrs	r3, r3, #8
 8004bee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	607a      	str	r2, [r7, #4]
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	701a      	strb	r2, [r3, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00d      	beq.n	8004c3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	1c53      	adds	r3, r2, #1
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	1c59      	adds	r1, r3, #1
 8004c2c:	6179      	str	r1, [r7, #20]
 8004c2e:	7812      	ldrb	r2, [r2, #0]
 8004c30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	607b      	str	r3, [r7, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f1      	bne.n	8004c22 <mem_cpy+0x1a>
	}
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004c4a:	b480      	push	{r7}
 8004c4c:	b087      	sub	sp, #28
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	617a      	str	r2, [r7, #20]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	607b      	str	r3, [r7, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1f3      	bne.n	8004c5a <mem_set+0x10>
}
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004c80:	b480      	push	{r7}
 8004c82:	b089      	sub	sp, #36	@ 0x24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	61fb      	str	r3, [r7, #28]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	61fa      	str	r2, [r7, #28]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	61ba      	str	r2, [r7, #24]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	1acb      	subs	r3, r1, r3
 8004cac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	607b      	str	r3, [r7, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <mem_cmp+0x40>
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0eb      	beq.n	8004c98 <mem_cmp+0x18>

	return r;
 8004cc0:	697b      	ldr	r3, [r7, #20]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3724      	adds	r7, #36	@ 0x24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004cd8:	e002      	b.n	8004ce0 <chk_chr+0x12>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <chk_chr+0x26>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d1f2      	bne.n	8004cda <chk_chr+0xc>
	return *str;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e029      	b.n	8004d6c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004d18:	4a27      	ldr	r2, [pc, #156]	@ (8004db8 <chk_lock+0xb4>)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	4413      	add	r3, r2
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01d      	beq.n	8004d62 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004d26:	4a24      	ldr	r2, [pc, #144]	@ (8004db8 <chk_lock+0xb4>)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	4413      	add	r3, r2
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d116      	bne.n	8004d66 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004d38:	4a1f      	ldr	r2, [pc, #124]	@ (8004db8 <chk_lock+0xb4>)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	4413      	add	r3, r2
 8004d40:	3304      	adds	r3, #4
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d10c      	bne.n	8004d66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004db8 <chk_lock+0xb4>)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	4413      	add	r3, r2
 8004d54:	3308      	adds	r3, #8
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d102      	bne.n	8004d66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004d60:	e007      	b.n	8004d72 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004d62:	2301      	movs	r3, #1
 8004d64:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d9d2      	bls.n	8004d18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d109      	bne.n	8004d8c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d102      	bne.n	8004d84 <chk_lock+0x80>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d101      	bne.n	8004d88 <chk_lock+0x84>
 8004d84:	2300      	movs	r3, #0
 8004d86:	e010      	b.n	8004daa <chk_lock+0xa6>
 8004d88:	2312      	movs	r3, #18
 8004d8a:	e00e      	b.n	8004daa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d108      	bne.n	8004da4 <chk_lock+0xa0>
 8004d92:	4a09      	ldr	r2, [pc, #36]	@ (8004db8 <chk_lock+0xb4>)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	4413      	add	r3, r2
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004da2:	d101      	bne.n	8004da8 <chk_lock+0xa4>
 8004da4:	2310      	movs	r3, #16
 8004da6:	e000      	b.n	8004daa <chk_lock+0xa6>
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20008964 	.word	0x20008964

08004dbc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	e002      	b.n	8004dce <enq_lock+0x12>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	607b      	str	r3, [r7, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d806      	bhi.n	8004de2 <enq_lock+0x26>
 8004dd4:	4a09      	ldr	r2, [pc, #36]	@ (8004dfc <enq_lock+0x40>)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	4413      	add	r3, r2
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f2      	bne.n	8004dc8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	bf14      	ite	ne
 8004de8:	2301      	movne	r3, #1
 8004dea:	2300      	moveq	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20008964 	.word	0x20008964

08004e00 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	e01f      	b.n	8004e50 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004e10:	4a41      	ldr	r2, [pc, #260]	@ (8004f18 <inc_lock+0x118>)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	4413      	add	r3, r2
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d113      	bne.n	8004e4a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004e22:	4a3d      	ldr	r2, [pc, #244]	@ (8004f18 <inc_lock+0x118>)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	4413      	add	r3, r2
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d109      	bne.n	8004e4a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004e36:	4a38      	ldr	r2, [pc, #224]	@ (8004f18 <inc_lock+0x118>)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	4413      	add	r3, r2
 8004e3e:	3308      	adds	r3, #8
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d006      	beq.n	8004e58 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d9dc      	bls.n	8004e10 <inc_lock+0x10>
 8004e56:	e000      	b.n	8004e5a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004e58:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d132      	bne.n	8004ec6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e002      	b.n	8004e6c <inc_lock+0x6c>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d806      	bhi.n	8004e80 <inc_lock+0x80>
 8004e72:	4a29      	ldr	r2, [pc, #164]	@ (8004f18 <inc_lock+0x118>)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	4413      	add	r3, r2
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1f2      	bne.n	8004e66 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d101      	bne.n	8004e8a <inc_lock+0x8a>
 8004e86:	2300      	movs	r3, #0
 8004e88:	e040      	b.n	8004f0c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4922      	ldr	r1, [pc, #136]	@ (8004f18 <inc_lock+0x118>)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	440b      	add	r3, r1
 8004e96:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	491e      	ldr	r1, [pc, #120]	@ (8004f18 <inc_lock+0x118>)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	440b      	add	r3, r1
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	491a      	ldr	r1, [pc, #104]	@ (8004f18 <inc_lock+0x118>)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	440b      	add	r3, r1
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004eb8:	4a17      	ldr	r2, [pc, #92]	@ (8004f18 <inc_lock+0x118>)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	4413      	add	r3, r2
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <inc_lock+0xe0>
 8004ecc:	4a12      	ldr	r2, [pc, #72]	@ (8004f18 <inc_lock+0x118>)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	4413      	add	r3, r2
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <inc_lock+0xe0>
 8004edc:	2300      	movs	r3, #0
 8004ede:	e015      	b.n	8004f0c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d108      	bne.n	8004ef8 <inc_lock+0xf8>
 8004ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8004f18 <inc_lock+0x118>)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	4413      	add	r3, r2
 8004eee:	330c      	adds	r3, #12
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	e001      	b.n	8004efc <inc_lock+0xfc>
 8004ef8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004efc:	4906      	ldr	r1, [pc, #24]	@ (8004f18 <inc_lock+0x118>)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	440b      	add	r3, r1
 8004f04:	330c      	adds	r3, #12
 8004f06:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3301      	adds	r3, #1
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	20008964 	.word	0x20008964

08004f1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d825      	bhi.n	8004f7c <dec_lock+0x60>
		n = Files[i].ctr;
 8004f30:	4a17      	ldr	r2, [pc, #92]	@ (8004f90 <dec_lock+0x74>)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	4413      	add	r3, r2
 8004f38:	330c      	adds	r3, #12
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004f3e:	89fb      	ldrh	r3, [r7, #14]
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f44:	d101      	bne.n	8004f4a <dec_lock+0x2e>
 8004f46:	2300      	movs	r3, #0
 8004f48:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004f4a:	89fb      	ldrh	r3, [r7, #14]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <dec_lock+0x3a>
 8004f50:	89fb      	ldrh	r3, [r7, #14]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004f56:	4a0e      	ldr	r2, [pc, #56]	@ (8004f90 <dec_lock+0x74>)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	4413      	add	r3, r2
 8004f5e:	330c      	adds	r3, #12
 8004f60:	89fa      	ldrh	r2, [r7, #14]
 8004f62:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004f64:	89fb      	ldrh	r3, [r7, #14]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d105      	bne.n	8004f76 <dec_lock+0x5a>
 8004f6a:	4a09      	ldr	r2, [pc, #36]	@ (8004f90 <dec_lock+0x74>)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	4413      	add	r3, r2
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	737b      	strb	r3, [r7, #13]
 8004f7a:	e001      	b.n	8004f80 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004f80:	7b7b      	ldrb	r3, [r7, #13]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	20008964 	.word	0x20008964

08004f94 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e010      	b.n	8004fc4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8004fd8 <clear_lock+0x44>)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	4413      	add	r3, r2
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d105      	bne.n	8004fbe <clear_lock+0x2a>
 8004fb2:	4a09      	ldr	r2, [pc, #36]	@ (8004fd8 <clear_lock+0x44>)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	4413      	add	r3, r2
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d9eb      	bls.n	8004fa2 <clear_lock+0xe>
	}
}
 8004fca:	bf00      	nop
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	20008964 	.word	0x20008964

08004fdc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	78db      	ldrb	r3, [r3, #3]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d034      	beq.n	800505a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	7858      	ldrb	r0, [r3, #1]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005000:	2301      	movs	r3, #1
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	f7ff fd40 	bl	8004a88 <disk_write>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <sync_window+0x38>
			res = FR_DISK_ERR;
 800500e:	2301      	movs	r3, #1
 8005010:	73fb      	strb	r3, [r7, #15]
 8005012:	e022      	b.n	800505a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	1ad2      	subs	r2, r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	429a      	cmp	r2, r3
 8005028:	d217      	bcs.n	800505a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	789b      	ldrb	r3, [r3, #2]
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	e010      	b.n	8005054 <sync_window+0x78>
					wsect += fs->fsize;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4413      	add	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	7858      	ldrb	r0, [r3, #1]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005046:	2301      	movs	r3, #1
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	f7ff fd1d 	bl	8004a88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	3b01      	subs	r3, #1
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d8eb      	bhi.n	8005032 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800505a:	7bfb      	ldrb	r3, [r7, #15]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d01b      	beq.n	80050b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff ffad 	bl	8004fdc <sync_window>
 8005082:	4603      	mov	r3, r0
 8005084:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d113      	bne.n	80050b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	7858      	ldrb	r0, [r3, #1]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005096:	2301      	movs	r3, #1
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	f7ff fcd5 	bl	8004a48 <disk_read>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
 80050a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff ff87 	bl	8004fdc <sync_window>
 80050ce:	4603      	mov	r3, r0
 80050d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d159      	bne.n	800518c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d149      	bne.n	8005174 <sync_fs+0xb4>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	791b      	ldrb	r3, [r3, #4]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d145      	bne.n	8005174 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	899b      	ldrh	r3, [r3, #12]
 80050f2:	461a      	mov	r2, r3
 80050f4:	2100      	movs	r1, #0
 80050f6:	f7ff fda8 	bl	8004c4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3338      	adds	r3, #56	@ 0x38
 80050fe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005102:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff fd37 	bl	8004b7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3338      	adds	r3, #56	@ 0x38
 8005110:	4921      	ldr	r1, [pc, #132]	@ (8005198 <sync_fs+0xd8>)
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fd4c 	bl	8004bb0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3338      	adds	r3, #56	@ 0x38
 800511c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005120:	491e      	ldr	r1, [pc, #120]	@ (800519c <sync_fs+0xdc>)
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff fd44 	bl	8004bb0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3338      	adds	r3, #56	@ 0x38
 800512c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	4619      	mov	r1, r3
 8005136:	4610      	mov	r0, r2
 8005138:	f7ff fd3a 	bl	8004bb0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3338      	adds	r3, #56	@ 0x38
 8005140:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f7ff fd30 	bl	8004bb0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	7858      	ldrb	r0, [r3, #1]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005168:	2301      	movs	r3, #1
 800516a:	f7ff fc8d 	bl	8004a88 <disk_write>
			fs->fsi_flag = 0;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	785b      	ldrb	r3, [r3, #1]
 8005178:	2200      	movs	r2, #0
 800517a:	2100      	movs	r1, #0
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff fca3 	bl	8004ac8 <disk_ioctl>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <sync_fs+0xcc>
 8005188:	2301      	movs	r3, #1
 800518a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800518c:	7bfb      	ldrb	r3, [r7, #15]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	41615252 	.word	0x41615252
 800519c:	61417272 	.word	0x61417272

080051a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	3b02      	subs	r3, #2
 80051ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	3b02      	subs	r3, #2
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d301      	bcc.n	80051c0 <clust2sect+0x20>
 80051bc:	2300      	movs	r3, #0
 80051be:	e008      	b.n	80051d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	895b      	ldrh	r3, [r3, #10]
 80051c4:	461a      	mov	r2, r3
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	fb03 f202 	mul.w	r2, r3, r2
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d0:	4413      	add	r3, r2
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b086      	sub	sp, #24
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d904      	bls.n	80051fe <get_fat+0x20>
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <get_fat+0x26>
		val = 1;	/* Internal error */
 80051fe:	2301      	movs	r3, #1
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	e0ba      	b.n	800537a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005204:	f04f 33ff 	mov.w	r3, #4294967295
 8005208:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b03      	cmp	r3, #3
 8005210:	f000 8082 	beq.w	8005318 <get_fat+0x13a>
 8005214:	2b03      	cmp	r3, #3
 8005216:	f300 80a6 	bgt.w	8005366 <get_fat+0x188>
 800521a:	2b01      	cmp	r3, #1
 800521c:	d002      	beq.n	8005224 <get_fat+0x46>
 800521e:	2b02      	cmp	r3, #2
 8005220:	d055      	beq.n	80052ce <get_fat+0xf0>
 8005222:	e0a0      	b.n	8005366 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	899b      	ldrh	r3, [r3, #12]
 800523a:	4619      	mov	r1, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005242:	4413      	add	r3, r2
 8005244:	4619      	mov	r1, r3
 8005246:	6938      	ldr	r0, [r7, #16]
 8005248:	f7ff ff0c 	bl	8005064 <move_window>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	f040 808c 	bne.w	800536c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	60fa      	str	r2, [r7, #12]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	8992      	ldrh	r2, [r2, #12]
 800525e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005262:	fb01 f202 	mul.w	r2, r1, r2
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4413      	add	r3, r2
 800526c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005270:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	899b      	ldrh	r3, [r3, #12]
 800527a:	4619      	mov	r1, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005282:	4413      	add	r3, r2
 8005284:	4619      	mov	r1, r3
 8005286:	6938      	ldr	r0, [r7, #16]
 8005288:	f7ff feec 	bl	8005064 <move_window>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d16e      	bne.n	8005370 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	899b      	ldrh	r3, [r3, #12]
 8005296:	461a      	mov	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	fbb3 f1f2 	udiv	r1, r3, r2
 800529e:	fb01 f202 	mul.w	r2, r1, r2
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <get_fat+0xe6>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	091b      	lsrs	r3, r3, #4
 80052c2:	e002      	b.n	80052ca <get_fat+0xec>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ca:	617b      	str	r3, [r7, #20]
			break;
 80052cc:	e055      	b.n	800537a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	899b      	ldrh	r3, [r3, #12]
 80052d6:	085b      	lsrs	r3, r3, #1
 80052d8:	b29b      	uxth	r3, r3
 80052da:	4619      	mov	r1, r3
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	fbb3 f3f1 	udiv	r3, r3, r1
 80052e2:	4413      	add	r3, r2
 80052e4:	4619      	mov	r1, r3
 80052e6:	6938      	ldr	r0, [r7, #16]
 80052e8:	f7ff febc 	bl	8005064 <move_window>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d140      	bne.n	8005374 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	8992      	ldrh	r2, [r2, #12]
 8005300:	fbb3 f0f2 	udiv	r0, r3, r2
 8005304:	fb00 f202 	mul.w	r2, r0, r2
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	440b      	add	r3, r1
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff fbf9 	bl	8004b04 <ld_word>
 8005312:	4603      	mov	r3, r0
 8005314:	617b      	str	r3, [r7, #20]
			break;
 8005316:	e030      	b.n	800537a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	899b      	ldrh	r3, [r3, #12]
 8005320:	089b      	lsrs	r3, r3, #2
 8005322:	b29b      	uxth	r3, r3
 8005324:	4619      	mov	r1, r3
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	fbb3 f3f1 	udiv	r3, r3, r1
 800532c:	4413      	add	r3, r2
 800532e:	4619      	mov	r1, r3
 8005330:	6938      	ldr	r0, [r7, #16]
 8005332:	f7ff fe97 	bl	8005064 <move_window>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d11d      	bne.n	8005378 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	8992      	ldrh	r2, [r2, #12]
 800534a:	fbb3 f0f2 	udiv	r0, r3, r2
 800534e:	fb00 f202 	mul.w	r2, r0, r2
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	440b      	add	r3, r1
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fbec 	bl	8004b34 <ld_dword>
 800535c:	4603      	mov	r3, r0
 800535e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005362:	617b      	str	r3, [r7, #20]
			break;
 8005364:	e009      	b.n	800537a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005366:	2301      	movs	r3, #1
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	e006      	b.n	800537a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800536c:	bf00      	nop
 800536e:	e004      	b.n	800537a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005370:	bf00      	nop
 8005372:	e002      	b.n	800537a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005374:	bf00      	nop
 8005376:	e000      	b.n	800537a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005378:	bf00      	nop
		}
	}

	return val;
 800537a:	697b      	ldr	r3, [r7, #20]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b089      	sub	sp, #36	@ 0x24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005390:	2302      	movs	r3, #2
 8005392:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b01      	cmp	r3, #1
 8005398:	f240 8109 	bls.w	80055ae <put_fat+0x22a>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	f080 8103 	bcs.w	80055ae <put_fat+0x22a>
		switch (fs->fs_type) {
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	f000 80b6 	beq.w	800551e <put_fat+0x19a>
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	f300 80fb 	bgt.w	80055ae <put_fat+0x22a>
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d003      	beq.n	80053c4 <put_fat+0x40>
 80053bc:	2b02      	cmp	r3, #2
 80053be:	f000 8083 	beq.w	80054c8 <put_fat+0x144>
 80053c2:	e0f4      	b.n	80055ae <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	61bb      	str	r3, [r7, #24]
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	085b      	lsrs	r3, r3, #1
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4413      	add	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	899b      	ldrh	r3, [r3, #12]
 80053da:	4619      	mov	r1, r3
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	fbb3 f3f1 	udiv	r3, r3, r1
 80053e2:	4413      	add	r3, r2
 80053e4:	4619      	mov	r1, r3
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff fe3c 	bl	8005064 <move_window>
 80053ec:	4603      	mov	r3, r0
 80053ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80053f0:	7ffb      	ldrb	r3, [r7, #31]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f040 80d4 	bne.w	80055a0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	61ba      	str	r2, [r7, #24]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	8992      	ldrh	r2, [r2, #12]
 8005408:	fbb3 f0f2 	udiv	r0, r3, r2
 800540c:	fb00 f202 	mul.w	r2, r0, r2
 8005410:	1a9b      	subs	r3, r3, r2
 8005412:	440b      	add	r3, r1
 8005414:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00d      	beq.n	800543c <put_fat+0xb8>
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	b25b      	sxtb	r3, r3
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	b25a      	sxtb	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	b25b      	sxtb	r3, r3
 8005434:	4313      	orrs	r3, r2
 8005436:	b25b      	sxtb	r3, r3
 8005438:	b2db      	uxtb	r3, r3
 800543a:	e001      	b.n	8005440 <put_fat+0xbc>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	899b      	ldrh	r3, [r3, #12]
 8005452:	4619      	mov	r1, r3
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	fbb3 f3f1 	udiv	r3, r3, r1
 800545a:	4413      	add	r3, r2
 800545c:	4619      	mov	r1, r3
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f7ff fe00 	bl	8005064 <move_window>
 8005464:	4603      	mov	r3, r0
 8005466:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005468:	7ffb      	ldrb	r3, [r7, #31]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f040 809a 	bne.w	80055a4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	899b      	ldrh	r3, [r3, #12]
 800547a:	461a      	mov	r2, r3
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005482:	fb00 f202 	mul.w	r2, r0, r2
 8005486:	1a9b      	subs	r3, r3, r2
 8005488:	440b      	add	r3, r1
 800548a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <put_fat+0x11a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	091b      	lsrs	r3, r3, #4
 800549a:	b2db      	uxtb	r3, r3
 800549c:	e00e      	b.n	80054bc <put_fat+0x138>
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	b25b      	sxtb	r3, r3
 80054a4:	f023 030f 	bic.w	r3, r3, #15
 80054a8:	b25a      	sxtb	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	0a1b      	lsrs	r3, r3, #8
 80054ae:	b25b      	sxtb	r3, r3
 80054b0:	f003 030f 	and.w	r3, r3, #15
 80054b4:	b25b      	sxtb	r3, r3
 80054b6:	4313      	orrs	r3, r2
 80054b8:	b25b      	sxtb	r3, r3
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	70da      	strb	r2, [r3, #3]
			break;
 80054c6:	e072      	b.n	80055ae <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	899b      	ldrh	r3, [r3, #12]
 80054d0:	085b      	lsrs	r3, r3, #1
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	4619      	mov	r1, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80054dc:	4413      	add	r3, r2
 80054de:	4619      	mov	r1, r3
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f7ff fdbf 	bl	8005064 <move_window>
 80054e6:	4603      	mov	r3, r0
 80054e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80054ea:	7ffb      	ldrb	r3, [r7, #31]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d15b      	bne.n	80055a8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	8992      	ldrh	r2, [r2, #12]
 80054fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8005502:	fb00 f202 	mul.w	r2, r0, r2
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	440b      	add	r3, r1
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	b292      	uxth	r2, r2
 800550e:	4611      	mov	r1, r2
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff fb32 	bl	8004b7a <st_word>
			fs->wflag = 1;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	70da      	strb	r2, [r3, #3]
			break;
 800551c:	e047      	b.n	80055ae <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	899b      	ldrh	r3, [r3, #12]
 8005526:	089b      	lsrs	r3, r3, #2
 8005528:	b29b      	uxth	r3, r3
 800552a:	4619      	mov	r1, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005532:	4413      	add	r3, r2
 8005534:	4619      	mov	r1, r3
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7ff fd94 	bl	8005064 <move_window>
 800553c:	4603      	mov	r3, r0
 800553e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005540:	7ffb      	ldrb	r3, [r7, #31]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d132      	bne.n	80055ac <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	8992      	ldrh	r2, [r2, #12]
 800555a:	fbb3 f0f2 	udiv	r0, r3, r2
 800555e:	fb00 f202 	mul.w	r2, r0, r2
 8005562:	1a9b      	subs	r3, r3, r2
 8005564:	440b      	add	r3, r1
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff fae4 	bl	8004b34 <ld_dword>
 800556c:	4603      	mov	r3, r0
 800556e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005572:	4323      	orrs	r3, r4
 8005574:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	8992      	ldrh	r2, [r2, #12]
 8005584:	fbb3 f0f2 	udiv	r0, r3, r2
 8005588:	fb00 f202 	mul.w	r2, r0, r2
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	440b      	add	r3, r1
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff fb0c 	bl	8004bb0 <st_dword>
			fs->wflag = 1;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	70da      	strb	r2, [r3, #3]
			break;
 800559e:	e006      	b.n	80055ae <put_fat+0x22a>
			if (res != FR_OK) break;
 80055a0:	bf00      	nop
 80055a2:	e004      	b.n	80055ae <put_fat+0x22a>
			if (res != FR_OK) break;
 80055a4:	bf00      	nop
 80055a6:	e002      	b.n	80055ae <put_fat+0x22a>
			if (res != FR_OK) break;
 80055a8:	bf00      	nop
 80055aa:	e000      	b.n	80055ae <put_fat+0x22a>
			if (res != FR_OK) break;
 80055ac:	bf00      	nop
		}
	}
	return res;
 80055ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3724      	adds	r7, #36	@ 0x24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd90      	pop	{r4, r7, pc}

080055b8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d904      	bls.n	80055de <remove_chain+0x26>
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d301      	bcc.n	80055e2 <remove_chain+0x2a>
 80055de:	2302      	movs	r3, #2
 80055e0:	e04b      	b.n	800567a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00c      	beq.n	8005602 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80055e8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	69b8      	ldr	r0, [r7, #24]
 80055f0:	f7ff fec8 	bl	8005384 <put_fat>
 80055f4:	4603      	mov	r3, r0
 80055f6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80055f8:	7ffb      	ldrb	r3, [r7, #31]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <remove_chain+0x4a>
 80055fe:	7ffb      	ldrb	r3, [r7, #31]
 8005600:	e03b      	b.n	800567a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7ff fdea 	bl	80051de <get_fat>
 800560a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d031      	beq.n	8005676 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <remove_chain+0x64>
 8005618:	2302      	movs	r3, #2
 800561a:	e02e      	b.n	800567a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005622:	d101      	bne.n	8005628 <remove_chain+0x70>
 8005624:	2301      	movs	r3, #1
 8005626:	e028      	b.n	800567a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005628:	2200      	movs	r2, #0
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	69b8      	ldr	r0, [r7, #24]
 800562e:	f7ff fea9 	bl	8005384 <put_fat>
 8005632:	4603      	mov	r3, r0
 8005634:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005636:	7ffb      	ldrb	r3, [r7, #31]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <remove_chain+0x88>
 800563c:	7ffb      	ldrb	r3, [r7, #31]
 800563e:	e01c      	b.n	800567a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	3b02      	subs	r3, #2
 800564a:	429a      	cmp	r2, r3
 800564c:	d20b      	bcs.n	8005666 <remove_chain+0xae>
			fs->free_clst++;
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	791b      	ldrb	r3, [r3, #4]
 800565c:	f043 0301 	orr.w	r3, r3, #1
 8005660:	b2da      	uxtb	r2, r3
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	429a      	cmp	r2, r3
 8005672:	d3c6      	bcc.n	8005602 <remove_chain+0x4a>
 8005674:	e000      	b.n	8005678 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005676:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b088      	sub	sp, #32
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10d      	bne.n	80056b4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <create_chain+0x2c>
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d31b      	bcc.n	80056e6 <create_chain+0x64>
 80056ae:	2301      	movs	r3, #1
 80056b0:	61bb      	str	r3, [r7, #24]
 80056b2:	e018      	b.n	80056e6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80056b4:	6839      	ldr	r1, [r7, #0]
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff fd91 	bl	80051de <get_fat>
 80056bc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d801      	bhi.n	80056c8 <create_chain+0x46>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e070      	b.n	80057aa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ce:	d101      	bne.n	80056d4 <create_chain+0x52>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	e06a      	b.n	80057aa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d201      	bcs.n	80056e2 <create_chain+0x60>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	e063      	b.n	80057aa <create_chain+0x128>
		scl = clst;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	3301      	adds	r3, #1
 80056ee:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d307      	bcc.n	800570a <create_chain+0x88>
				ncl = 2;
 80056fa:	2302      	movs	r3, #2
 80056fc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	429a      	cmp	r2, r3
 8005704:	d901      	bls.n	800570a <create_chain+0x88>
 8005706:	2300      	movs	r3, #0
 8005708:	e04f      	b.n	80057aa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800570a:	69f9      	ldr	r1, [r7, #28]
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7ff fd66 	bl	80051de <get_fat>
 8005712:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00e      	beq.n	8005738 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d003      	beq.n	8005728 <create_chain+0xa6>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005726:	d101      	bne.n	800572c <create_chain+0xaa>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	e03e      	b.n	80057aa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	429a      	cmp	r2, r3
 8005732:	d1da      	bne.n	80056ea <create_chain+0x68>
 8005734:	2300      	movs	r3, #0
 8005736:	e038      	b.n	80057aa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005738:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800573a:	f04f 32ff 	mov.w	r2, #4294967295
 800573e:	69f9      	ldr	r1, [r7, #28]
 8005740:	6938      	ldr	r0, [r7, #16]
 8005742:	f7ff fe1f 	bl	8005384 <put_fat>
 8005746:	4603      	mov	r3, r0
 8005748:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d109      	bne.n	8005764 <create_chain+0xe2>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d006      	beq.n	8005764 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	6938      	ldr	r0, [r7, #16]
 800575c:	f7ff fe12 	bl	8005384 <put_fat>
 8005760:	4603      	mov	r3, r0
 8005762:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d116      	bne.n	8005798 <create_chain+0x116>
		fs->last_clst = ncl;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	69fa      	ldr	r2, [r7, #28]
 800576e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	699a      	ldr	r2, [r3, #24]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	3b02      	subs	r3, #2
 800577a:	429a      	cmp	r2, r3
 800577c:	d804      	bhi.n	8005788 <create_chain+0x106>
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	1e5a      	subs	r2, r3, #1
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	791b      	ldrb	r3, [r3, #4]
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	b2da      	uxtb	r2, r3
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	711a      	strb	r2, [r3, #4]
 8005796:	e007      	b.n	80057a8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005798:	7dfb      	ldrb	r3, [r7, #23]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d102      	bne.n	80057a4 <create_chain+0x122>
 800579e:	f04f 33ff 	mov.w	r3, #4294967295
 80057a2:	e000      	b.n	80057a6 <create_chain+0x124>
 80057a4:	2301      	movs	r3, #1
 80057a6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80057a8:	69fb      	ldr	r3, [r7, #28]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3720      	adds	r7, #32
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b087      	sub	sp, #28
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c6:	3304      	adds	r3, #4
 80057c8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	899b      	ldrh	r3, [r3, #12]
 80057ce:	461a      	mov	r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	8952      	ldrh	r2, [r2, #10]
 80057da:	fbb3 f3f2 	udiv	r3, r3, r2
 80057de:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1d1a      	adds	r2, r3, #4
 80057e4:	613a      	str	r2, [r7, #16]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <clmt_clust+0x42>
 80057f0:	2300      	movs	r3, #0
 80057f2:	e010      	b.n	8005816 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d307      	bcc.n	800580c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	3304      	adds	r3, #4
 8005808:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800580a:	e7e9      	b.n	80057e0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800580c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	4413      	add	r3, r2
}
 8005816:	4618      	mov	r0, r3
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b086      	sub	sp, #24
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005838:	d204      	bcs.n	8005844 <dir_sdi+0x22>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005844:	2302      	movs	r3, #2
 8005846:	e071      	b.n	800592c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <dir_sdi+0x46>
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d902      	bls.n	8005868 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005866:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10c      	bne.n	8005888 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	8912      	ldrh	r2, [r2, #8]
 8005876:	4293      	cmp	r3, r2
 8005878:	d301      	bcc.n	800587e <dir_sdi+0x5c>
 800587a:	2302      	movs	r3, #2
 800587c:	e056      	b.n	800592c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	61da      	str	r2, [r3, #28]
 8005886:	e02d      	b.n	80058e4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	895b      	ldrh	r3, [r3, #10]
 800588c:	461a      	mov	r2, r3
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	899b      	ldrh	r3, [r3, #12]
 8005892:	fb02 f303 	mul.w	r3, r2, r3
 8005896:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005898:	e019      	b.n	80058ce <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6979      	ldr	r1, [r7, #20]
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff fc9d 	bl	80051de <get_fat>
 80058a4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ac:	d101      	bne.n	80058b2 <dir_sdi+0x90>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e03c      	b.n	800592c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d904      	bls.n	80058c2 <dir_sdi+0xa0>
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d301      	bcc.n	80058c6 <dir_sdi+0xa4>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e032      	b.n	800592c <dir_sdi+0x10a>
			ofs -= csz;
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d2e1      	bcs.n	800589a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80058d6:	6979      	ldr	r1, [r7, #20]
 80058d8:	6938      	ldr	r0, [r7, #16]
 80058da:	f7ff fc61 	bl	80051a0 <clust2sect>
 80058de:	4602      	mov	r2, r0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <dir_sdi+0xd4>
 80058f2:	2302      	movs	r3, #2
 80058f4:	e01a      	b.n	800592c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69da      	ldr	r2, [r3, #28]
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	899b      	ldrh	r3, [r3, #12]
 80058fe:	4619      	mov	r1, r3
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	fbb3 f3f1 	udiv	r3, r3, r1
 8005906:	441a      	add	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	899b      	ldrh	r3, [r3, #12]
 8005916:	461a      	mov	r2, r3
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	fbb3 f0f2 	udiv	r0, r3, r2
 800591e:	fb00 f202 	mul.w	r2, r0, r2
 8005922:	1a9b      	subs	r3, r3, r2
 8005924:	18ca      	adds	r2, r1, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	3320      	adds	r3, #32
 800594a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <dir_next+0x28>
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800595a:	d301      	bcc.n	8005960 <dir_next+0x2c>
 800595c:	2304      	movs	r3, #4
 800595e:	e0bb      	b.n	8005ad8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	899b      	ldrh	r3, [r3, #12]
 8005964:	461a      	mov	r2, r3
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	fbb3 f1f2 	udiv	r1, r3, r2
 800596c:	fb01 f202 	mul.w	r2, r1, r2
 8005970:	1a9b      	subs	r3, r3, r2
 8005972:	2b00      	cmp	r3, #0
 8005974:	f040 809d 	bne.w	8005ab2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10b      	bne.n	80059a2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	8912      	ldrh	r2, [r2, #8]
 8005992:	4293      	cmp	r3, r2
 8005994:	f0c0 808d 	bcc.w	8005ab2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	61da      	str	r2, [r3, #28]
 800599e:	2304      	movs	r3, #4
 80059a0:	e09a      	b.n	8005ad8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	899b      	ldrh	r3, [r3, #12]
 80059a6:	461a      	mov	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	8952      	ldrh	r2, [r2, #10]
 80059b2:	3a01      	subs	r2, #1
 80059b4:	4013      	ands	r3, r2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d17b      	bne.n	8005ab2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	4619      	mov	r1, r3
 80059c2:	4610      	mov	r0, r2
 80059c4:	f7ff fc0b 	bl	80051de <get_fat>
 80059c8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d801      	bhi.n	80059d4 <dir_next+0xa0>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e081      	b.n	8005ad8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d101      	bne.n	80059e0 <dir_next+0xac>
 80059dc:	2301      	movs	r3, #1
 80059de:	e07b      	b.n	8005ad8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d359      	bcc.n	8005a9e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	61da      	str	r2, [r3, #28]
 80059f6:	2304      	movs	r3, #4
 80059f8:	e06e      	b.n	8005ad8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	4619      	mov	r1, r3
 8005a02:	4610      	mov	r0, r2
 8005a04:	f7ff fe3d 	bl	8005682 <create_chain>
 8005a08:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <dir_next+0xe0>
 8005a10:	2307      	movs	r3, #7
 8005a12:	e061      	b.n	8005ad8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <dir_next+0xea>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e05c      	b.n	8005ad8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a24:	d101      	bne.n	8005a2a <dir_next+0xf6>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e056      	b.n	8005ad8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f7ff fad6 	bl	8004fdc <sync_window>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <dir_next+0x106>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e04e      	b.n	8005ad8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	899b      	ldrh	r3, [r3, #12]
 8005a44:	461a      	mov	r2, r3
 8005a46:	2100      	movs	r1, #0
 8005a48:	f7ff f8ff 	bl	8004c4a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	6979      	ldr	r1, [r7, #20]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f7ff fba4 	bl	80051a0 <clust2sect>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a5e:	e012      	b.n	8005a86 <dir_next+0x152>
						fs->wflag = 1;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7ff fab8 	bl	8004fdc <sync_window>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <dir_next+0x142>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e030      	b.n	8005ad8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	895b      	ldrh	r3, [r3, #10]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d3e6      	bcc.n	8005a60 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad2      	subs	r2, r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005aa4:	6979      	ldr	r1, [r7, #20]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff fb7a 	bl	80051a0 <clust2sect>
 8005aac:	4602      	mov	r2, r0
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	899b      	ldrh	r3, [r3, #12]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	fbb3 f0f2 	udiv	r0, r3, r2
 8005aca:	fb00 f202 	mul.w	r2, r0, r2
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	18ca      	adds	r2, r1, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005af0:	2100      	movs	r1, #0
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff fe95 	bl	8005822 <dir_sdi>
 8005af8:	4603      	mov	r3, r0
 8005afa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d12b      	bne.n	8005b5a <dir_alloc+0x7a>
		n = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f7ff faa9 	bl	8005064 <move_window>
 8005b12:	4603      	mov	r3, r0
 8005b14:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005b16:	7dfb      	ldrb	r3, [r7, #23]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d11d      	bne.n	8005b58 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2be5      	cmp	r3, #229	@ 0xe5
 8005b24:	d004      	beq.n	8005b30 <dir_alloc+0x50>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d107      	bne.n	8005b40 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	3301      	adds	r3, #1
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d102      	bne.n	8005b44 <dir_alloc+0x64>
 8005b3e:	e00c      	b.n	8005b5a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005b40:	2300      	movs	r3, #0
 8005b42:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005b44:	2101      	movs	r1, #1
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff fef4 	bl	8005934 <dir_next>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0d7      	beq.n	8005b06 <dir_alloc+0x26>
 8005b56:	e000      	b.n	8005b5a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005b58:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d101      	bne.n	8005b64 <dir_alloc+0x84>
 8005b60:	2307      	movs	r3, #7
 8005b62:	75fb      	strb	r3, [r7, #23]
	return res;
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	331a      	adds	r3, #26
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe ffc1 	bl	8004b04 <ld_word>
 8005b82:	4603      	mov	r3, r0
 8005b84:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d109      	bne.n	8005ba2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	3314      	adds	r3, #20
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fe ffb6 	bl	8004b04 <ld_word>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	041b      	lsls	r3, r3, #16
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	331a      	adds	r3, #26
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	b292      	uxth	r2, r2
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fe ffd9 	bl	8004b7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d109      	bne.n	8005be4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f103 0214 	add.w	r2, r3, #20
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	0c1b      	lsrs	r3, r3, #16
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f7fe ffcb 	bl	8004b7a <st_word>
	}
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005bec:	b590      	push	{r4, r7, lr}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	331a      	adds	r3, #26
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fe ff82 	bl	8004b04 <ld_word>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <cmp_lfn+0x1e>
 8005c06:	2300      	movs	r3, #0
 8005c08:	e059      	b.n	8005cbe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c12:	1e5a      	subs	r2, r3, #1
 8005c14:	4613      	mov	r3, r2
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005c20:	2301      	movs	r3, #1
 8005c22:	81fb      	strh	r3, [r7, #14]
 8005c24:	2300      	movs	r3, #0
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	e033      	b.n	8005c92 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005c2a:	4a27      	ldr	r2, [pc, #156]	@ (8005cc8 <cmp_lfn+0xdc>)
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	4413      	add	r3, r2
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	4413      	add	r3, r2
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fe ff63 	bl	8004b04 <ld_word>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005c42:	89fb      	ldrh	r3, [r7, #14]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01a      	beq.n	8005c7e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2bfe      	cmp	r3, #254	@ 0xfe
 8005c4c:	d812      	bhi.n	8005c74 <cmp_lfn+0x88>
 8005c4e:	89bb      	ldrh	r3, [r7, #12]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 fd3d 	bl	80076d0 <ff_wtoupper>
 8005c56:	4603      	mov	r3, r0
 8005c58:	461c      	mov	r4, r3
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	617a      	str	r2, [r7, #20]
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	4413      	add	r3, r2
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f001 fd31 	bl	80076d0 <ff_wtoupper>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	429c      	cmp	r4, r3
 8005c72:	d001      	beq.n	8005c78 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005c74:	2300      	movs	r3, #0
 8005c76:	e022      	b.n	8005cbe <cmp_lfn+0xd2>
			}
			wc = uc;
 8005c78:	89bb      	ldrh	r3, [r7, #12]
 8005c7a:	81fb      	strh	r3, [r7, #14]
 8005c7c:	e006      	b.n	8005c8c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005c7e:	89bb      	ldrh	r3, [r7, #12]
 8005c80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d001      	beq.n	8005c8c <cmp_lfn+0xa0>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e018      	b.n	8005cbe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b0c      	cmp	r3, #12
 8005c96:	d9c8      	bls.n	8005c2a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00b      	beq.n	8005cbc <cmp_lfn+0xd0>
 8005ca4:	89fb      	ldrh	r3, [r7, #14]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d008      	beq.n	8005cbc <cmp_lfn+0xd0>
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <cmp_lfn+0xd0>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e000      	b.n	8005cbe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005cbc:	2301      	movs	r3, #1
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd90      	pop	{r4, r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	080079c0 	.word	0x080079c0

08005ccc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	461a      	mov	r2, r3
 8005cda:	460b      	mov	r3, r1
 8005cdc:	71fb      	strb	r3, [r7, #7]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	330d      	adds	r3, #13
 8005ce6:	79ba      	ldrb	r2, [r7, #6]
 8005ce8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	330b      	adds	r3, #11
 8005cee:	220f      	movs	r2, #15
 8005cf0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	330c      	adds	r3, #12
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	331a      	adds	r3, #26
 8005cfe:	2100      	movs	r1, #0
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fe ff3a 	bl	8004b7a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005d06:	79fb      	ldrb	r3, [r7, #7]
 8005d08:	1e5a      	subs	r2, r3, #1
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	82fb      	strh	r3, [r7, #22]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005d1e:	8afb      	ldrh	r3, [r7, #22]
 8005d20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <put_lfn+0x6c>
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	61fa      	str	r2, [r7, #28]
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005d38:	4a17      	ldr	r2, [pc, #92]	@ (8005d98 <put_lfn+0xcc>)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4413      	add	r3, r2
 8005d46:	8afa      	ldrh	r2, [r7, #22]
 8005d48:	4611      	mov	r1, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe ff15 	bl	8004b7a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005d50:	8afb      	ldrh	r3, [r7, #22]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d102      	bne.n	8005d5c <put_lfn+0x90>
 8005d56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d5a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b0c      	cmp	r3, #12
 8005d66:	d9da      	bls.n	8005d1e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005d68:	8afb      	ldrh	r3, [r7, #22]
 8005d6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d006      	beq.n	8005d80 <put_lfn+0xb4>
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d103      	bne.n	8005d88 <put_lfn+0xbc>
 8005d80:	79fb      	ldrb	r3, [r7, #7]
 8005d82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d86:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	79fa      	ldrb	r2, [r7, #7]
 8005d8c:	701a      	strb	r2, [r3, #0]
}
 8005d8e:	bf00      	nop
 8005d90:	3720      	adds	r7, #32
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	080079c0 	.word	0x080079c0

08005d9c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08c      	sub	sp, #48	@ 0x30
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005daa:	220b      	movs	r2, #11
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f7fe ff2a 	bl	8004c08 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b05      	cmp	r3, #5
 8005db8:	d92b      	bls.n	8005e12 <gen_numname+0x76>
		sr = seq;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005dbe:	e022      	b.n	8005e06 <gen_numname+0x6a>
			wc = *lfn++;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	1c9a      	adds	r2, r3, #2
 8005dc4:	607a      	str	r2, [r7, #4]
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005dca:	2300      	movs	r3, #0
 8005dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dce:	e017      	b.n	8005e00 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	005a      	lsls	r2, r3, #1
 8005dd4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	4413      	add	r3, r2
 8005ddc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005dde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005de0:	085b      	lsrs	r3, r3, #1
 8005de2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d005      	beq.n	8005dfa <gen_numname+0x5e>
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005df4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005df8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e02:	2b0f      	cmp	r3, #15
 8005e04:	d9e4      	bls.n	8005dd0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1d8      	bne.n	8005dc0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005e12:	2307      	movs	r3, #7
 8005e14:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	3330      	adds	r3, #48	@ 0x30
 8005e22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005e26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e2a:	2b39      	cmp	r3, #57	@ 0x39
 8005e2c:	d904      	bls.n	8005e38 <gen_numname+0x9c>
 8005e2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e32:	3307      	adds	r3, #7
 8005e34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3a:	1e5a      	subs	r2, r3, #1
 8005e3c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005e3e:	3330      	adds	r3, #48	@ 0x30
 8005e40:	443b      	add	r3, r7
 8005e42:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005e46:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	091b      	lsrs	r3, r3, #4
 8005e4e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1df      	bne.n	8005e16 <gen_numname+0x7a>
	ns[i] = '~';
 8005e56:	f107 0214 	add.w	r2, r7, #20
 8005e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5c:	4413      	add	r3, r2
 8005e5e:	227e      	movs	r2, #126	@ 0x7e
 8005e60:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005e62:	2300      	movs	r3, #0
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e66:	e002      	b.n	8005e6e <gen_numname+0xd2>
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d205      	bcs.n	8005e82 <gen_numname+0xe6>
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	4413      	add	r3, r2
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d1f2      	bne.n	8005e68 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e84:	2b07      	cmp	r3, #7
 8005e86:	d807      	bhi.n	8005e98 <gen_numname+0xfc>
 8005e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005e8e:	3330      	adds	r3, #48	@ 0x30
 8005e90:	443b      	add	r3, r7
 8005e92:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005e96:	e000      	b.n	8005e9a <gen_numname+0xfe>
 8005e98:	2120      	movs	r1, #32
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	460a      	mov	r2, r1
 8005ea6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eaa:	2b07      	cmp	r3, #7
 8005eac:	d9e9      	bls.n	8005e82 <gen_numname+0xe6>
}
 8005eae:	bf00      	nop
 8005eb0:	bf00      	nop
 8005eb2:	3730      	adds	r7, #48	@ 0x30
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005ec4:	230b      	movs	r3, #11
 8005ec6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	0852      	lsrs	r2, r2, #1
 8005ece:	01db      	lsls	r3, r3, #7
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	1c59      	adds	r1, r3, #1
 8005ed8:	6079      	str	r1, [r7, #4]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	4413      	add	r3, r2
 8005ede:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	60bb      	str	r3, [r7, #8]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1ed      	bne.n	8005ec8 <sum_sfn+0x10>
	return sum;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b086      	sub	sp, #24
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005f08:	2100      	movs	r1, #0
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff fc89 	bl	8005822 <dir_sdi>
 8005f10:	4603      	mov	r3, r0
 8005f12:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <dir_find+0x24>
 8005f1a:	7dfb      	ldrb	r3, [r7, #23]
 8005f1c:	e0a9      	b.n	8006072 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005f1e:	23ff      	movs	r3, #255	@ 0xff
 8005f20:	753b      	strb	r3, [r7, #20]
 8005f22:	7d3b      	ldrb	r3, [r7, #20]
 8005f24:	757b      	strb	r3, [r7, #21]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	4619      	mov	r1, r3
 8005f34:	6938      	ldr	r0, [r7, #16]
 8005f36:	f7ff f895 	bl	8005064 <move_window>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f040 8090 	bne.w	8006066 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005f4e:	7dbb      	ldrb	r3, [r7, #22]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d102      	bne.n	8005f5a <dir_find+0x60>
 8005f54:	2304      	movs	r3, #4
 8005f56:	75fb      	strb	r3, [r7, #23]
 8005f58:	e08a      	b.n	8006070 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	330b      	adds	r3, #11
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f66:	73fb      	strb	r3, [r7, #15]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	7bfa      	ldrb	r2, [r7, #15]
 8005f6c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005f6e:	7dbb      	ldrb	r3, [r7, #22]
 8005f70:	2be5      	cmp	r3, #229	@ 0xe5
 8005f72:	d007      	beq.n	8005f84 <dir_find+0x8a>
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d009      	beq.n	8005f92 <dir_find+0x98>
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	2b0f      	cmp	r3, #15
 8005f82:	d006      	beq.n	8005f92 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005f84:	23ff      	movs	r3, #255	@ 0xff
 8005f86:	757b      	strb	r3, [r7, #21]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f90:	e05e      	b.n	8006050 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	2b0f      	cmp	r3, #15
 8005f96:	d136      	bne.n	8006006 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d154      	bne.n	8006050 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005fa6:	7dbb      	ldrb	r3, [r7, #22]
 8005fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00d      	beq.n	8005fcc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	7b5b      	ldrb	r3, [r3, #13]
 8005fb6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005fb8:	7dbb      	ldrb	r3, [r7, #22]
 8005fba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fbe:	75bb      	strb	r3, [r7, #22]
 8005fc0:	7dbb      	ldrb	r3, [r7, #22]
 8005fc2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	695a      	ldr	r2, [r3, #20]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005fcc:	7dba      	ldrb	r2, [r7, #22]
 8005fce:	7d7b      	ldrb	r3, [r7, #21]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d115      	bne.n	8006000 <dir_find+0x106>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	330d      	adds	r3, #13
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	7d3a      	ldrb	r2, [r7, #20]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d10e      	bne.n	8006000 <dir_find+0x106>
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	4619      	mov	r1, r3
 8005fec:	4610      	mov	r0, r2
 8005fee:	f7ff fdfd 	bl	8005bec <cmp_lfn>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <dir_find+0x106>
 8005ff8:	7d7b      	ldrb	r3, [r7, #21]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	e000      	b.n	8006002 <dir_find+0x108>
 8006000:	23ff      	movs	r3, #255	@ 0xff
 8006002:	757b      	strb	r3, [r7, #21]
 8006004:	e024      	b.n	8006050 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006006:	7d7b      	ldrb	r3, [r7, #21]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d109      	bne.n	8006020 <dir_find+0x126>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff ff51 	bl	8005eb8 <sum_sfn>
 8006016:	4603      	mov	r3, r0
 8006018:	461a      	mov	r2, r3
 800601a:	7d3b      	ldrb	r3, [r7, #20]
 800601c:	4293      	cmp	r3, r2
 800601e:	d024      	beq.n	800606a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <dir_find+0x14a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a18      	ldr	r0, [r3, #32]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3324      	adds	r3, #36	@ 0x24
 8006036:	220b      	movs	r2, #11
 8006038:	4619      	mov	r1, r3
 800603a:	f7fe fe21 	bl	8004c80 <mem_cmp>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d014      	beq.n	800606e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006044:	23ff      	movs	r3, #255	@ 0xff
 8006046:	757b      	strb	r3, [r7, #21]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f04f 32ff 	mov.w	r2, #4294967295
 800604e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006050:	2100      	movs	r1, #0
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff fc6e 	bl	8005934 <dir_next>
 8006058:	4603      	mov	r3, r0
 800605a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800605c:	7dfb      	ldrb	r3, [r7, #23]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f43f af65 	beq.w	8005f2e <dir_find+0x34>
 8006064:	e004      	b.n	8006070 <dir_find+0x176>
		if (res != FR_OK) break;
 8006066:	bf00      	nop
 8006068:	e002      	b.n	8006070 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800606a:	bf00      	nop
 800606c:	e000      	b.n	8006070 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800606e:	bf00      	nop

	return res;
 8006070:	7dfb      	ldrb	r3, [r7, #23]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
	...

0800607c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08c      	sub	sp, #48	@ 0x30
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006090:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <dir_register+0x20>
 8006098:	2306      	movs	r3, #6
 800609a:	e0e0      	b.n	800625e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800609c:	2300      	movs	r3, #0
 800609e:	627b      	str	r3, [r7, #36]	@ 0x24
 80060a0:	e002      	b.n	80060a8 <dir_register+0x2c>
 80060a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a4:	3301      	adds	r3, #1
 80060a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	4413      	add	r3, r2
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1f4      	bne.n	80060a2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80060be:	f107 030c 	add.w	r3, r7, #12
 80060c2:	220c      	movs	r2, #12
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fe fd9f 	bl	8004c08 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80060ca:	7dfb      	ldrb	r3, [r7, #23]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d032      	beq.n	800613a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2240      	movs	r2, #64	@ 0x40
 80060d8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80060dc:	2301      	movs	r3, #1
 80060de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060e0:	e016      	b.n	8006110 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	f107 010c 	add.w	r1, r7, #12
 80060f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f2:	f7ff fe53 	bl	8005d9c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff feff 	bl	8005efa <dir_find>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006102:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800610a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610c:	3301      	adds	r3, #1
 800610e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006112:	2b63      	cmp	r3, #99	@ 0x63
 8006114:	d9e5      	bls.n	80060e2 <dir_register+0x66>
 8006116:	e000      	b.n	800611a <dir_register+0x9e>
			if (res != FR_OK) break;
 8006118:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800611a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611c:	2b64      	cmp	r3, #100	@ 0x64
 800611e:	d101      	bne.n	8006124 <dir_register+0xa8>
 8006120:	2307      	movs	r3, #7
 8006122:	e09c      	b.n	800625e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006124:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006128:	2b04      	cmp	r3, #4
 800612a:	d002      	beq.n	8006132 <dir_register+0xb6>
 800612c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006130:	e095      	b.n	800625e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006132:	7dfa      	ldrb	r2, [r7, #23]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800613a:	7dfb      	ldrb	r3, [r7, #23]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d007      	beq.n	8006154 <dir_register+0xd8>
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	330c      	adds	r3, #12
 8006148:	4a47      	ldr	r2, [pc, #284]	@ (8006268 <dir_register+0x1ec>)
 800614a:	fba2 2303 	umull	r2, r3, r2, r3
 800614e:	089b      	lsrs	r3, r3, #2
 8006150:	3301      	adds	r3, #1
 8006152:	e000      	b.n	8006156 <dir_register+0xda>
 8006154:	2301      	movs	r3, #1
 8006156:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006158:	6a39      	ldr	r1, [r7, #32]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff fcc0 	bl	8005ae0 <dir_alloc>
 8006160:	4603      	mov	r3, r0
 8006162:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006166:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800616a:	2b00      	cmp	r3, #0
 800616c:	d148      	bne.n	8006200 <dir_register+0x184>
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	3b01      	subs	r3, #1
 8006172:	623b      	str	r3, [r7, #32]
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d042      	beq.n	8006200 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	695a      	ldr	r2, [r3, #20]
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	015b      	lsls	r3, r3, #5
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff fb4b 	bl	8005822 <dir_sdi>
 800618c:	4603      	mov	r3, r0
 800618e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006192:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006196:	2b00      	cmp	r3, #0
 8006198:	d132      	bne.n	8006200 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3324      	adds	r3, #36	@ 0x24
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff fe8a 	bl	8005eb8 <sum_sfn>
 80061a4:	4603      	mov	r3, r0
 80061a6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	4619      	mov	r1, r3
 80061ae:	69f8      	ldr	r0, [r7, #28]
 80061b0:	f7fe ff58 	bl	8005064 <move_window>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80061ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d11d      	bne.n	80061fe <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	6918      	ldr	r0, [r3, #16]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a19      	ldr	r1, [r3, #32]
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	7efb      	ldrb	r3, [r7, #27]
 80061d0:	f7ff fd7c 	bl	8005ccc <put_lfn>
				fs->wflag = 1;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	2201      	movs	r2, #1
 80061d8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80061da:	2100      	movs	r1, #0
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff fba9 	bl	8005934 <dir_next>
 80061e2:	4603      	mov	r3, r0
 80061e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80061e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d107      	bne.n	8006200 <dir_register+0x184>
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	623b      	str	r3, [r7, #32]
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1d5      	bne.n	80061a8 <dir_register+0x12c>
 80061fc:	e000      	b.n	8006200 <dir_register+0x184>
				if (res != FR_OK) break;
 80061fe:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006200:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006204:	2b00      	cmp	r3, #0
 8006206:	d128      	bne.n	800625a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	4619      	mov	r1, r3
 800620e:	69f8      	ldr	r0, [r7, #28]
 8006210:	f7fe ff28 	bl	8005064 <move_window>
 8006214:	4603      	mov	r3, r0
 8006216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800621a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800621e:	2b00      	cmp	r3, #0
 8006220:	d11b      	bne.n	800625a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	2220      	movs	r2, #32
 8006228:	2100      	movs	r1, #0
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fd0d 	bl	8004c4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a18      	ldr	r0, [r3, #32]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3324      	adds	r3, #36	@ 0x24
 8006238:	220b      	movs	r2, #11
 800623a:	4619      	mov	r1, r3
 800623c:	f7fe fce4 	bl	8004c08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	330c      	adds	r3, #12
 800624c:	f002 0218 	and.w	r2, r2, #24
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	2201      	movs	r2, #1
 8006258:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800625a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800625e:	4618      	mov	r0, r3
 8006260:	3730      	adds	r7, #48	@ 0x30
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	4ec4ec4f 	.word	0x4ec4ec4f

0800626c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08a      	sub	sp, #40	@ 0x28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	2300      	movs	r3, #0
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	61ba      	str	r2, [r7, #24]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4413      	add	r3, r2
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800629a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800629c:	2b1f      	cmp	r3, #31
 800629e:	d940      	bls.n	8006322 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80062a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80062a4:	d006      	beq.n	80062b4 <create_name+0x48>
 80062a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80062aa:	d110      	bne.n	80062ce <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80062ac:	e002      	b.n	80062b4 <create_name+0x48>
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	3301      	adds	r3, #1
 80062b2:	61bb      	str	r3, [r7, #24]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	4413      	add	r3, r2
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80062be:	d0f6      	beq.n	80062ae <create_name+0x42>
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	4413      	add	r3, r2
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80062ca:	d0f0      	beq.n	80062ae <create_name+0x42>
			break;
 80062cc:	e02a      	b.n	8006324 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2bfe      	cmp	r3, #254	@ 0xfe
 80062d2:	d901      	bls.n	80062d8 <create_name+0x6c>
 80062d4:	2306      	movs	r3, #6
 80062d6:	e17d      	b.n	80065d4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80062d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80062de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062e0:	2101      	movs	r1, #1
 80062e2:	4618      	mov	r0, r3
 80062e4:	f001 f9b8 	bl	8007658 <ff_convert>
 80062e8:	4603      	mov	r3, r0
 80062ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80062ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <create_name+0x8a>
 80062f2:	2306      	movs	r3, #6
 80062f4:	e16e      	b.n	80065d4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80062f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80062fa:	d809      	bhi.n	8006310 <create_name+0xa4>
 80062fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062fe:	4619      	mov	r1, r3
 8006300:	488d      	ldr	r0, [pc, #564]	@ (8006538 <create_name+0x2cc>)
 8006302:	f7fe fce4 	bl	8004cce <chk_chr>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <create_name+0xa4>
 800630c:	2306      	movs	r3, #6
 800630e:	e161      	b.n	80065d4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	617a      	str	r2, [r7, #20]
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800631e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006320:	e7b4      	b.n	800628c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006322:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	441a      	add	r2, r3
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800632e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006330:	2b1f      	cmp	r3, #31
 8006332:	d801      	bhi.n	8006338 <create_name+0xcc>
 8006334:	2304      	movs	r3, #4
 8006336:	e000      	b.n	800633a <create_name+0xce>
 8006338:	2300      	movs	r3, #0
 800633a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800633e:	e011      	b.n	8006364 <create_name+0xf8>
		w = lfn[di - 1];
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006346:	3b01      	subs	r3, #1
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8006352:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006354:	2b20      	cmp	r3, #32
 8006356:	d002      	beq.n	800635e <create_name+0xf2>
 8006358:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800635a:	2b2e      	cmp	r3, #46	@ 0x2e
 800635c:	d106      	bne.n	800636c <create_name+0x100>
		di--;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	3b01      	subs	r3, #1
 8006362:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1ea      	bne.n	8006340 <create_name+0xd4>
 800636a:	e000      	b.n	800636e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800636c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	2200      	movs	r2, #0
 8006378:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <create_name+0x118>
 8006380:	2306      	movs	r3, #6
 8006382:	e127      	b.n	80065d4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3324      	adds	r3, #36	@ 0x24
 8006388:	220b      	movs	r2, #11
 800638a:	2120      	movs	r1, #32
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe fc5c 	bl	8004c4a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006392:	2300      	movs	r3, #0
 8006394:	61bb      	str	r3, [r7, #24]
 8006396:	e002      	b.n	800639e <create_name+0x132>
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	3301      	adds	r3, #1
 800639c:	61bb      	str	r3, [r7, #24]
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d0f5      	beq.n	8006398 <create_name+0x12c>
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80063b8:	d0ee      	beq.n	8006398 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d009      	beq.n	80063d4 <create_name+0x168>
 80063c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063c4:	f043 0303 	orr.w	r3, r3, #3
 80063c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80063cc:	e002      	b.n	80063d4 <create_name+0x168>
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d009      	beq.n	80063ee <create_name+0x182>
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80063e0:	3b01      	subs	r3, #1
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80063ec:	d1ef      	bne.n	80063ce <create_name+0x162>

	i = b = 0; ni = 8;
 80063ee:	2300      	movs	r3, #0
 80063f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80063f4:	2300      	movs	r3, #0
 80063f6:	623b      	str	r3, [r7, #32]
 80063f8:	2308      	movs	r3, #8
 80063fa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	61ba      	str	r2, [r7, #24]
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800640c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 8090 	beq.w	8006534 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006414:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006416:	2b20      	cmp	r3, #32
 8006418:	d006      	beq.n	8006428 <create_name+0x1bc>
 800641a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800641c:	2b2e      	cmp	r3, #46	@ 0x2e
 800641e:	d10a      	bne.n	8006436 <create_name+0x1ca>
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	429a      	cmp	r2, r3
 8006426:	d006      	beq.n	8006436 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006428:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800642c:	f043 0303 	orr.w	r3, r3, #3
 8006430:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006434:	e07d      	b.n	8006532 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006436:	6a3a      	ldr	r2, [r7, #32]
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	429a      	cmp	r2, r3
 800643c:	d203      	bcs.n	8006446 <create_name+0x1da>
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	429a      	cmp	r2, r3
 8006444:	d123      	bne.n	800648e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	2b0b      	cmp	r3, #11
 800644a:	d106      	bne.n	800645a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800644c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006450:	f043 0303 	orr.w	r3, r3, #3
 8006454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006458:	e075      	b.n	8006546 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	429a      	cmp	r2, r3
 8006460:	d005      	beq.n	800646e <create_name+0x202>
 8006462:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006466:	f043 0303 	orr.w	r3, r3, #3
 800646a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	429a      	cmp	r2, r3
 8006474:	d866      	bhi.n	8006544 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	61bb      	str	r3, [r7, #24]
 800647a:	2308      	movs	r3, #8
 800647c:	623b      	str	r3, [r7, #32]
 800647e:	230b      	movs	r3, #11
 8006480:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006482:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800648c:	e051      	b.n	8006532 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800648e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006490:	2b7f      	cmp	r3, #127	@ 0x7f
 8006492:	d914      	bls.n	80064be <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006494:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006496:	2100      	movs	r1, #0
 8006498:	4618      	mov	r0, r3
 800649a:	f001 f8dd 	bl	8007658 <ff_convert>
 800649e:	4603      	mov	r3, r0
 80064a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80064a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <create_name+0x246>
 80064a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064aa:	3b80      	subs	r3, #128	@ 0x80
 80064ac:	4a23      	ldr	r2, [pc, #140]	@ (800653c <create_name+0x2d0>)
 80064ae:	5cd3      	ldrb	r3, [r2, r3]
 80064b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80064b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064b6:	f043 0302 	orr.w	r3, r3, #2
 80064ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80064be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d007      	beq.n	80064d4 <create_name+0x268>
 80064c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064c6:	4619      	mov	r1, r3
 80064c8:	481d      	ldr	r0, [pc, #116]	@ (8006540 <create_name+0x2d4>)
 80064ca:	f7fe fc00 	bl	8004cce <chk_chr>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80064d4:	235f      	movs	r3, #95	@ 0x5f
 80064d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80064d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064dc:	f043 0303 	orr.w	r3, r3, #3
 80064e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80064e4:	e01b      	b.n	800651e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80064e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064e8:	2b40      	cmp	r3, #64	@ 0x40
 80064ea:	d909      	bls.n	8006500 <create_name+0x294>
 80064ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064ee:	2b5a      	cmp	r3, #90	@ 0x5a
 80064f0:	d806      	bhi.n	8006500 <create_name+0x294>
					b |= 2;
 80064f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064f6:	f043 0302 	orr.w	r3, r3, #2
 80064fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80064fe:	e00e      	b.n	800651e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006500:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006502:	2b60      	cmp	r3, #96	@ 0x60
 8006504:	d90b      	bls.n	800651e <create_name+0x2b2>
 8006506:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006508:	2b7a      	cmp	r3, #122	@ 0x7a
 800650a:	d808      	bhi.n	800651e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800650c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006510:	f043 0301 	orr.w	r3, r3, #1
 8006514:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006518:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800651a:	3b20      	subs	r3, #32
 800651c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	623a      	str	r2, [r7, #32]
 8006524:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006526:	b2d1      	uxtb	r1, r2
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	4413      	add	r3, r2
 800652c:	460a      	mov	r2, r1
 800652e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006532:	e763      	b.n	80063fc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006534:	bf00      	nop
 8006536:	e006      	b.n	8006546 <create_name+0x2da>
 8006538:	080078e0 	.word	0x080078e0
 800653c:	08007940 	.word	0x08007940
 8006540:	080078ec 	.word	0x080078ec
			if (si > di) break;			/* No extension */
 8006544:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800654c:	2be5      	cmp	r3, #229	@ 0xe5
 800654e:	d103      	bne.n	8006558 <create_name+0x2ec>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2205      	movs	r2, #5
 8006554:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	2b08      	cmp	r3, #8
 800655c:	d104      	bne.n	8006568 <create_name+0x2fc>
 800655e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006568:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800656c:	f003 030c 	and.w	r3, r3, #12
 8006570:	2b0c      	cmp	r3, #12
 8006572:	d005      	beq.n	8006580 <create_name+0x314>
 8006574:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006578:	f003 0303 	and.w	r3, r3, #3
 800657c:	2b03      	cmp	r3, #3
 800657e:	d105      	bne.n	800658c <create_name+0x320>
 8006580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006584:	f043 0302 	orr.w	r3, r3, #2
 8006588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800658c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d117      	bne.n	80065c8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006598:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800659c:	f003 0303 	and.w	r3, r3, #3
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d105      	bne.n	80065b0 <create_name+0x344>
 80065a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065a8:	f043 0310 	orr.w	r3, r3, #16
 80065ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80065b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80065b4:	f003 030c 	and.w	r3, r3, #12
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d105      	bne.n	80065c8 <create_name+0x35c>
 80065bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065c0:	f043 0308 	orr.w	r3, r3, #8
 80065c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80065ce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80065d2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3728      	adds	r7, #40	@ 0x28
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80065f0:	e002      	b.n	80065f8 <follow_path+0x1c>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	3301      	adds	r3, #1
 80065f6:	603b      	str	r3, [r7, #0]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80065fe:	d0f8      	beq.n	80065f2 <follow_path+0x16>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b5c      	cmp	r3, #92	@ 0x5c
 8006606:	d0f4      	beq.n	80065f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	2200      	movs	r2, #0
 800660c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b1f      	cmp	r3, #31
 8006614:	d80a      	bhi.n	800662c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2280      	movs	r2, #128	@ 0x80
 800661a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800661e:	2100      	movs	r1, #0
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff f8fe 	bl	8005822 <dir_sdi>
 8006626:	4603      	mov	r3, r0
 8006628:	75fb      	strb	r3, [r7, #23]
 800662a:	e048      	b.n	80066be <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800662c:	463b      	mov	r3, r7
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff fe1b 	bl	800626c <create_name>
 8006636:	4603      	mov	r3, r0
 8006638:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800663a:	7dfb      	ldrb	r3, [r7, #23]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d139      	bne.n	80066b4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff fc5a 	bl	8005efa <dir_find>
 8006646:	4603      	mov	r3, r0
 8006648:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006650:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006652:	7dfb      	ldrb	r3, [r7, #23]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006658:	7dfb      	ldrb	r3, [r7, #23]
 800665a:	2b04      	cmp	r3, #4
 800665c:	d12c      	bne.n	80066b8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800665e:	7afb      	ldrb	r3, [r7, #11]
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b00      	cmp	r3, #0
 8006666:	d127      	bne.n	80066b8 <follow_path+0xdc>
 8006668:	2305      	movs	r3, #5
 800666a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800666c:	e024      	b.n	80066b8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800666e:	7afb      	ldrb	r3, [r7, #11]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b00      	cmp	r3, #0
 8006676:	d121      	bne.n	80066bc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	799b      	ldrb	r3, [r3, #6]
 800667c:	f003 0310 	and.w	r3, r3, #16
 8006680:	2b00      	cmp	r3, #0
 8006682:	d102      	bne.n	800668a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006684:	2305      	movs	r3, #5
 8006686:	75fb      	strb	r3, [r7, #23]
 8006688:	e019      	b.n	80066be <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	8992      	ldrh	r2, [r2, #12]
 8006698:	fbb3 f0f2 	udiv	r0, r3, r2
 800669c:	fb00 f202 	mul.w	r2, r0, r2
 80066a0:	1a9b      	subs	r3, r3, r2
 80066a2:	440b      	add	r3, r1
 80066a4:	4619      	mov	r1, r3
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f7ff fa61 	bl	8005b6e <ld_clust>
 80066ac:	4602      	mov	r2, r0
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80066b2:	e7bb      	b.n	800662c <follow_path+0x50>
			if (res != FR_OK) break;
 80066b4:	bf00      	nop
 80066b6:	e002      	b.n	80066be <follow_path+0xe2>
				break;
 80066b8:	bf00      	nop
 80066ba:	e000      	b.n	80066be <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80066bc:	bf00      	nop
			}
		}
	}

	return res;
 80066be:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80066d0:	f04f 33ff 	mov.w	r3, #4294967295
 80066d4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d031      	beq.n	8006742 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	e002      	b.n	80066ec <get_ldnumber+0x24>
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	3301      	adds	r3, #1
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b1f      	cmp	r3, #31
 80066f2:	d903      	bls.n	80066fc <get_ldnumber+0x34>
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b3a      	cmp	r3, #58	@ 0x3a
 80066fa:	d1f4      	bne.n	80066e6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b3a      	cmp	r3, #58	@ 0x3a
 8006702:	d11c      	bne.n	800673e <get_ldnumber+0x76>
			tp = *path;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	60fa      	str	r2, [r7, #12]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	3b30      	subs	r3, #48	@ 0x30
 8006714:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b09      	cmp	r3, #9
 800671a:	d80e      	bhi.n	800673a <get_ldnumber+0x72>
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	429a      	cmp	r2, r3
 8006722:	d10a      	bne.n	800673a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d107      	bne.n	800673a <get_ldnumber+0x72>
					vol = (int)i;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	3301      	adds	r3, #1
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	e002      	b.n	8006744 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800673e:	2300      	movs	r3, #0
 8006740:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006742:	693b      	ldr	r3, [r7, #16]
}
 8006744:	4618      	mov	r0, r3
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	70da      	strb	r2, [r3, #3]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f04f 32ff 	mov.w	r2, #4294967295
 8006766:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7fe fc7a 	bl	8005064 <move_window>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <check_fs+0x2a>
 8006776:	2304      	movs	r3, #4
 8006778:	e038      	b.n	80067ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3338      	adds	r3, #56	@ 0x38
 800677e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe f9be 	bl	8004b04 <ld_word>
 8006788:	4603      	mov	r3, r0
 800678a:	461a      	mov	r2, r3
 800678c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006790:	429a      	cmp	r2, r3
 8006792:	d001      	beq.n	8006798 <check_fs+0x48>
 8006794:	2303      	movs	r3, #3
 8006796:	e029      	b.n	80067ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800679e:	2be9      	cmp	r3, #233	@ 0xe9
 80067a0:	d009      	beq.n	80067b6 <check_fs+0x66>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80067a8:	2beb      	cmp	r3, #235	@ 0xeb
 80067aa:	d11e      	bne.n	80067ea <check_fs+0x9a>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80067b2:	2b90      	cmp	r3, #144	@ 0x90
 80067b4:	d119      	bne.n	80067ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3338      	adds	r3, #56	@ 0x38
 80067ba:	3336      	adds	r3, #54	@ 0x36
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fe f9b9 	bl	8004b34 <ld_dword>
 80067c2:	4603      	mov	r3, r0
 80067c4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80067c8:	4a0a      	ldr	r2, [pc, #40]	@ (80067f4 <check_fs+0xa4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d101      	bne.n	80067d2 <check_fs+0x82>
 80067ce:	2300      	movs	r3, #0
 80067d0:	e00c      	b.n	80067ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3338      	adds	r3, #56	@ 0x38
 80067d6:	3352      	adds	r3, #82	@ 0x52
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fe f9ab 	bl	8004b34 <ld_dword>
 80067de:	4603      	mov	r3, r0
 80067e0:	4a05      	ldr	r2, [pc, #20]	@ (80067f8 <check_fs+0xa8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d101      	bne.n	80067ea <check_fs+0x9a>
 80067e6:	2300      	movs	r3, #0
 80067e8:	e000      	b.n	80067ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80067ea:	2302      	movs	r3, #2
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	00544146 	.word	0x00544146
 80067f8:	33544146 	.word	0x33544146

080067fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b096      	sub	sp, #88	@ 0x58
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	4613      	mov	r3, r2
 8006808:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7ff ff59 	bl	80066c8 <get_ldnumber>
 8006816:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800681a:	2b00      	cmp	r3, #0
 800681c:	da01      	bge.n	8006822 <find_volume+0x26>
 800681e:	230b      	movs	r3, #11
 8006820:	e265      	b.n	8006cee <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006822:	4a9f      	ldr	r2, [pc, #636]	@ (8006aa0 <find_volume+0x2a4>)
 8006824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800682a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800682c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <find_volume+0x3a>
 8006832:	230c      	movs	r3, #12
 8006834:	e25b      	b.n	8006cee <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800683a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800683c:	79fb      	ldrb	r3, [r7, #7]
 800683e:	f023 0301 	bic.w	r3, r3, #1
 8006842:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01a      	beq.n	8006882 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe f8b7 	bl	80049c4 <disk_status>
 8006856:	4603      	mov	r3, r0
 8006858:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800685c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10c      	bne.n	8006882 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006868:	79fb      	ldrb	r3, [r7, #7]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d007      	beq.n	800687e <find_volume+0x82>
 800686e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800687a:	230a      	movs	r3, #10
 800687c:	e237      	b.n	8006cee <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800687e:	2300      	movs	r3, #0
 8006880:	e235      	b.n	8006cee <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006884:	2200      	movs	r2, #0
 8006886:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800688a:	b2da      	uxtb	r2, r3
 800688c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	4618      	mov	r0, r3
 8006896:	f7fe f8af 	bl	80049f8 <disk_initialize>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80068a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80068ac:	2303      	movs	r3, #3
 80068ae:	e21e      	b.n	8006cee <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80068b0:	79fb      	ldrb	r3, [r7, #7]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d007      	beq.n	80068c6 <find_volume+0xca>
 80068b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80068c2:	230a      	movs	r3, #10
 80068c4:	e213      	b.n	8006cee <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80068c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c8:	7858      	ldrb	r0, [r3, #1]
 80068ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068cc:	330c      	adds	r3, #12
 80068ce:	461a      	mov	r2, r3
 80068d0:	2102      	movs	r1, #2
 80068d2:	f7fe f8f9 	bl	8004ac8 <disk_ioctl>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <find_volume+0xe4>
 80068dc:	2301      	movs	r3, #1
 80068de:	e206      	b.n	8006cee <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80068e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e2:	899b      	ldrh	r3, [r3, #12]
 80068e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068e8:	d80d      	bhi.n	8006906 <find_volume+0x10a>
 80068ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ec:	899b      	ldrh	r3, [r3, #12]
 80068ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068f2:	d308      	bcc.n	8006906 <find_volume+0x10a>
 80068f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f6:	899b      	ldrh	r3, [r3, #12]
 80068f8:	461a      	mov	r2, r3
 80068fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fc:	899b      	ldrh	r3, [r3, #12]
 80068fe:	3b01      	subs	r3, #1
 8006900:	4013      	ands	r3, r2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <find_volume+0x10e>
 8006906:	2301      	movs	r3, #1
 8006908:	e1f1      	b.n	8006cee <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800690e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006910:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006912:	f7ff ff1d 	bl	8006750 <check_fs>
 8006916:	4603      	mov	r3, r0
 8006918:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800691c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006920:	2b02      	cmp	r3, #2
 8006922:	d149      	bne.n	80069b8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006924:	2300      	movs	r3, #0
 8006926:	643b      	str	r3, [r7, #64]	@ 0x40
 8006928:	e01e      	b.n	8006968 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800692a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006938:	4413      	add	r3, r2
 800693a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800693c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693e:	3304      	adds	r3, #4
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d006      	beq.n	8006954 <find_volume+0x158>
 8006946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006948:	3308      	adds	r3, #8
 800694a:	4618      	mov	r0, r3
 800694c:	f7fe f8f2 	bl	8004b34 <ld_dword>
 8006950:	4602      	mov	r2, r0
 8006952:	e000      	b.n	8006956 <find_volume+0x15a>
 8006954:	2200      	movs	r2, #0
 8006956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	3358      	adds	r3, #88	@ 0x58
 800695c:	443b      	add	r3, r7
 800695e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006964:	3301      	adds	r3, #1
 8006966:	643b      	str	r3, [r7, #64]	@ 0x40
 8006968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800696a:	2b03      	cmp	r3, #3
 800696c:	d9dd      	bls.n	800692a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800696e:	2300      	movs	r3, #0
 8006970:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <find_volume+0x182>
 8006978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800697a:	3b01      	subs	r3, #1
 800697c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800697e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	3358      	adds	r3, #88	@ 0x58
 8006984:	443b      	add	r3, r7
 8006986:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800698a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800698c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <find_volume+0x1a2>
 8006992:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006994:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006996:	f7ff fedb 	bl	8006750 <check_fs>
 800699a:	4603      	mov	r3, r0
 800699c:	e000      	b.n	80069a0 <find_volume+0x1a4>
 800699e:	2303      	movs	r3, #3
 80069a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80069a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d905      	bls.n	80069b8 <find_volume+0x1bc>
 80069ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069ae:	3301      	adds	r3, #1
 80069b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d9e2      	bls.n	800697e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80069b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d101      	bne.n	80069c4 <find_volume+0x1c8>
 80069c0:	2301      	movs	r3, #1
 80069c2:	e194      	b.n	8006cee <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80069c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d901      	bls.n	80069d0 <find_volume+0x1d4>
 80069cc:	230d      	movs	r3, #13
 80069ce:	e18e      	b.n	8006cee <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80069d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d2:	3338      	adds	r3, #56	@ 0x38
 80069d4:	330b      	adds	r3, #11
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fe f894 	bl	8004b04 <ld_word>
 80069dc:	4603      	mov	r3, r0
 80069de:	461a      	mov	r2, r3
 80069e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e2:	899b      	ldrh	r3, [r3, #12]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d001      	beq.n	80069ec <find_volume+0x1f0>
 80069e8:	230d      	movs	r3, #13
 80069ea:	e180      	b.n	8006cee <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80069ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ee:	3338      	adds	r3, #56	@ 0x38
 80069f0:	3316      	adds	r3, #22
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fe f886 	bl	8004b04 <ld_word>
 80069f8:	4603      	mov	r3, r0
 80069fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80069fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <find_volume+0x214>
 8006a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a04:	3338      	adds	r3, #56	@ 0x38
 8006a06:	3324      	adds	r3, #36	@ 0x24
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe f893 	bl	8004b34 <ld_dword>
 8006a0e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a14:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a18:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a22:	789b      	ldrb	r3, [r3, #2]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d005      	beq.n	8006a34 <find_volume+0x238>
 8006a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2a:	789b      	ldrb	r3, [r3, #2]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d001      	beq.n	8006a34 <find_volume+0x238>
 8006a30:	230d      	movs	r3, #13
 8006a32:	e15c      	b.n	8006cee <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a36:	789b      	ldrb	r3, [r3, #2]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a3c:	fb02 f303 	mul.w	r3, r2, r3
 8006a40:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a48:	461a      	mov	r2, r3
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a50:	895b      	ldrh	r3, [r3, #10]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d008      	beq.n	8006a68 <find_volume+0x26c>
 8006a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a58:	895b      	ldrh	r3, [r3, #10]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5e:	895b      	ldrh	r3, [r3, #10]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	4013      	ands	r3, r2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <find_volume+0x270>
 8006a68:	230d      	movs	r3, #13
 8006a6a:	e140      	b.n	8006cee <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6e:	3338      	adds	r3, #56	@ 0x38
 8006a70:	3311      	adds	r3, #17
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe f846 	bl	8004b04 <ld_word>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a82:	891b      	ldrh	r3, [r3, #8]
 8006a84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a86:	8992      	ldrh	r2, [r2, #12]
 8006a88:	0952      	lsrs	r2, r2, #5
 8006a8a:	b292      	uxth	r2, r2
 8006a8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a90:	fb01 f202 	mul.w	r2, r1, r2
 8006a94:	1a9b      	subs	r3, r3, r2
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <find_volume+0x2a8>
 8006a9c:	230d      	movs	r3, #13
 8006a9e:	e126      	b.n	8006cee <find_volume+0x4f2>
 8006aa0:	2000895c 	.word	0x2000895c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa6:	3338      	adds	r3, #56	@ 0x38
 8006aa8:	3313      	adds	r3, #19
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe f82a 	bl	8004b04 <ld_word>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <find_volume+0x2cc>
 8006aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006abc:	3338      	adds	r3, #56	@ 0x38
 8006abe:	3320      	adds	r3, #32
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fe f837 	bl	8004b34 <ld_dword>
 8006ac6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aca:	3338      	adds	r3, #56	@ 0x38
 8006acc:	330e      	adds	r3, #14
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe f818 	bl	8004b04 <ld_word>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006ad8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <find_volume+0x2e6>
 8006ade:	230d      	movs	r3, #13
 8006ae0:	e105      	b.n	8006cee <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006ae2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ae6:	4413      	add	r3, r2
 8006ae8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006aea:	8911      	ldrh	r1, [r2, #8]
 8006aec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006aee:	8992      	ldrh	r2, [r2, #12]
 8006af0:	0952      	lsrs	r2, r2, #5
 8006af2:	b292      	uxth	r2, r2
 8006af4:	fbb1 f2f2 	udiv	r2, r1, r2
 8006af8:	b292      	uxth	r2, r2
 8006afa:	4413      	add	r3, r2
 8006afc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d201      	bcs.n	8006b0a <find_volume+0x30e>
 8006b06:	230d      	movs	r3, #13
 8006b08:	e0f1      	b.n	8006cee <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006b0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b12:	8952      	ldrh	r2, [r2, #10]
 8006b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <find_volume+0x328>
 8006b20:	230d      	movs	r3, #13
 8006b22:	e0e4      	b.n	8006cee <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006b24:	2303      	movs	r3, #3
 8006b26:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d802      	bhi.n	8006b3a <find_volume+0x33e>
 8006b34:	2302      	movs	r3, #2
 8006b36:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d802      	bhi.n	8006b4a <find_volume+0x34e>
 8006b44:	2301      	movs	r3, #1
 8006b46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4c:	1c9a      	adds	r2, r3, #2
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b50:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b56:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006b58:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b5c:	441a      	add	r2, r3
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b60:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006b62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b66:	441a      	add	r2, r3
 8006b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006b6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d11e      	bne.n	8006bb2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	3338      	adds	r3, #56	@ 0x38
 8006b78:	332a      	adds	r3, #42	@ 0x2a
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fd ffc2 	bl	8004b04 <ld_word>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <find_volume+0x38e>
 8006b86:	230d      	movs	r3, #13
 8006b88:	e0b1      	b.n	8006cee <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8c:	891b      	ldrh	r3, [r3, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <find_volume+0x39a>
 8006b92:	230d      	movs	r3, #13
 8006b94:	e0ab      	b.n	8006cee <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b98:	3338      	adds	r3, #56	@ 0x38
 8006b9a:	332c      	adds	r3, #44	@ 0x2c
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fd ffc9 	bl	8004b34 <ld_dword>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bb0:	e01f      	b.n	8006bf2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb4:	891b      	ldrh	r3, [r3, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <find_volume+0x3c2>
 8006bba:	230d      	movs	r3, #13
 8006bbc:	e097      	b.n	8006cee <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc4:	441a      	add	r2, r3
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006bca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d103      	bne.n	8006bda <find_volume+0x3de>
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	e00a      	b.n	8006bf0 <find_volume+0x3f4>
 8006bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bdc:	69da      	ldr	r2, [r3, #28]
 8006bde:	4613      	mov	r3, r2
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	4413      	add	r3, r2
 8006be4:	085a      	lsrs	r2, r3, #1
 8006be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006bf0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf4:	6a1a      	ldr	r2, [r3, #32]
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf8:	899b      	ldrh	r3, [r3, #12]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bfe:	440b      	add	r3, r1
 8006c00:	3b01      	subs	r3, #1
 8006c02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006c04:	8989      	ldrh	r1, [r1, #12]
 8006c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d201      	bcs.n	8006c12 <find_volume+0x416>
 8006c0e:	230d      	movs	r3, #13
 8006c10:	e06d      	b.n	8006cee <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c14:	f04f 32ff 	mov.w	r2, #4294967295
 8006c18:	619a      	str	r2, [r3, #24]
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1c:	699a      	ldr	r2, [r3, #24]
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c20:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c24:	2280      	movs	r2, #128	@ 0x80
 8006c26:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006c28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d149      	bne.n	8006cc4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c32:	3338      	adds	r3, #56	@ 0x38
 8006c34:	3330      	adds	r3, #48	@ 0x30
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fd ff64 	bl	8004b04 <ld_word>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d140      	bne.n	8006cc4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c44:	3301      	adds	r3, #1
 8006c46:	4619      	mov	r1, r3
 8006c48:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006c4a:	f7fe fa0b 	bl	8005064 <move_window>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d137      	bne.n	8006cc4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c56:	2200      	movs	r2, #0
 8006c58:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5c:	3338      	adds	r3, #56	@ 0x38
 8006c5e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fd ff4e 	bl	8004b04 <ld_word>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d127      	bne.n	8006cc4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c76:	3338      	adds	r3, #56	@ 0x38
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fd ff5b 	bl	8004b34 <ld_dword>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf8 <find_volume+0x4fc>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d11e      	bne.n	8006cc4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c88:	3338      	adds	r3, #56	@ 0x38
 8006c8a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fd ff50 	bl	8004b34 <ld_dword>
 8006c94:	4603      	mov	r3, r0
 8006c96:	4a19      	ldr	r2, [pc, #100]	@ (8006cfc <find_volume+0x500>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d113      	bne.n	8006cc4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9e:	3338      	adds	r3, #56	@ 0x38
 8006ca0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fd ff45 	bl	8004b34 <ld_dword>
 8006caa:	4602      	mov	r2, r0
 8006cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cae:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb2:	3338      	adds	r3, #56	@ 0x38
 8006cb4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fd ff3b 	bl	8004b34 <ld_dword>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006cca:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8006d00 <find_volume+0x504>)
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006d00 <find_volume+0x504>)
 8006cd6:	801a      	strh	r2, [r3, #0]
 8006cd8:	4b09      	ldr	r3, [pc, #36]	@ (8006d00 <find_volume+0x504>)
 8006cda:	881a      	ldrh	r2, [r3, #0]
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cde:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce2:	4a08      	ldr	r2, [pc, #32]	@ (8006d04 <find_volume+0x508>)
 8006ce4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006ce6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006ce8:	f7fe f954 	bl	8004f94 <clear_lock>
#endif
	return FR_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3758      	adds	r7, #88	@ 0x58
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	41615252 	.word	0x41615252
 8006cfc:	61417272 	.word	0x61417272
 8006d00:	20008960 	.word	0x20008960
 8006d04:	20008984 	.word	0x20008984

08006d08 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006d12:	2309      	movs	r3, #9
 8006d14:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01c      	beq.n	8006d56 <validate+0x4e>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d018      	beq.n	8006d56 <validate+0x4e>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d013      	beq.n	8006d56 <validate+0x4e>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	889a      	ldrh	r2, [r3, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	88db      	ldrh	r3, [r3, #6]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d10c      	bne.n	8006d56 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	785b      	ldrb	r3, [r3, #1]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fd fe3e 	bl	80049c4 <disk_status>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <validate+0x4e>
			res = FR_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <validate+0x5a>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	e000      	b.n	8006d64 <validate+0x5c>
 8006d62:	2300      	movs	r3, #0
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	6013      	str	r3, [r2, #0]
	return res;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006d86:	f107 0310 	add.w	r3, r7, #16
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7ff fc9c 	bl	80066c8 <get_ldnumber>
 8006d90:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	da01      	bge.n	8006d9c <f_mount+0x28>
 8006d98:	230b      	movs	r3, #11
 8006d9a:	e02b      	b.n	8006df4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006d9c:	4a17      	ldr	r2, [pc, #92]	@ (8006dfc <f_mount+0x88>)
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d005      	beq.n	8006db8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006dac:	69b8      	ldr	r0, [r7, #24]
 8006dae:	f7fe f8f1 	bl	8004f94 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	490d      	ldr	r1, [pc, #52]	@ (8006dfc <f_mount+0x88>)
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <f_mount+0x66>
 8006dd4:	79fb      	ldrb	r3, [r7, #7]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d001      	beq.n	8006dde <f_mount+0x6a>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e00a      	b.n	8006df4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006dde:	f107 010c 	add.w	r1, r7, #12
 8006de2:	f107 0308 	add.w	r3, r7, #8
 8006de6:	2200      	movs	r2, #0
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7ff fd07 	bl	80067fc <find_volume>
 8006dee:	4603      	mov	r3, r0
 8006df0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	2000895c 	.word	0x2000895c

08006e00 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b09a      	sub	sp, #104	@ 0x68
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <f_open+0x18>
 8006e14:	2309      	movs	r3, #9
 8006e16:	e1b7      	b.n	8007188 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e1e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006e20:	79fa      	ldrb	r2, [r7, #7]
 8006e22:	f107 0114 	add.w	r1, r7, #20
 8006e26:	f107 0308 	add.w	r3, r7, #8
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff fce6 	bl	80067fc <find_volume>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006e36:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f040 819b 	bne.w	8007176 <f_open+0x376>
		dj.obj.fs = fs;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	f107 0318 	add.w	r3, r7, #24
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7ff fbc5 	bl	80065dc <follow_path>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006e58:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d118      	bne.n	8006e92 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006e60:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006e64:	b25b      	sxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	da03      	bge.n	8006e72 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006e6a:	2306      	movs	r3, #6
 8006e6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006e70:	e00f      	b.n	8006e92 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	bf8c      	ite	hi
 8006e78:	2301      	movhi	r3, #1
 8006e7a:	2300      	movls	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f107 0318 	add.w	r3, r7, #24
 8006e84:	4611      	mov	r1, r2
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fd ff3c 	bl	8004d04 <chk_lock>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006e92:	79fb      	ldrb	r3, [r7, #7]
 8006e94:	f003 031c 	and.w	r3, r3, #28
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d07f      	beq.n	8006f9c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006e9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d017      	beq.n	8006ed4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006ea4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d10e      	bne.n	8006eca <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006eac:	f7fd ff86 	bl	8004dbc <enq_lock>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d006      	beq.n	8006ec4 <f_open+0xc4>
 8006eb6:	f107 0318 	add.w	r3, r7, #24
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff f8de 	bl	800607c <dir_register>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	e000      	b.n	8006ec6 <f_open+0xc6>
 8006ec4:	2312      	movs	r3, #18
 8006ec6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	f043 0308 	orr.w	r3, r3, #8
 8006ed0:	71fb      	strb	r3, [r7, #7]
 8006ed2:	e010      	b.n	8006ef6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006ed4:	7fbb      	ldrb	r3, [r7, #30]
 8006ed6:	f003 0311 	and.w	r3, r3, #17
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <f_open+0xe6>
					res = FR_DENIED;
 8006ede:	2307      	movs	r3, #7
 8006ee0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006ee4:	e007      	b.n	8006ef6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <f_open+0xf6>
 8006ef0:	2308      	movs	r3, #8
 8006ef2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006ef6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d168      	bne.n	8006fd0 <f_open+0x1d0>
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	f003 0308 	and.w	r3, r3, #8
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d063      	beq.n	8006fd0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8006f08:	f7fd fcfe 	bl	8004908 <get_fattime>
 8006f0c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f10:	330e      	adds	r3, #14
 8006f12:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fd fe4b 	bl	8004bb0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1c:	3316      	adds	r3, #22
 8006f1e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fd fe45 	bl	8004bb0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f28:	330b      	adds	r3, #11
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f32:	4611      	mov	r1, r2
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fe fe1a 	bl	8005b6e <ld_clust>
 8006f3a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f40:	2200      	movs	r2, #0
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fe fe32 	bl	8005bac <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4a:	331c      	adds	r3, #28
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fd fe2e 	bl	8004bb0 <st_dword>
					fs->wflag = 1;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2201      	movs	r2, #1
 8006f58:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d037      	beq.n	8006fd0 <f_open+0x1d0>
						dw = fs->winsect;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f64:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006f66:	f107 0318 	add.w	r3, r7, #24
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fe fb22 	bl	80055b8 <remove_chain>
 8006f74:	4603      	mov	r3, r0
 8006f76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8006f7a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d126      	bne.n	8006fd0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe f86c 	bl	8005064 <move_window>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f96:	3a01      	subs	r2, #1
 8006f98:	615a      	str	r2, [r3, #20]
 8006f9a:	e019      	b.n	8006fd0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006f9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d115      	bne.n	8006fd0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006fa4:	7fbb      	ldrb	r3, [r7, #30]
 8006fa6:	f003 0310 	and.w	r3, r3, #16
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <f_open+0x1b6>
					res = FR_NO_FILE;
 8006fae:	2304      	movs	r3, #4
 8006fb0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006fb4:	e00c      	b.n	8006fd0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006fb6:	79fb      	ldrb	r3, [r7, #7]
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d007      	beq.n	8006fd0 <f_open+0x1d0>
 8006fc0:	7fbb      	ldrb	r3, [r7, #30]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <f_open+0x1d0>
						res = FR_DENIED;
 8006fca:	2307      	movs	r3, #7
 8006fcc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006fd0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d126      	bne.n	8007026 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006fe2:	79fb      	ldrb	r3, [r7, #7]
 8006fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fe8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006ff2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ff8:	79fb      	ldrb	r3, [r7, #7]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	bf8c      	ite	hi
 8006ffe:	2301      	movhi	r3, #1
 8007000:	2300      	movls	r3, #0
 8007002:	b2db      	uxtb	r3, r3
 8007004:	461a      	mov	r2, r3
 8007006:	f107 0318 	add.w	r3, r7, #24
 800700a:	4611      	mov	r1, r2
 800700c:	4618      	mov	r0, r3
 800700e:	f7fd fef7 	bl	8004e00 <inc_lock>
 8007012:	4602      	mov	r2, r0
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d102      	bne.n	8007026 <f_open+0x226>
 8007020:	2302      	movs	r3, #2
 8007022:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007026:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800702a:	2b00      	cmp	r3, #0
 800702c:	f040 80a3 	bne.w	8007176 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007034:	4611      	mov	r1, r2
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fd99 	bl	8005b6e <ld_clust>
 800703c:	4602      	mov	r2, r0
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007044:	331c      	adds	r3, #28
 8007046:	4618      	mov	r0, r3
 8007048:	f7fd fd74 	bl	8004b34 <ld_dword>
 800704c:	4602      	mov	r2, r0
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	88da      	ldrh	r2, [r3, #6]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	79fa      	ldrb	r2, [r7, #7]
 800706a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3330      	adds	r3, #48	@ 0x30
 8007082:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007086:	2100      	movs	r1, #0
 8007088:	4618      	mov	r0, r3
 800708a:	f7fd fdde 	bl	8004c4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	f003 0320 	and.w	r3, r3, #32
 8007094:	2b00      	cmp	r3, #0
 8007096:	d06e      	beq.n	8007176 <f_open+0x376>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d06a      	beq.n	8007176 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	895b      	ldrh	r3, [r3, #10]
 80070ac:	461a      	mov	r2, r3
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	899b      	ldrh	r3, [r3, #12]
 80070b2:	fb02 f303 	mul.w	r3, r2, r3
 80070b6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070c4:	e016      	b.n	80070f4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe f887 	bl	80051de <get_fat>
 80070d0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80070d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d802      	bhi.n	80070de <f_open+0x2de>
 80070d8:	2302      	movs	r3, #2
 80070da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80070de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e4:	d102      	bne.n	80070ec <f_open+0x2ec>
 80070e6:	2301      	movs	r3, #1
 80070e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80070ec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80070ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d103      	bne.n	8007104 <f_open+0x304>
 80070fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80070fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007100:	429a      	cmp	r2, r3
 8007102:	d8e0      	bhi.n	80070c6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007108:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800710a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800710e:	2b00      	cmp	r3, #0
 8007110:	d131      	bne.n	8007176 <f_open+0x376>
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	899b      	ldrh	r3, [r3, #12]
 8007116:	461a      	mov	r2, r3
 8007118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800711a:	fbb3 f1f2 	udiv	r1, r3, r2
 800711e:	fb01 f202 	mul.w	r2, r1, r2
 8007122:	1a9b      	subs	r3, r3, r2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d026      	beq.n	8007176 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800712c:	4618      	mov	r0, r3
 800712e:	f7fe f837 	bl	80051a0 <clust2sect>
 8007132:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d103      	bne.n	8007142 <f_open+0x342>
						res = FR_INT_ERR;
 800713a:	2302      	movs	r3, #2
 800713c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007140:	e019      	b.n	8007176 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	899b      	ldrh	r3, [r3, #12]
 8007146:	461a      	mov	r2, r3
 8007148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800714a:	fbb3 f2f2 	udiv	r2, r3, r2
 800714e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007150:	441a      	add	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	7858      	ldrb	r0, [r3, #1]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6a1a      	ldr	r2, [r3, #32]
 8007164:	2301      	movs	r3, #1
 8007166:	f7fd fc6f 	bl	8004a48 <disk_read>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <f_open+0x376>
 8007170:	2301      	movs	r3, #1
 8007172:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007176:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800717a:	2b00      	cmp	r3, #0
 800717c:	d002      	beq.n	8007184 <f_open+0x384>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007184:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007188:	4618      	mov	r0, r3
 800718a:	3768      	adds	r7, #104	@ 0x68
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08e      	sub	sp, #56	@ 0x38
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f107 0214 	add.w	r2, r7, #20
 80071ae:	4611      	mov	r1, r2
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff fda9 	bl	8006d08 <validate>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80071bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d107      	bne.n	80071d4 <f_read+0x44>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	7d5b      	ldrb	r3, [r3, #21]
 80071c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80071cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <f_read+0x4a>
 80071d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80071d8:	e135      	b.n	8007446 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	7d1b      	ldrb	r3, [r3, #20]
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <f_read+0x5a>
 80071e6:	2307      	movs	r3, #7
 80071e8:	e12d      	b.n	8007446 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	f240 811e 	bls.w	800743c <f_read+0x2ac>
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007204:	e11a      	b.n	800743c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	8992      	ldrh	r2, [r2, #12]
 800720e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007212:	fb01 f202 	mul.w	r2, r1, r2
 8007216:	1a9b      	subs	r3, r3, r2
 8007218:	2b00      	cmp	r3, #0
 800721a:	f040 80d5 	bne.w	80073c8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	8992      	ldrh	r2, [r2, #12]
 8007226:	fbb3 f3f2 	udiv	r3, r3, r2
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	8952      	ldrh	r2, [r2, #10]
 800722e:	3a01      	subs	r2, #1
 8007230:	4013      	ands	r3, r2
 8007232:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d12f      	bne.n	800729a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d103      	bne.n	800724a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	633b      	str	r3, [r7, #48]	@ 0x30
 8007248:	e013      	b.n	8007272 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724e:	2b00      	cmp	r3, #0
 8007250:	d007      	beq.n	8007262 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	4619      	mov	r1, r3
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f7fe faaa 	bl	80057b2 <clmt_clust>
 800725e:	6338      	str	r0, [r7, #48]	@ 0x30
 8007260:	e007      	b.n	8007272 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	4619      	mov	r1, r3
 800726a:	4610      	mov	r0, r2
 800726c:	f7fd ffb7 	bl	80051de <get_fat>
 8007270:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	2b01      	cmp	r3, #1
 8007276:	d804      	bhi.n	8007282 <f_read+0xf2>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2202      	movs	r2, #2
 800727c:	755a      	strb	r2, [r3, #21]
 800727e:	2302      	movs	r3, #2
 8007280:	e0e1      	b.n	8007446 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007288:	d104      	bne.n	8007294 <f_read+0x104>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2201      	movs	r2, #1
 800728e:	755a      	strb	r2, [r3, #21]
 8007290:	2301      	movs	r3, #1
 8007292:	e0d8      	b.n	8007446 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007298:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	4619      	mov	r1, r3
 80072a2:	4610      	mov	r0, r2
 80072a4:	f7fd ff7c 	bl	80051a0 <clust2sect>
 80072a8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d104      	bne.n	80072ba <f_read+0x12a>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2202      	movs	r2, #2
 80072b4:	755a      	strb	r2, [r3, #21]
 80072b6:	2302      	movs	r3, #2
 80072b8:	e0c5      	b.n	8007446 <f_read+0x2b6>
			sect += csect;
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	4413      	add	r3, r2
 80072c0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	899b      	ldrh	r3, [r3, #12]
 80072c6:	461a      	mov	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80072ce:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80072d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d041      	beq.n	800735a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072da:	4413      	add	r3, r2
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	8952      	ldrh	r2, [r2, #10]
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d905      	bls.n	80072f0 <f_read+0x160>
					cc = fs->csize - csect;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	895b      	ldrh	r3, [r3, #10]
 80072e8:	461a      	mov	r2, r3
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	7858      	ldrb	r0, [r3, #1]
 80072f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072fa:	f7fd fba5 	bl	8004a48 <disk_read>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d004      	beq.n	800730e <f_read+0x17e>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2201      	movs	r2, #1
 8007308:	755a      	strb	r2, [r3, #21]
 800730a:	2301      	movs	r3, #1
 800730c:	e09b      	b.n	8007446 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	7d1b      	ldrb	r3, [r3, #20]
 8007312:	b25b      	sxtb	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	da18      	bge.n	800734a <f_read+0x1ba>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6a1a      	ldr	r2, [r3, #32]
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007322:	429a      	cmp	r2, r3
 8007324:	d911      	bls.n	800734a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6a1a      	ldr	r2, [r3, #32]
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	8992      	ldrh	r2, [r2, #12]
 8007332:	fb02 f303 	mul.w	r3, r2, r3
 8007336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007338:	18d0      	adds	r0, r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	899b      	ldrh	r3, [r3, #12]
 8007344:	461a      	mov	r2, r3
 8007346:	f7fd fc5f 	bl	8004c08 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	899b      	ldrh	r3, [r3, #12]
 800734e:	461a      	mov	r2, r3
 8007350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007352:	fb02 f303 	mul.w	r3, r2, r3
 8007356:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007358:	e05c      	b.n	8007414 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	429a      	cmp	r2, r3
 8007362:	d02e      	beq.n	80073c2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	7d1b      	ldrb	r3, [r3, #20]
 8007368:	b25b      	sxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	da18      	bge.n	80073a0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	7858      	ldrb	r0, [r3, #1]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6a1a      	ldr	r2, [r3, #32]
 800737c:	2301      	movs	r3, #1
 800737e:	f7fd fb83 	bl	8004a88 <disk_write>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d004      	beq.n	8007392 <f_read+0x202>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2201      	movs	r2, #1
 800738c:	755a      	strb	r2, [r3, #21]
 800738e:	2301      	movs	r3, #1
 8007390:	e059      	b.n	8007446 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	7d1b      	ldrb	r3, [r3, #20]
 8007396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800739a:	b2da      	uxtb	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	7858      	ldrb	r0, [r3, #1]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80073aa:	2301      	movs	r3, #1
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	f7fd fb4b 	bl	8004a48 <disk_read>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d004      	beq.n	80073c2 <f_read+0x232>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2201      	movs	r2, #1
 80073bc:	755a      	strb	r2, [r3, #21]
 80073be:	2301      	movs	r3, #1
 80073c0:	e041      	b.n	8007446 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	899b      	ldrh	r3, [r3, #12]
 80073cc:	4618      	mov	r0, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	8992      	ldrh	r2, [r2, #12]
 80073d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80073da:	fb01 f202 	mul.w	r2, r1, r2
 80073de:	1a9b      	subs	r3, r3, r2
 80073e0:	1ac3      	subs	r3, r0, r3
 80073e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80073e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d901      	bls.n	80073f0 <f_read+0x260>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	8992      	ldrh	r2, [r2, #12]
 80073fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8007402:	fb00 f202 	mul.w	r2, r0, r2
 8007406:	1a9b      	subs	r3, r3, r2
 8007408:	440b      	add	r3, r1
 800740a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800740c:	4619      	mov	r1, r3
 800740e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007410:	f7fd fbfa 	bl	8004c08 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007418:	4413      	add	r3, r2
 800741a:	627b      	str	r3, [r7, #36]	@ 0x24
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	699a      	ldr	r2, [r3, #24]
 8007420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007422:	441a      	add	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	619a      	str	r2, [r3, #24]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742e:	441a      	add	r2, r3
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f47f aee1 	bne.w	8007206 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3738      	adds	r7, #56	@ 0x38
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b086      	sub	sp, #24
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f107 0208 	add.w	r2, r7, #8
 800745c:	4611      	mov	r1, r2
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff fc52 	bl	8006d08 <validate>
 8007464:	4603      	mov	r3, r0
 8007466:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007468:	7dfb      	ldrb	r3, [r7, #23]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d168      	bne.n	8007540 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	7d1b      	ldrb	r3, [r3, #20]
 8007472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	d062      	beq.n	8007540 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	7d1b      	ldrb	r3, [r3, #20]
 800747e:	b25b      	sxtb	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	da15      	bge.n	80074b0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	7858      	ldrb	r0, [r3, #1]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a1a      	ldr	r2, [r3, #32]
 8007492:	2301      	movs	r3, #1
 8007494:	f7fd faf8 	bl	8004a88 <disk_write>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <f_sync+0x54>
 800749e:	2301      	movs	r3, #1
 80074a0:	e04f      	b.n	8007542 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	7d1b      	ldrb	r3, [r3, #20]
 80074a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80074b0:	f7fd fa2a 	bl	8004908 <get_fattime>
 80074b4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074bc:	4619      	mov	r1, r3
 80074be:	4610      	mov	r0, r2
 80074c0:	f7fd fdd0 	bl	8005064 <move_window>
 80074c4:	4603      	mov	r3, r0
 80074c6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d138      	bne.n	8007540 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	330b      	adds	r3, #11
 80074d8:	781a      	ldrb	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	330b      	adds	r3, #11
 80074de:	f042 0220 	orr.w	r2, r2, #32
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	461a      	mov	r2, r3
 80074f0:	68f9      	ldr	r1, [r7, #12]
 80074f2:	f7fe fb5b 	bl	8005bac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f103 021c 	add.w	r2, r3, #28
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	4619      	mov	r1, r3
 8007502:	4610      	mov	r0, r2
 8007504:	f7fd fb54 	bl	8004bb0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3316      	adds	r3, #22
 800750c:	6939      	ldr	r1, [r7, #16]
 800750e:	4618      	mov	r0, r3
 8007510:	f7fd fb4e 	bl	8004bb0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3312      	adds	r3, #18
 8007518:	2100      	movs	r1, #0
 800751a:	4618      	mov	r0, r3
 800751c:	f7fd fb2d 	bl	8004b7a <st_word>
					fs->wflag = 1;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2201      	movs	r2, #1
 8007524:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	4618      	mov	r0, r3
 800752a:	f7fd fdc9 	bl	80050c0 <sync_fs>
 800752e:	4603      	mov	r3, r0
 8007530:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	7d1b      	ldrb	r3, [r3, #20]
 8007536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800753a:	b2da      	uxtb	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007540:	7dfb      	ldrb	r3, [r7, #23]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7ff ff7b 	bl	800744e <f_sync>
 8007558:	4603      	mov	r3, r0
 800755a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d118      	bne.n	8007594 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f107 0208 	add.w	r2, r7, #8
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff fbcc 	bl	8006d08 <validate>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10c      	bne.n	8007594 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	4618      	mov	r0, r3
 8007580:	f7fd fccc 	bl	8004f1c <dec_lock>
 8007584:	4603      	mov	r3, r0
 8007586:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d102      	bne.n	8007594 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007594:	7bfb      	ldrb	r3, [r7, #15]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
	...

080075a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	4613      	mov	r3, r2
 80075ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80075ae:	2301      	movs	r3, #1
 80075b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80075b6:	4b1f      	ldr	r3, [pc, #124]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075b8:	7a5b      	ldrb	r3, [r3, #9]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d131      	bne.n	8007624 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80075c0:	4b1c      	ldr	r3, [pc, #112]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075c2:	7a5b      	ldrb	r3, [r3, #9]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	461a      	mov	r2, r3
 80075c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075ca:	2100      	movs	r1, #0
 80075cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80075ce:	4b19      	ldr	r3, [pc, #100]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075d0:	7a5b      	ldrb	r3, [r3, #9]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	4a17      	ldr	r2, [pc, #92]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80075de:	4b15      	ldr	r3, [pc, #84]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075e0:	7a5b      	ldrb	r3, [r3, #9]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	4b13      	ldr	r3, [pc, #76]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075e8:	4413      	add	r3, r2
 80075ea:	79fa      	ldrb	r2, [r7, #7]
 80075ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80075ee:	4b11      	ldr	r3, [pc, #68]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075f0:	7a5b      	ldrb	r3, [r3, #9]
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	b2d1      	uxtb	r1, r2
 80075f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075fa:	7251      	strb	r1, [r2, #9]
 80075fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80075fe:	7dbb      	ldrb	r3, [r7, #22]
 8007600:	3330      	adds	r3, #48	@ 0x30
 8007602:	b2da      	uxtb	r2, r3
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	3301      	adds	r3, #1
 800760c:	223a      	movs	r2, #58	@ 0x3a
 800760e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	3302      	adds	r3, #2
 8007614:	222f      	movs	r2, #47	@ 0x2f
 8007616:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	3303      	adds	r3, #3
 800761c:	2200      	movs	r2, #0
 800761e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007624:	7dfb      	ldrb	r3, [r7, #23]
}
 8007626:	4618      	mov	r0, r3
 8007628:	371c      	adds	r7, #28
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	20008b84 	.word	0x20008b84

08007638 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007642:	2200      	movs	r2, #0
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff ffaa 	bl	80075a0 <FATFS_LinkDriverEx>
 800764c:	4603      	mov	r3, r0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	4603      	mov	r3, r0
 8007660:	6039      	str	r1, [r7, #0]
 8007662:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007664:	88fb      	ldrh	r3, [r7, #6]
 8007666:	2b7f      	cmp	r3, #127	@ 0x7f
 8007668:	d802      	bhi.n	8007670 <ff_convert+0x18>
		c = chr;
 800766a:	88fb      	ldrh	r3, [r7, #6]
 800766c:	81fb      	strh	r3, [r7, #14]
 800766e:	e025      	b.n	80076bc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00b      	beq.n	800768e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007676:	88fb      	ldrh	r3, [r7, #6]
 8007678:	2bff      	cmp	r3, #255	@ 0xff
 800767a:	d805      	bhi.n	8007688 <ff_convert+0x30>
 800767c:	88fb      	ldrh	r3, [r7, #6]
 800767e:	3b80      	subs	r3, #128	@ 0x80
 8007680:	4a12      	ldr	r2, [pc, #72]	@ (80076cc <ff_convert+0x74>)
 8007682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007686:	e000      	b.n	800768a <ff_convert+0x32>
 8007688:	2300      	movs	r3, #0
 800768a:	81fb      	strh	r3, [r7, #14]
 800768c:	e016      	b.n	80076bc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800768e:	2300      	movs	r3, #0
 8007690:	81fb      	strh	r3, [r7, #14]
 8007692:	e009      	b.n	80076a8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007694:	89fb      	ldrh	r3, [r7, #14]
 8007696:	4a0d      	ldr	r2, [pc, #52]	@ (80076cc <ff_convert+0x74>)
 8007698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800769c:	88fa      	ldrh	r2, [r7, #6]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d006      	beq.n	80076b0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80076a2:	89fb      	ldrh	r3, [r7, #14]
 80076a4:	3301      	adds	r3, #1
 80076a6:	81fb      	strh	r3, [r7, #14]
 80076a8:	89fb      	ldrh	r3, [r7, #14]
 80076aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80076ac:	d9f2      	bls.n	8007694 <ff_convert+0x3c>
 80076ae:	e000      	b.n	80076b2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80076b0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80076b2:	89fb      	ldrh	r3, [r7, #14]
 80076b4:	3380      	adds	r3, #128	@ 0x80
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80076bc:	89fb      	ldrh	r3, [r7, #14]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	080079d0 	.word	0x080079d0

080076d0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b087      	sub	sp, #28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	4603      	mov	r3, r0
 80076d8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80076da:	88fb      	ldrh	r3, [r7, #6]
 80076dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e0:	d201      	bcs.n	80076e6 <ff_wtoupper+0x16>
 80076e2:	4b3e      	ldr	r3, [pc, #248]	@ (80077dc <ff_wtoupper+0x10c>)
 80076e4:	e000      	b.n	80076e8 <ff_wtoupper+0x18>
 80076e6:	4b3e      	ldr	r3, [pc, #248]	@ (80077e0 <ff_wtoupper+0x110>)
 80076e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	1c9a      	adds	r2, r3, #2
 80076ee:	617a      	str	r2, [r7, #20]
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80076f4:	8a7b      	ldrh	r3, [r7, #18]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d068      	beq.n	80077cc <ff_wtoupper+0xfc>
 80076fa:	88fa      	ldrh	r2, [r7, #6]
 80076fc:	8a7b      	ldrh	r3, [r7, #18]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d364      	bcc.n	80077cc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	1c9a      	adds	r2, r3, #2
 8007706:	617a      	str	r2, [r7, #20]
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	823b      	strh	r3, [r7, #16]
 800770c:	8a3b      	ldrh	r3, [r7, #16]
 800770e:	0a1b      	lsrs	r3, r3, #8
 8007710:	81fb      	strh	r3, [r7, #14]
 8007712:	8a3b      	ldrh	r3, [r7, #16]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007718:	88fa      	ldrh	r2, [r7, #6]
 800771a:	8a79      	ldrh	r1, [r7, #18]
 800771c:	8a3b      	ldrh	r3, [r7, #16]
 800771e:	440b      	add	r3, r1
 8007720:	429a      	cmp	r2, r3
 8007722:	da49      	bge.n	80077b8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007724:	89fb      	ldrh	r3, [r7, #14]
 8007726:	2b08      	cmp	r3, #8
 8007728:	d84f      	bhi.n	80077ca <ff_wtoupper+0xfa>
 800772a:	a201      	add	r2, pc, #4	@ (adr r2, 8007730 <ff_wtoupper+0x60>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007755 	.word	0x08007755
 8007734:	08007767 	.word	0x08007767
 8007738:	0800777d 	.word	0x0800777d
 800773c:	08007785 	.word	0x08007785
 8007740:	0800778d 	.word	0x0800778d
 8007744:	08007795 	.word	0x08007795
 8007748:	0800779d 	.word	0x0800779d
 800774c:	080077a5 	.word	0x080077a5
 8007750:	080077ad 	.word	0x080077ad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007754:	88fa      	ldrh	r2, [r7, #6]
 8007756:	8a7b      	ldrh	r3, [r7, #18]
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	005b      	lsls	r3, r3, #1
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	4413      	add	r3, r2
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	80fb      	strh	r3, [r7, #6]
 8007764:	e027      	b.n	80077b6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007766:	88fa      	ldrh	r2, [r7, #6]
 8007768:	8a7b      	ldrh	r3, [r7, #18]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	b29b      	uxth	r3, r3
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	b29b      	uxth	r3, r3
 8007774:	88fa      	ldrh	r2, [r7, #6]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	80fb      	strh	r3, [r7, #6]
 800777a:	e01c      	b.n	80077b6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800777c:	88fb      	ldrh	r3, [r7, #6]
 800777e:	3b10      	subs	r3, #16
 8007780:	80fb      	strh	r3, [r7, #6]
 8007782:	e018      	b.n	80077b6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	3b20      	subs	r3, #32
 8007788:	80fb      	strh	r3, [r7, #6]
 800778a:	e014      	b.n	80077b6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800778c:	88fb      	ldrh	r3, [r7, #6]
 800778e:	3b30      	subs	r3, #48	@ 0x30
 8007790:	80fb      	strh	r3, [r7, #6]
 8007792:	e010      	b.n	80077b6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007794:	88fb      	ldrh	r3, [r7, #6]
 8007796:	3b1a      	subs	r3, #26
 8007798:	80fb      	strh	r3, [r7, #6]
 800779a:	e00c      	b.n	80077b6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800779c:	88fb      	ldrh	r3, [r7, #6]
 800779e:	3308      	adds	r3, #8
 80077a0:	80fb      	strh	r3, [r7, #6]
 80077a2:	e008      	b.n	80077b6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	3b50      	subs	r3, #80	@ 0x50
 80077a8:	80fb      	strh	r3, [r7, #6]
 80077aa:	e004      	b.n	80077b6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80077ac:	88fb      	ldrh	r3, [r7, #6]
 80077ae:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80077b2:	80fb      	strh	r3, [r7, #6]
 80077b4:	bf00      	nop
			}
			break;
 80077b6:	e008      	b.n	80077ca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80077b8:	89fb      	ldrh	r3, [r7, #14]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d195      	bne.n	80076ea <ff_wtoupper+0x1a>
 80077be:	8a3b      	ldrh	r3, [r7, #16]
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	4413      	add	r3, r2
 80077c6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80077c8:	e78f      	b.n	80076ea <ff_wtoupper+0x1a>
			break;
 80077ca:	bf00      	nop
	}

	return chr;
 80077cc:	88fb      	ldrh	r3, [r7, #6]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	08007ad0 	.word	0x08007ad0
 80077e0:	08007cc4 	.word	0x08007cc4

080077e4 <memset>:
 80077e4:	4402      	add	r2, r0
 80077e6:	4603      	mov	r3, r0
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d100      	bne.n	80077ee <memset+0xa>
 80077ec:	4770      	bx	lr
 80077ee:	f803 1b01 	strb.w	r1, [r3], #1
 80077f2:	e7f9      	b.n	80077e8 <memset+0x4>

080077f4 <__libc_init_array>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	4d0d      	ldr	r5, [pc, #52]	@ (800782c <__libc_init_array+0x38>)
 80077f8:	4c0d      	ldr	r4, [pc, #52]	@ (8007830 <__libc_init_array+0x3c>)
 80077fa:	1b64      	subs	r4, r4, r5
 80077fc:	10a4      	asrs	r4, r4, #2
 80077fe:	2600      	movs	r6, #0
 8007800:	42a6      	cmp	r6, r4
 8007802:	d109      	bne.n	8007818 <__libc_init_array+0x24>
 8007804:	4d0b      	ldr	r5, [pc, #44]	@ (8007834 <__libc_init_array+0x40>)
 8007806:	4c0c      	ldr	r4, [pc, #48]	@ (8007838 <__libc_init_array+0x44>)
 8007808:	f000 f818 	bl	800783c <_init>
 800780c:	1b64      	subs	r4, r4, r5
 800780e:	10a4      	asrs	r4, r4, #2
 8007810:	2600      	movs	r6, #0
 8007812:	42a6      	cmp	r6, r4
 8007814:	d105      	bne.n	8007822 <__libc_init_array+0x2e>
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	f855 3b04 	ldr.w	r3, [r5], #4
 800781c:	4798      	blx	r3
 800781e:	3601      	adds	r6, #1
 8007820:	e7ee      	b.n	8007800 <__libc_init_array+0xc>
 8007822:	f855 3b04 	ldr.w	r3, [r5], #4
 8007826:	4798      	blx	r3
 8007828:	3601      	adds	r6, #1
 800782a:	e7f2      	b.n	8007812 <__libc_init_array+0x1e>
 800782c:	08007d88 	.word	0x08007d88
 8007830:	08007d88 	.word	0x08007d88
 8007834:	08007d88 	.word	0x08007d88
 8007838:	08007d8c 	.word	0x08007d8c

0800783c <_init>:
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	bf00      	nop
 8007840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007842:	bc08      	pop	{r3}
 8007844:	469e      	mov	lr, r3
 8007846:	4770      	bx	lr

08007848 <_fini>:
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784a:	bf00      	nop
 800784c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784e:	bc08      	pop	{r3}
 8007850:	469e      	mov	lr, r3
 8007852:	4770      	bx	lr
