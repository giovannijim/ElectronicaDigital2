
ProbandoMenu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004568  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800472c  0800472c  0000572c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004744  08004744  00006028  2**0
                  CONTENTS
  4 .ARM          00000008  08004744  08004744  00005744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800474c  0800474c  00006028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800474c  0800474c  0000574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004750  08004750  00005750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08004754  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000028  0800477c  00006028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  0800477c  00006130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d389  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002519  00000000  00000000  000133e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00015900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000894  00000000  00000000  00016430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022956  00000000  00000000  00016cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa8e  00000000  00000000  0003961a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd0a3  00000000  00000000  000490a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011614b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca4  00000000  00000000  00116190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00118e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000028 	.word	0x20000028
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004714 	.word	0x08004714

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	08004714 	.word	0x08004714

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2140      	movs	r1, #64	@ 0x40
 80004fc:	4803      	ldr	r0, [pc, #12]	@ (800050c <SELECT+0x18>)
 80004fe:	f001 fed1 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000502:	2001      	movs	r0, #1
 8000504:	f001 fb66 	bl	8001bd4 <HAL_Delay>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40020400 	.word	0x40020400

08000510 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2140      	movs	r1, #64	@ 0x40
 8000518:	4803      	ldr	r0, [pc, #12]	@ (8000528 <DESELECT+0x18>)
 800051a:	f001 fec3 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f001 fb58 	bl	8001bd4 <HAL_Delay>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40020400 	.word	0x40020400

0800052c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000536:	bf00      	nop
 8000538:	4b08      	ldr	r3, [pc, #32]	@ (800055c <SPI_TxByte+0x30>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	f003 0302 	and.w	r3, r3, #2
 8000542:	2b02      	cmp	r3, #2
 8000544:	d1f8      	bne.n	8000538 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000546:	1df9      	adds	r1, r7, #7
 8000548:	2364      	movs	r3, #100	@ 0x64
 800054a:	2201      	movs	r2, #1
 800054c:	4803      	ldr	r0, [pc, #12]	@ (800055c <SPI_TxByte+0x30>)
 800054e:	f002 fcae 	bl	8002eae <HAL_SPI_Transmit>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2000004c 	.word	0x2000004c

08000560 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800056c:	bf00      	nop
 800056e:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <SPI_TxBuffer+0x30>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	f003 0302 	and.w	r3, r3, #2
 8000578:	2b02      	cmp	r3, #2
 800057a:	d1f8      	bne.n	800056e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800057c:	887a      	ldrh	r2, [r7, #2]
 800057e:	2364      	movs	r3, #100	@ 0x64
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	4803      	ldr	r0, [pc, #12]	@ (8000590 <SPI_TxBuffer+0x30>)
 8000584:	f002 fc93 	bl	8002eae <HAL_SPI_Transmit>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000004c 	.word	0x2000004c

08000594 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800059a:	23ff      	movs	r3, #255	@ 0xff
 800059c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800059e:	bf00      	nop
 80005a0:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <SPI_RxByte+0x34>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	f003 0302 	and.w	r3, r3, #2
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d1f8      	bne.n	80005a0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005ae:	1dba      	adds	r2, r7, #6
 80005b0:	1df9      	adds	r1, r7, #7
 80005b2:	2364      	movs	r3, #100	@ 0x64
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <SPI_RxByte+0x34>)
 80005ba:	f002 fdbb 	bl	8003134 <HAL_SPI_TransmitReceive>

	return data;
 80005be:	79bb      	ldrb	r3, [r7, #6]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000004c 	.word	0x2000004c

080005cc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005d4:	f7ff ffde 	bl	8000594 <SPI_RxByte>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	701a      	strb	r2, [r3, #0]
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <SD_ReadyWait+0x30>)
 80005f0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005f4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005f6:	f7ff ffcd 	bl	8000594 <SPI_RxByte>
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2bff      	cmp	r3, #255	@ 0xff
 8000602:	d003      	beq.n	800060c <SD_ReadyWait+0x24>
 8000604:	4b04      	ldr	r3, [pc, #16]	@ (8000618 <SD_ReadyWait+0x30>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d1f4      	bne.n	80005f6 <SD_ReadyWait+0xe>

	return res;
 800060c:	79fb      	ldrb	r3, [r7, #7]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000046 	.word	0x20000046

0800061c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000622:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000626:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000628:	f7ff ff72 	bl	8000510 <DESELECT>
	for(int i = 0; i < 10; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	e005      	b.n	800063e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000632:	20ff      	movs	r0, #255	@ 0xff
 8000634:	f7ff ff7a 	bl	800052c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	3301      	adds	r3, #1
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	2b09      	cmp	r3, #9
 8000642:	ddf6      	ble.n	8000632 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000644:	f7ff ff56 	bl	80004f4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000648:	2340      	movs	r3, #64	@ 0x40
 800064a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800065c:	2395      	movs	r3, #149	@ 0x95
 800065e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000660:	463b      	mov	r3, r7
 8000662:	2106      	movs	r1, #6
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff7b 	bl	8000560 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800066a:	e002      	b.n	8000672 <SD_PowerOn+0x56>
	{
		cnt--;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3b01      	subs	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000672:	f7ff ff8f 	bl	8000594 <SPI_RxByte>
 8000676:	4603      	mov	r3, r0
 8000678:	2b01      	cmp	r3, #1
 800067a:	d002      	beq.n	8000682 <SD_PowerOn+0x66>
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1f4      	bne.n	800066c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000682:	f7ff ff45 	bl	8000510 <DESELECT>
	SPI_TxByte(0XFF);
 8000686:	20ff      	movs	r0, #255	@ 0xff
 8000688:	f7ff ff50 	bl	800052c <SPI_TxByte>

	PowerFlag = 1;
 800068c:	4b03      	ldr	r3, [pc, #12]	@ (800069c <SD_PowerOn+0x80>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000049 	.word	0x20000049

080006a0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80006a4:	4b03      	ldr	r3, [pc, #12]	@ (80006b4 <SD_PowerOff+0x14>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	20000049 	.word	0x20000049

080006b8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
	return PowerFlag;
 80006bc:	4b03      	ldr	r3, [pc, #12]	@ (80006cc <SD_CheckPower+0x14>)
 80006be:	781b      	ldrb	r3, [r3, #0]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000049 	.word	0x20000049

080006d0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <SD_RxDataBlock+0x58>)
 80006dc:	22c8      	movs	r2, #200	@ 0xc8
 80006de:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006e0:	f7ff ff58 	bl	8000594 <SPI_RxByte>
 80006e4:	4603      	mov	r3, r0
 80006e6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	2bff      	cmp	r3, #255	@ 0xff
 80006ec:	d103      	bne.n	80006f6 <SD_RxDataBlock+0x26>
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <SD_RxDataBlock+0x58>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f4      	bne.n	80006e0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2bfe      	cmp	r3, #254	@ 0xfe
 80006fa:	d001      	beq.n	8000700 <SD_RxDataBlock+0x30>
 80006fc:	2300      	movs	r3, #0
 80006fe:	e00f      	b.n	8000720 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	607a      	str	r2, [r7, #4]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff60 	bl	80005cc <SPI_RxBytePtr>
	} while(len--);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	1e5a      	subs	r2, r3, #1
 8000710:	603a      	str	r2, [r7, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1f4      	bne.n	8000700 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000716:	f7ff ff3d 	bl	8000594 <SPI_RxByte>
	SPI_RxByte();
 800071a:	f7ff ff3b 	bl	8000594 <SPI_RxByte>

	return TRUE;
 800071e:	2301      	movs	r3, #1
}
 8000720:	4618      	mov	r0, r3
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000044 	.word	0x20000044

0800072c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800073c:	f7ff ff54 	bl	80005e8 <SD_ReadyWait>
 8000740:	4603      	mov	r3, r0
 8000742:	2bff      	cmp	r3, #255	@ 0xff
 8000744:	d001      	beq.n	800074a <SD_TxDataBlock+0x1e>
 8000746:	2300      	movs	r3, #0
 8000748:	e02f      	b.n	80007aa <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800074a:	78fb      	ldrb	r3, [r7, #3]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff feed 	bl	800052c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	2bfd      	cmp	r3, #253	@ 0xfd
 8000756:	d020      	beq.n	800079a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000758:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff feff 	bl	8000560 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000762:	f7ff ff17 	bl	8000594 <SPI_RxByte>
		SPI_RxByte();
 8000766:	f7ff ff15 	bl	8000594 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800076a:	e00b      	b.n	8000784 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800076c:	f7ff ff12 	bl	8000594 <SPI_RxByte>
 8000770:	4603      	mov	r3, r0
 8000772:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	f003 031f 	and.w	r3, r3, #31
 800077a:	2b05      	cmp	r3, #5
 800077c:	d006      	beq.n	800078c <SD_TxDataBlock+0x60>
			i++;
 800077e:	7bbb      	ldrb	r3, [r7, #14]
 8000780:	3301      	adds	r3, #1
 8000782:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000784:	7bbb      	ldrb	r3, [r7, #14]
 8000786:	2b40      	cmp	r3, #64	@ 0x40
 8000788:	d9f0      	bls.n	800076c <SD_TxDataBlock+0x40>
 800078a:	e000      	b.n	800078e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800078c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800078e:	bf00      	nop
 8000790:	f7ff ff00 	bl	8000594 <SPI_RxByte>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d0fa      	beq.n	8000790 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	f003 031f 	and.w	r3, r3, #31
 80007a0:	2b05      	cmp	r3, #5
 80007a2:	d101      	bne.n	80007a8 <SD_TxDataBlock+0x7c>
 80007a4:	2301      	movs	r3, #1
 80007a6:	e000      	b.n	80007aa <SD_TxDataBlock+0x7e>

	return FALSE;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b084      	sub	sp, #16
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	6039      	str	r1, [r7, #0]
 80007bc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007be:	f7ff ff13 	bl	80005e8 <SD_ReadyWait>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2bff      	cmp	r3, #255	@ 0xff
 80007c6:	d001      	beq.n	80007cc <SD_SendCmd+0x1a>
 80007c8:	23ff      	movs	r3, #255	@ 0xff
 80007ca:	e042      	b.n	8000852 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff feac 	bl	800052c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	0e1b      	lsrs	r3, r3, #24
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fea6 	bl	800052c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	0c1b      	lsrs	r3, r3, #16
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fea0 	bl	800052c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	0a1b      	lsrs	r3, r3, #8
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fe9a 	bl	800052c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fe95 	bl	800052c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b40      	cmp	r3, #64	@ 0x40
 8000806:	d102      	bne.n	800080e <SD_SendCmd+0x5c>
 8000808:	2395      	movs	r3, #149	@ 0x95
 800080a:	73fb      	strb	r3, [r7, #15]
 800080c:	e007      	b.n	800081e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b48      	cmp	r3, #72	@ 0x48
 8000812:	d102      	bne.n	800081a <SD_SendCmd+0x68>
 8000814:	2387      	movs	r3, #135	@ 0x87
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	e001      	b.n	800081e <SD_SendCmd+0x6c>
	else crc = 1;
 800081a:	2301      	movs	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fe83 	bl	800052c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b4c      	cmp	r3, #76	@ 0x4c
 800082a:	d101      	bne.n	8000830 <SD_SendCmd+0x7e>
 800082c:	f7ff feb2 	bl	8000594 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000830:	230a      	movs	r3, #10
 8000832:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000834:	f7ff feae 	bl	8000594 <SPI_RxByte>
 8000838:	4603      	mov	r3, r0
 800083a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800083c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000840:	2b00      	cmp	r3, #0
 8000842:	da05      	bge.n	8000850 <SD_SendCmd+0x9e>
 8000844:	7bbb      	ldrb	r3, [r7, #14]
 8000846:	3b01      	subs	r3, #1
 8000848:	73bb      	strb	r3, [r7, #14]
 800084a:	7bbb      	ldrb	r3, [r7, #14]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1f1      	bne.n	8000834 <SD_SendCmd+0x82>

	return res;
 8000850:	7b7b      	ldrb	r3, [r7, #13]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SD_disk_initialize+0x14>
 800086c:	2301      	movs	r3, #1
 800086e:	e0d1      	b.n	8000a14 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000870:	4b6a      	ldr	r3, [pc, #424]	@ (8000a1c <SD_disk_initialize+0x1c0>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	2b00      	cmp	r3, #0
 800087c:	d003      	beq.n	8000886 <SD_disk_initialize+0x2a>
 800087e:	4b67      	ldr	r3, [pc, #412]	@ (8000a1c <SD_disk_initialize+0x1c0>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	e0c6      	b.n	8000a14 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000886:	f7ff fec9 	bl	800061c <SD_PowerOn>

	/* slave select */
	SELECT();
 800088a:	f7ff fe33 	bl	80004f4 <SELECT>

	/* check disk type */
	type = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000892:	2100      	movs	r1, #0
 8000894:	2040      	movs	r0, #64	@ 0x40
 8000896:	f7ff ff8c 	bl	80007b2 <SD_SendCmd>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	f040 80a1 	bne.w	80009e4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80008a2:	4b5f      	ldr	r3, [pc, #380]	@ (8000a20 <SD_disk_initialize+0x1c4>)
 80008a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008a8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80008aa:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80008ae:	2048      	movs	r0, #72	@ 0x48
 80008b0:	f7ff ff7f 	bl	80007b2 <SD_SendCmd>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d155      	bne.n	8000966 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	73fb      	strb	r3, [r7, #15]
 80008be:	e00c      	b.n	80008da <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008c0:	7bfc      	ldrb	r4, [r7, #15]
 80008c2:	f7ff fe67 	bl	8000594 <SPI_RxByte>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	f104 0310 	add.w	r3, r4, #16
 80008ce:	443b      	add	r3, r7
 80008d0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	3301      	adds	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d9ef      	bls.n	80008c0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008e0:	7abb      	ldrb	r3, [r7, #10]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d17e      	bne.n	80009e4 <SD_disk_initialize+0x188>
 80008e6:	7afb      	ldrb	r3, [r7, #11]
 80008e8:	2baa      	cmp	r3, #170	@ 0xaa
 80008ea:	d17b      	bne.n	80009e4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008ec:	2100      	movs	r1, #0
 80008ee:	2077      	movs	r0, #119	@ 0x77
 80008f0:	f7ff ff5f 	bl	80007b2 <SD_SendCmd>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d807      	bhi.n	800090a <SD_disk_initialize+0xae>
 80008fa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80008fe:	2069      	movs	r0, #105	@ 0x69
 8000900:	f7ff ff57 	bl	80007b2 <SD_SendCmd>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d004      	beq.n	8000914 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800090a:	4b45      	ldr	r3, [pc, #276]	@ (8000a20 <SD_disk_initialize+0x1c4>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1ec      	bne.n	80008ec <SD_disk_initialize+0x90>
 8000912:	e000      	b.n	8000916 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000914:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000916:	4b42      	ldr	r3, [pc, #264]	@ (8000a20 <SD_disk_initialize+0x1c4>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d062      	beq.n	80009e4 <SD_disk_initialize+0x188>
 800091e:	2100      	movs	r1, #0
 8000920:	207a      	movs	r0, #122	@ 0x7a
 8000922:	f7ff ff46 	bl	80007b2 <SD_SendCmd>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d15b      	bne.n	80009e4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800092c:	2300      	movs	r3, #0
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	e00c      	b.n	800094c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000932:	7bfc      	ldrb	r4, [r7, #15]
 8000934:	f7ff fe2e 	bl	8000594 <SPI_RxByte>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	f104 0310 	add.w	r3, r4, #16
 8000940:	443b      	add	r3, r7
 8000942:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	3301      	adds	r3, #1
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	2b03      	cmp	r3, #3
 8000950:	d9ef      	bls.n	8000932 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000952:	7a3b      	ldrb	r3, [r7, #8]
 8000954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SD_disk_initialize+0x104>
 800095c:	230c      	movs	r3, #12
 800095e:	e000      	b.n	8000962 <SD_disk_initialize+0x106>
 8000960:	2304      	movs	r3, #4
 8000962:	73bb      	strb	r3, [r7, #14]
 8000964:	e03e      	b.n	80009e4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000966:	2100      	movs	r1, #0
 8000968:	2077      	movs	r0, #119	@ 0x77
 800096a:	f7ff ff22 	bl	80007b2 <SD_SendCmd>
 800096e:	4603      	mov	r3, r0
 8000970:	2b01      	cmp	r3, #1
 8000972:	d808      	bhi.n	8000986 <SD_disk_initialize+0x12a>
 8000974:	2100      	movs	r1, #0
 8000976:	2069      	movs	r0, #105	@ 0x69
 8000978:	f7ff ff1b 	bl	80007b2 <SD_SendCmd>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d801      	bhi.n	8000986 <SD_disk_initialize+0x12a>
 8000982:	2302      	movs	r3, #2
 8000984:	e000      	b.n	8000988 <SD_disk_initialize+0x12c>
 8000986:	2301      	movs	r3, #1
 8000988:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800098a:	7bbb      	ldrb	r3, [r7, #14]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d10e      	bne.n	80009ae <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000990:	2100      	movs	r1, #0
 8000992:	2077      	movs	r0, #119	@ 0x77
 8000994:	f7ff ff0d 	bl	80007b2 <SD_SendCmd>
 8000998:	4603      	mov	r3, r0
 800099a:	2b01      	cmp	r3, #1
 800099c:	d80e      	bhi.n	80009bc <SD_disk_initialize+0x160>
 800099e:	2100      	movs	r1, #0
 80009a0:	2069      	movs	r0, #105	@ 0x69
 80009a2:	f7ff ff06 	bl	80007b2 <SD_SendCmd>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d107      	bne.n	80009bc <SD_disk_initialize+0x160>
 80009ac:	e00c      	b.n	80009c8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009ae:	2100      	movs	r1, #0
 80009b0:	2041      	movs	r0, #65	@ 0x41
 80009b2:	f7ff fefe 	bl	80007b2 <SD_SendCmd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d004      	beq.n	80009c6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80009bc:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <SD_disk_initialize+0x1c4>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1e2      	bne.n	800098a <SD_disk_initialize+0x12e>
 80009c4:	e000      	b.n	80009c8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009c6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009c8:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <SD_disk_initialize+0x1c4>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d007      	beq.n	80009e0 <SD_disk_initialize+0x184>
 80009d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009d4:	2050      	movs	r0, #80	@ 0x50
 80009d6:	f7ff feec 	bl	80007b2 <SD_SendCmd>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SD_disk_initialize+0x188>
 80009e0:	2300      	movs	r3, #0
 80009e2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a24 <SD_disk_initialize+0x1c8>)
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009ea:	f7ff fd91 	bl	8000510 <DESELECT>
	SPI_RxByte();
 80009ee:	f7ff fdd1 	bl	8000594 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009f2:	7bbb      	ldrb	r3, [r7, #14]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d008      	beq.n	8000a0a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <SD_disk_initialize+0x1c0>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	f023 0301 	bic.w	r3, r3, #1
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <SD_disk_initialize+0x1c0>)
 8000a06:	701a      	strb	r2, [r3, #0]
 8000a08:	e001      	b.n	8000a0e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a0a:	f7ff fe49 	bl	80006a0 <SD_PowerOff>
	}

	return Stat;
 8000a0e:	4b03      	ldr	r3, [pc, #12]	@ (8000a1c <SD_disk_initialize+0x1c0>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000044 	.word	0x20000044
 8000a24:	20000048 	.word	0x20000048

08000a28 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SD_disk_status+0x14>
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e002      	b.n	8000a42 <SD_disk_status+0x1a>
	return Stat;
 8000a3c:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <SD_disk_status+0x28>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000000 	.word	0x20000000

08000a54 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	4603      	mov	r3, r0
 8000a62:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d102      	bne.n	8000a70 <SD_disk_read+0x1c>
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d101      	bne.n	8000a74 <SD_disk_read+0x20>
 8000a70:	2304      	movs	r3, #4
 8000a72:	e051      	b.n	8000b18 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a74:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <SD_disk_read+0xcc>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SD_disk_read+0x32>
 8000a82:	2303      	movs	r3, #3
 8000a84:	e048      	b.n	8000b18 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a86:	4b27      	ldr	r3, [pc, #156]	@ (8000b24 <SD_disk_read+0xd0>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d102      	bne.n	8000a98 <SD_disk_read+0x44>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	025b      	lsls	r3, r3, #9
 8000a96:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a98:	f7ff fd2c 	bl	80004f4 <SELECT>

	if (count == 1)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d111      	bne.n	8000ac6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	2051      	movs	r0, #81	@ 0x51
 8000aa6:	f7ff fe84 	bl	80007b2 <SD_SendCmd>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d129      	bne.n	8000b04 <SD_disk_read+0xb0>
 8000ab0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ab4:	68b8      	ldr	r0, [r7, #8]
 8000ab6:	f7ff fe0b 	bl	80006d0 <SD_RxDataBlock>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d021      	beq.n	8000b04 <SD_disk_read+0xb0>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	e01e      	b.n	8000b04 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	2052      	movs	r0, #82	@ 0x52
 8000aca:	f7ff fe72 	bl	80007b2 <SD_SendCmd>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d117      	bne.n	8000b04 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ad4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ad8:	68b8      	ldr	r0, [r7, #8]
 8000ada:	f7ff fdf9 	bl	80006d0 <SD_RxDataBlock>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d00a      	beq.n	8000afa <SD_disk_read+0xa6>
				buff += 512;
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000aea:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1ed      	bne.n	8000ad4 <SD_disk_read+0x80>
 8000af8:	e000      	b.n	8000afc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000afa:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000afc:	2100      	movs	r1, #0
 8000afe:	204c      	movs	r0, #76	@ 0x4c
 8000b00:	f7ff fe57 	bl	80007b2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b04:	f7ff fd04 	bl	8000510 <DESELECT>
	SPI_RxByte();
 8000b08:	f7ff fd44 	bl	8000594 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	bf14      	ite	ne
 8000b12:	2301      	movne	r3, #1
 8000b14:	2300      	moveq	r3, #0
 8000b16:	b2db      	uxtb	r3, r3
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000048 	.word	0x20000048

08000b28 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	4603      	mov	r3, r0
 8000b36:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d102      	bne.n	8000b44 <SD_disk_write+0x1c>
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <SD_disk_write+0x20>
 8000b44:	2304      	movs	r3, #4
 8000b46:	e06b      	b.n	8000c20 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b48:	4b37      	ldr	r3, [pc, #220]	@ (8000c28 <SD_disk_write+0x100>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SD_disk_write+0x32>
 8000b56:	2303      	movs	r3, #3
 8000b58:	e062      	b.n	8000c20 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b5a:	4b33      	ldr	r3, [pc, #204]	@ (8000c28 <SD_disk_write+0x100>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SD_disk_write+0x44>
 8000b68:	2302      	movs	r3, #2
 8000b6a:	e059      	b.n	8000c20 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c2c <SD_disk_write+0x104>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <SD_disk_write+0x56>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	025b      	lsls	r3, r3, #9
 8000b7c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b7e:	f7ff fcb9 	bl	80004f4 <SELECT>

	if (count == 1)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d110      	bne.n	8000baa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	2058      	movs	r0, #88	@ 0x58
 8000b8c:	f7ff fe11 	bl	80007b2 <SD_SendCmd>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d13a      	bne.n	8000c0c <SD_disk_write+0xe4>
 8000b96:	21fe      	movs	r1, #254	@ 0xfe
 8000b98:	68b8      	ldr	r0, [r7, #8]
 8000b9a:	f7ff fdc7 	bl	800072c <SD_TxDataBlock>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d033      	beq.n	8000c0c <SD_disk_write+0xe4>
			count = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	e030      	b.n	8000c0c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000baa:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <SD_disk_write+0x104>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d007      	beq.n	8000bc6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2077      	movs	r0, #119	@ 0x77
 8000bba:	f7ff fdfa 	bl	80007b2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bbe:	6839      	ldr	r1, [r7, #0]
 8000bc0:	2057      	movs	r0, #87	@ 0x57
 8000bc2:	f7ff fdf6 	bl	80007b2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	2059      	movs	r0, #89	@ 0x59
 8000bca:	f7ff fdf2 	bl	80007b2 <SD_SendCmd>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d11b      	bne.n	8000c0c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bd4:	21fc      	movs	r1, #252	@ 0xfc
 8000bd6:	68b8      	ldr	r0, [r7, #8]
 8000bd8:	f7ff fda8 	bl	800072c <SD_TxDataBlock>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00a      	beq.n	8000bf8 <SD_disk_write+0xd0>
				buff += 512;
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000be8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1ee      	bne.n	8000bd4 <SD_disk_write+0xac>
 8000bf6:	e000      	b.n	8000bfa <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bf8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000bfa:	21fd      	movs	r1, #253	@ 0xfd
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f7ff fd95 	bl	800072c <SD_TxDataBlock>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d101      	bne.n	8000c0c <SD_disk_write+0xe4>
			{
				count = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c0c:	f7ff fc80 	bl	8000510 <DESELECT>
	SPI_RxByte();
 8000c10:	f7ff fcc0 	bl	8000594 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	bf14      	ite	ne
 8000c1a:	2301      	movne	r3, #1
 8000c1c:	2300      	moveq	r3, #0
 8000c1e:	b2db      	uxtb	r3, r3
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000048 	.word	0x20000048

08000c30 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b08b      	sub	sp, #44	@ 0x2c
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	603a      	str	r2, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SD_disk_ioctl+0x1e>
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	e113      	b.n	8000e76 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000c54:	79bb      	ldrb	r3, [r7, #6]
 8000c56:	2b05      	cmp	r3, #5
 8000c58:	d124      	bne.n	8000ca4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d012      	beq.n	8000c88 <SD_disk_ioctl+0x58>
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	dc1a      	bgt.n	8000c9c <SD_disk_ioctl+0x6c>
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <SD_disk_ioctl+0x40>
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d006      	beq.n	8000c7c <SD_disk_ioctl+0x4c>
 8000c6e:	e015      	b.n	8000c9c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c70:	f7ff fd16 	bl	80006a0 <SD_PowerOff>
			res = RES_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c7a:	e0fa      	b.n	8000e72 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c7c:	f7ff fcce 	bl	800061c <SD_PowerOn>
			res = RES_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c86:	e0f4      	b.n	8000e72 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c88:	6a3b      	ldr	r3, [r7, #32]
 8000c8a:	1c5c      	adds	r4, r3, #1
 8000c8c:	f7ff fd14 	bl	80006b8 <SD_CheckPower>
 8000c90:	4603      	mov	r3, r0
 8000c92:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c9a:	e0ea      	b.n	8000e72 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ca2:	e0e6      	b.n	8000e72 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ca4:	4b76      	ldr	r3, [pc, #472]	@ (8000e80 <SD_disk_ioctl+0x250>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SD_disk_ioctl+0x86>
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e0df      	b.n	8000e76 <SD_disk_ioctl+0x246>

		SELECT();
 8000cb6:	f7ff fc1d 	bl	80004f4 <SELECT>

		switch (ctrl)
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	2b0d      	cmp	r3, #13
 8000cbe:	f200 80c9 	bhi.w	8000e54 <SD_disk_ioctl+0x224>
 8000cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000cc8 <SD_disk_ioctl+0x98>)
 8000cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc8:	08000dbf 	.word	0x08000dbf
 8000ccc:	08000d01 	.word	0x08000d01
 8000cd0:	08000daf 	.word	0x08000daf
 8000cd4:	08000e55 	.word	0x08000e55
 8000cd8:	08000e55 	.word	0x08000e55
 8000cdc:	08000e55 	.word	0x08000e55
 8000ce0:	08000e55 	.word	0x08000e55
 8000ce4:	08000e55 	.word	0x08000e55
 8000ce8:	08000e55 	.word	0x08000e55
 8000cec:	08000e55 	.word	0x08000e55
 8000cf0:	08000e55 	.word	0x08000e55
 8000cf4:	08000dd1 	.word	0x08000dd1
 8000cf8:	08000df5 	.word	0x08000df5
 8000cfc:	08000e19 	.word	0x08000e19
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d00:	2100      	movs	r1, #0
 8000d02:	2049      	movs	r0, #73	@ 0x49
 8000d04:	f7ff fd55 	bl	80007b2 <SD_SendCmd>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f040 80a6 	bne.w	8000e5c <SD_disk_ioctl+0x22c>
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2110      	movs	r1, #16
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fcda 	bl	80006d0 <SD_RxDataBlock>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 809c 	beq.w	8000e5c <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000d24:	7b3b      	ldrb	r3, [r7, #12]
 8000d26:	099b      	lsrs	r3, r3, #6
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d10d      	bne.n	8000d4a <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d2e:	7d7b      	ldrb	r3, [r7, #21]
 8000d30:	461a      	mov	r2, r3
 8000d32:	7d3b      	ldrb	r3, [r7, #20]
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	4413      	add	r3, r2
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d40:	8bfb      	ldrh	r3, [r7, #30]
 8000d42:	029a      	lsls	r2, r3, #10
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	e02d      	b.n	8000da6 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d4a:	7c7b      	ldrb	r3, [r7, #17]
 8000d4c:	f003 030f 	and.w	r3, r3, #15
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	7dbb      	ldrb	r3, [r7, #22]
 8000d54:	09db      	lsrs	r3, r3, #7
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	4413      	add	r3, r2
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	7d7b      	ldrb	r3, [r7, #21]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 0306 	and.w	r3, r3, #6
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4413      	add	r3, r2
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d72:	7d3b      	ldrb	r3, [r7, #20]
 8000d74:	099b      	lsrs	r3, r3, #6
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	461a      	mov	r2, r3
 8000d7a:	7cfb      	ldrb	r3, [r7, #19]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	4413      	add	r3, r2
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	7cbb      	ldrb	r3, [r7, #18]
 8000d86:	029b      	lsls	r3, r3, #10
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	3301      	adds	r3, #1
 8000d96:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d98:	8bfa      	ldrh	r2, [r7, #30]
 8000d9a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d9e:	3b09      	subs	r3, #9
 8000da0:	409a      	lsls	r2, r3
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000dac:	e056      	b.n	8000e5c <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000db4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dbc:	e055      	b.n	8000e6a <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000dbe:	f7ff fc13 	bl	80005e8 <SD_ReadyWait>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2bff      	cmp	r3, #255	@ 0xff
 8000dc6:	d14b      	bne.n	8000e60 <SD_disk_ioctl+0x230>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dce:	e047      	b.n	8000e60 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2049      	movs	r0, #73	@ 0x49
 8000dd4:	f7ff fced 	bl	80007b2 <SD_SendCmd>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d142      	bne.n	8000e64 <SD_disk_ioctl+0x234>
 8000dde:	2110      	movs	r1, #16
 8000de0:	6a38      	ldr	r0, [r7, #32]
 8000de2:	f7ff fc75 	bl	80006d0 <SD_RxDataBlock>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d03b      	beq.n	8000e64 <SD_disk_ioctl+0x234>
 8000dec:	2300      	movs	r3, #0
 8000dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000df2:	e037      	b.n	8000e64 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000df4:	2100      	movs	r1, #0
 8000df6:	204a      	movs	r0, #74	@ 0x4a
 8000df8:	f7ff fcdb 	bl	80007b2 <SD_SendCmd>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d132      	bne.n	8000e68 <SD_disk_ioctl+0x238>
 8000e02:	2110      	movs	r1, #16
 8000e04:	6a38      	ldr	r0, [r7, #32]
 8000e06:	f7ff fc63 	bl	80006d0 <SD_RxDataBlock>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d02b      	beq.n	8000e68 <SD_disk_ioctl+0x238>
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e16:	e027      	b.n	8000e68 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e18:	2100      	movs	r1, #0
 8000e1a:	207a      	movs	r0, #122	@ 0x7a
 8000e1c:	f7ff fcc9 	bl	80007b2 <SD_SendCmd>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d116      	bne.n	8000e54 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e2c:	e00b      	b.n	8000e46 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000e2e:	6a3c      	ldr	r4, [r7, #32]
 8000e30:	1c63      	adds	r3, r4, #1
 8000e32:	623b      	str	r3, [r7, #32]
 8000e34:	f7ff fbae 	bl	8000594 <SPI_RxByte>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e40:	3301      	adds	r3, #1
 8000e42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d9ef      	bls.n	8000e2e <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000e54:	2304      	movs	r3, #4
 8000e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e5a:	e006      	b.n	8000e6a <SD_disk_ioctl+0x23a>
			break;
 8000e5c:	bf00      	nop
 8000e5e:	e004      	b.n	8000e6a <SD_disk_ioctl+0x23a>
			break;
 8000e60:	bf00      	nop
 8000e62:	e002      	b.n	8000e6a <SD_disk_ioctl+0x23a>
			break;
 8000e64:	bf00      	nop
 8000e66:	e000      	b.n	8000e6a <SD_disk_ioctl+0x23a>
			break;
 8000e68:	bf00      	nop
		}

		DESELECT();
 8000e6a:	f7ff fb51 	bl	8000510 <DESELECT>
		SPI_RxByte();
 8000e6e:	f7ff fb91 	bl	8000594 <SPI_RxByte>
	}

	return res;
 8000e72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	372c      	adds	r7, #44	@ 0x2c
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000000 	.word	0x20000000

08000e84 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4878      	ldr	r0, [pc, #480]	@ (8001070 <LCD_Init+0x1ec>)
 8000e8e:	f001 fa09 	bl	80022a4 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 8000e92:	2201      	movs	r2, #1
 8000e94:	2113      	movs	r1, #19
 8000e96:	4877      	ldr	r0, [pc, #476]	@ (8001074 <LCD_Init+0x1f0>)
 8000e98:	f001 fa04 	bl	80022a4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	4875      	ldr	r0, [pc, #468]	@ (8001078 <LCD_Init+0x1f4>)
 8000ea2:	f001 f9ff 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000ea6:	2005      	movs	r0, #5
 8000ea8:	f000 fe94 	bl	8001bd4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4871      	ldr	r0, [pc, #452]	@ (8001078 <LCD_Init+0x1f4>)
 8000eb2:	f001 f9f7 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000eb6:	2014      	movs	r0, #20
 8000eb8:	f000 fe8c 	bl	8001bd4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	486d      	ldr	r0, [pc, #436]	@ (8001078 <LCD_Init+0x1f4>)
 8000ec2:	f001 f9ef 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000ec6:	2096      	movs	r0, #150	@ 0x96
 8000ec8:	f000 fe84 	bl	8001bd4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4867      	ldr	r0, [pc, #412]	@ (8001070 <LCD_Init+0x1ec>)
 8000ed2:	f001 f9e7 	bl	80022a4 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000ed6:	20e9      	movs	r0, #233	@ 0xe9
 8000ed8:	f000 f8d0 	bl	800107c <LCD_CMD>
	LCD_DATA(0x20);
 8000edc:	2020      	movs	r0, #32
 8000ede:	f000 f973 	bl	80011c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 8000ee2:	2011      	movs	r0, #17
 8000ee4:	f000 f8ca 	bl	800107c <LCD_CMD>
	HAL_Delay(100);
 8000ee8:	2064      	movs	r0, #100	@ 0x64
 8000eea:	f000 fe73 	bl	8001bd4 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 8000eee:	20d1      	movs	r0, #209	@ 0xd1
 8000ef0:	f000 f8c4 	bl	800107c <LCD_CMD>
	LCD_DATA(0x00);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 f967 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x71);
 8000efa:	2071      	movs	r0, #113	@ 0x71
 8000efc:	f000 f964 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x19);
 8000f00:	2019      	movs	r0, #25
 8000f02:	f000 f961 	bl	80011c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000f06:	20d0      	movs	r0, #208	@ 0xd0
 8000f08:	f000 f8b8 	bl	800107c <LCD_CMD>
	LCD_DATA(0x07);
 8000f0c:	2007      	movs	r0, #7
 8000f0e:	f000 f95b 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x01);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 f958 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x08);
 8000f18:	2008      	movs	r0, #8
 8000f1a:	f000 f955 	bl	80011c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 8000f1e:	2036      	movs	r0, #54	@ 0x36
 8000f20:	f000 f8ac 	bl	800107c <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 8000f24:	20e8      	movs	r0, #232	@ 0xe8
 8000f26:	f000 f94f 	bl	80011c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 8000f2a:	203a      	movs	r0, #58	@ 0x3a
 8000f2c:	f000 f8a6 	bl	800107c <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 8000f30:	2005      	movs	r0, #5
 8000f32:	f000 f949 	bl	80011c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 8000f36:	20c1      	movs	r0, #193	@ 0xc1
 8000f38:	f000 f8a0 	bl	800107c <LCD_CMD>
	LCD_DATA(0x10);
 8000f3c:	2010      	movs	r0, #16
 8000f3e:	f000 f943 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x10);
 8000f42:	2010      	movs	r0, #16
 8000f44:	f000 f940 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x02);
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f000 f93d 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x02);
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f000 f93a 	bl	80011c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 8000f54:	20c0      	movs	r0, #192	@ 0xc0
 8000f56:	f000 f891 	bl	800107c <LCD_CMD>
	LCD_DATA(0x00);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 f934 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x35);
 8000f60:	2035      	movs	r0, #53	@ 0x35
 8000f62:	f000 f931 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x00);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f92e 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x00);
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f000 f92b 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x01);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f000 f928 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x02);
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f000 f925 	bl	80011c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 8000f7e:	20c5      	movs	r0, #197	@ 0xc5
 8000f80:	f000 f87c 	bl	800107c <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8000f84:	2004      	movs	r0, #4
 8000f86:	f000 f91f 	bl	80011c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 8000f8a:	20d2      	movs	r0, #210	@ 0xd2
 8000f8c:	f000 f876 	bl	800107c <LCD_CMD>
	LCD_DATA(0x01);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f000 f919 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x44);
 8000f96:	2044      	movs	r0, #68	@ 0x44
 8000f98:	f000 f916 	bl	80011c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8000f9c:	20c8      	movs	r0, #200	@ 0xc8
 8000f9e:	f000 f86d 	bl	800107c <LCD_CMD>
	LCD_DATA(0x04);
 8000fa2:	2004      	movs	r0, #4
 8000fa4:	f000 f910 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x67);
 8000fa8:	2067      	movs	r0, #103	@ 0x67
 8000faa:	f000 f90d 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x35);
 8000fae:	2035      	movs	r0, #53	@ 0x35
 8000fb0:	f000 f90a 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x04);
 8000fb4:	2004      	movs	r0, #4
 8000fb6:	f000 f907 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x08);
 8000fba:	2008      	movs	r0, #8
 8000fbc:	f000 f904 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x06);
 8000fc0:	2006      	movs	r0, #6
 8000fc2:	f000 f901 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x24);
 8000fc6:	2024      	movs	r0, #36	@ 0x24
 8000fc8:	f000 f8fe 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x01);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f000 f8fb 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x37);
 8000fd2:	2037      	movs	r0, #55	@ 0x37
 8000fd4:	f000 f8f8 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x40);
 8000fd8:	2040      	movs	r0, #64	@ 0x40
 8000fda:	f000 f8f5 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x03);
 8000fde:	2003      	movs	r0, #3
 8000fe0:	f000 f8f2 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x10);
 8000fe4:	2010      	movs	r0, #16
 8000fe6:	f000 f8ef 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x08);
 8000fea:	2008      	movs	r0, #8
 8000fec:	f000 f8ec 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x80);
 8000ff0:	2080      	movs	r0, #128	@ 0x80
 8000ff2:	f000 f8e9 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x00);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f000 f8e6 	bl	80011c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 8000ffc:	202a      	movs	r0, #42	@ 0x2a
 8000ffe:	f000 f83d 	bl	800107c <LCD_CMD>
	LCD_DATA(0x00);
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f8e0 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x00);
 8001008:	2000      	movs	r0, #0
 800100a:	f000 f8dd 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x01);
 800100e:	2001      	movs	r0, #1
 8001010:	f000 f8da 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x3F);
 8001014:	203f      	movs	r0, #63	@ 0x3f
 8001016:	f000 f8d7 	bl	80011c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 800101a:	202b      	movs	r0, #43	@ 0x2b
 800101c:	f000 f82e 	bl	800107c <LCD_CMD>
	LCD_DATA(0x00);
 8001020:	2000      	movs	r0, #0
 8001022:	f000 f8d1 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x00);
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f8ce 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0x01);
 800102c:	2001      	movs	r0, #1
 800102e:	f000 f8cb 	bl	80011c8 <LCD_DATA>
	LCD_DATA(0xE0);
 8001032:	20e0      	movs	r0, #224	@ 0xe0
 8001034:	f000 f8c8 	bl	80011c8 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 8001038:	2029      	movs	r0, #41	@ 0x29
 800103a:	f000 f81f 	bl	800107c <LCD_CMD>
	LCD_CMD(0x2C); //display on
 800103e:	202c      	movs	r0, #44	@ 0x2c
 8001040:	f000 f81c 	bl	800107c <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8001044:	2020      	movs	r0, #32
 8001046:	f000 f819 	bl	800107c <LCD_CMD>
	HAL_Delay(120);
 800104a:	2078      	movs	r0, #120	@ 0x78
 800104c:	f000 fdc2 	bl	8001bd4 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 8001050:	2011      	movs	r0, #17
 8001052:	f000 f813 	bl	800107c <LCD_CMD>
	HAL_Delay(120);
 8001056:	2078      	movs	r0, #120	@ 0x78
 8001058:	f000 fdbc 	bl	8001bd4 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 800105c:	2029      	movs	r0, #41	@ 0x29
 800105e:	f000 f80d 	bl	800107c <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2101      	movs	r1, #1
 8001066:	4802      	ldr	r0, [pc, #8]	@ (8001070 <LCD_Init+0x1ec>)
 8001068:	f001 f91c 	bl	80022a4 <HAL_GPIO_WritePin>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40020400 	.word	0x40020400
 8001074:	40020000 	.word	0x40020000
 8001078:	40020800 	.word	0x40020800

0800107c <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2110      	movs	r1, #16
 800108a:	484c      	ldr	r0, [pc, #304]	@ (80011bc <LCD_CMD+0x140>)
 800108c:	f001 f90a 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2102      	movs	r1, #2
 8001094:	4849      	ldr	r0, [pc, #292]	@ (80011bc <LCD_CMD+0x140>)
 8001096:	f001 f905 	bl	80022a4 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010aa:	4844      	ldr	r0, [pc, #272]	@ (80011bc <LCD_CMD+0x140>)
 80010ac:	f001 f8fa 	bl	80022a4 <HAL_GPIO_WritePin>
 80010b0:	e005      	b.n	80010be <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b8:	4840      	ldr	r0, [pc, #256]	@ (80011bc <LCD_CMD+0x140>)
 80010ba:	f001 f8f3 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2180      	movs	r1, #128	@ 0x80
 80010cc:	483c      	ldr	r0, [pc, #240]	@ (80011c0 <LCD_CMD+0x144>)
 80010ce:	f001 f8e9 	bl	80022a4 <HAL_GPIO_WritePin>
 80010d2:	e004      	b.n	80010de <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2180      	movs	r1, #128	@ 0x80
 80010d8:	4839      	ldr	r0, [pc, #228]	@ (80011c0 <LCD_CMD+0x144>)
 80010da:	f001 f8e3 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d006      	beq.n	80010f6 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010ee:	4833      	ldr	r0, [pc, #204]	@ (80011bc <LCD_CMD+0x140>)
 80010f0:	f001 f8d8 	bl	80022a4 <HAL_GPIO_WritePin>
 80010f4:	e005      	b.n	8001102 <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010fc:	482f      	ldr	r0, [pc, #188]	@ (80011bc <LCD_CMD+0x140>)
 80010fe:	f001 f8d1 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	2b00      	cmp	r3, #0
 800110a:	d005      	beq.n	8001118 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	2108      	movs	r1, #8
 8001110:	482c      	ldr	r0, [pc, #176]	@ (80011c4 <LCD_CMD+0x148>)
 8001112:	f001 f8c7 	bl	80022a4 <HAL_GPIO_WritePin>
 8001116:	e004      	b.n	8001122 <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2108      	movs	r1, #8
 800111c:	4829      	ldr	r0, [pc, #164]	@ (80011c4 <LCD_CMD+0x148>)
 800111e:	f001 f8c1 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f003 0310 	and.w	r3, r3, #16
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 800112c:	2201      	movs	r2, #1
 800112e:	2120      	movs	r1, #32
 8001130:	4824      	ldr	r0, [pc, #144]	@ (80011c4 <LCD_CMD+0x148>)
 8001132:	f001 f8b7 	bl	80022a4 <HAL_GPIO_WritePin>
 8001136:	e004      	b.n	8001142 <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2120      	movs	r1, #32
 800113c:	4821      	ldr	r0, [pc, #132]	@ (80011c4 <LCD_CMD+0x148>)
 800113e:	f001 f8b1 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 0320 	and.w	r3, r3, #32
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 800114c:	2201      	movs	r2, #1
 800114e:	2110      	movs	r1, #16
 8001150:	481c      	ldr	r0, [pc, #112]	@ (80011c4 <LCD_CMD+0x148>)
 8001152:	f001 f8a7 	bl	80022a4 <HAL_GPIO_WritePin>
 8001156:	e004      	b.n	8001162 <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2110      	movs	r1, #16
 800115c:	4819      	ldr	r0, [pc, #100]	@ (80011c4 <LCD_CMD+0x148>)
 800115e:	f001 f8a1 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001172:	4814      	ldr	r0, [pc, #80]	@ (80011c4 <LCD_CMD+0x148>)
 8001174:	f001 f896 	bl	80022a4 <HAL_GPIO_WritePin>
 8001178:	e005      	b.n	8001186 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001180:	4810      	ldr	r0, [pc, #64]	@ (80011c4 <LCD_CMD+0x148>)
 8001182:	f001 f88f 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	da06      	bge.n	800119c <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800118e:	2201      	movs	r2, #1
 8001190:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001194:	4809      	ldr	r0, [pc, #36]	@ (80011bc <LCD_CMD+0x140>)
 8001196:	f001 f885 	bl	80022a4 <HAL_GPIO_WritePin>
 800119a:	e005      	b.n	80011a8 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a2:	4806      	ldr	r0, [pc, #24]	@ (80011bc <LCD_CMD+0x140>)
 80011a4:	f001 f87e 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2102      	movs	r1, #2
 80011ac:	4803      	ldr	r0, [pc, #12]	@ (80011bc <LCD_CMD+0x140>)
 80011ae:	f001 f879 	bl	80022a4 <HAL_GPIO_WritePin>

}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020800 	.word	0x40020800
 80011c4:	40020400 	.word	0x40020400

080011c8 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2110      	movs	r1, #16
 80011d6:	484c      	ldr	r0, [pc, #304]	@ (8001308 <LCD_DATA+0x140>)
 80011d8:	f001 f864 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	2102      	movs	r1, #2
 80011e0:	4849      	ldr	r0, [pc, #292]	@ (8001308 <LCD_DATA+0x140>)
 80011e2:	f001 f85f 	bl	80022a4 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f6:	4844      	ldr	r0, [pc, #272]	@ (8001308 <LCD_DATA+0x140>)
 80011f8:	f001 f854 	bl	80022a4 <HAL_GPIO_WritePin>
 80011fc:	e005      	b.n	800120a <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001204:	4840      	ldr	r0, [pc, #256]	@ (8001308 <LCD_DATA+0x140>)
 8001206:	f001 f84d 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	2180      	movs	r1, #128	@ 0x80
 8001218:	483c      	ldr	r0, [pc, #240]	@ (800130c <LCD_DATA+0x144>)
 800121a:	f001 f843 	bl	80022a4 <HAL_GPIO_WritePin>
 800121e:	e004      	b.n	800122a <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2180      	movs	r1, #128	@ 0x80
 8001224:	4839      	ldr	r0, [pc, #228]	@ (800130c <LCD_DATA+0x144>)
 8001226:	f001 f83d 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800123a:	4833      	ldr	r0, [pc, #204]	@ (8001308 <LCD_DATA+0x140>)
 800123c:	f001 f832 	bl	80022a4 <HAL_GPIO_WritePin>
 8001240:	e005      	b.n	800124e <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001248:	482f      	ldr	r0, [pc, #188]	@ (8001308 <LCD_DATA+0x140>)
 800124a:	f001 f82b 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2108      	movs	r1, #8
 800125c:	482c      	ldr	r0, [pc, #176]	@ (8001310 <LCD_DATA+0x148>)
 800125e:	f001 f821 	bl	80022a4 <HAL_GPIO_WritePin>
 8001262:	e004      	b.n	800126e <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2108      	movs	r1, #8
 8001268:	4829      	ldr	r0, [pc, #164]	@ (8001310 <LCD_DATA+0x148>)
 800126a:	f001 f81b 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	2120      	movs	r1, #32
 800127c:	4824      	ldr	r0, [pc, #144]	@ (8001310 <LCD_DATA+0x148>)
 800127e:	f001 f811 	bl	80022a4 <HAL_GPIO_WritePin>
 8001282:	e004      	b.n	800128e <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	2120      	movs	r1, #32
 8001288:	4821      	ldr	r0, [pc, #132]	@ (8001310 <LCD_DATA+0x148>)
 800128a:	f001 f80b 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	2110      	movs	r1, #16
 800129c:	481c      	ldr	r0, [pc, #112]	@ (8001310 <LCD_DATA+0x148>)
 800129e:	f001 f801 	bl	80022a4 <HAL_GPIO_WritePin>
 80012a2:	e004      	b.n	80012ae <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2110      	movs	r1, #16
 80012a8:	4819      	ldr	r0, [pc, #100]	@ (8001310 <LCD_DATA+0x148>)
 80012aa:	f000 fffb 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012be:	4814      	ldr	r0, [pc, #80]	@ (8001310 <LCD_DATA+0x148>)
 80012c0:	f000 fff0 	bl	80022a4 <HAL_GPIO_WritePin>
 80012c4:	e005      	b.n	80012d2 <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012cc:	4810      	ldr	r0, [pc, #64]	@ (8001310 <LCD_DATA+0x148>)
 80012ce:	f000 ffe9 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	da06      	bge.n	80012e8 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012e0:	4809      	ldr	r0, [pc, #36]	@ (8001308 <LCD_DATA+0x140>)
 80012e2:	f000 ffdf 	bl	80022a4 <HAL_GPIO_WritePin>
 80012e6:	e005      	b.n	80012f4 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012ee:	4806      	ldr	r0, [pc, #24]	@ (8001308 <LCD_DATA+0x140>)
 80012f0:	f000 ffd8 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	2102      	movs	r1, #2
 80012f8:	4803      	ldr	r0, [pc, #12]	@ (8001308 <LCD_DATA+0x140>)
 80012fa:	f000 ffd3 	bl	80022a4 <HAL_GPIO_WritePin>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020000 	.word	0x40020000
 800130c:	40020800 	.word	0x40020800
 8001310:	40020400 	.word	0x40020400

08001314 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 8001322:	202a      	movs	r0, #42	@ 0x2a
 8001324:	f7ff feaa 	bl	800107c <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff4a 	bl	80011c8 <LCD_DATA>
	LCD_DATA(x1);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff45 	bl	80011c8 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	b2db      	uxtb	r3, r3
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff3f 	bl	80011c8 <LCD_DATA>
	LCD_DATA(x2);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff3a 	bl	80011c8 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8001354:	202b      	movs	r0, #43	@ 0x2b
 8001356:	f7ff fe91 	bl	800107c <LCD_CMD>
	LCD_DATA(y1 >> 8);
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff31 	bl	80011c8 <LCD_DATA>
	LCD_DATA(y1);
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff2c 	bl	80011c8 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff26 	bl	80011c8 <LCD_DATA>
	LCD_DATA(y2);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff21 	bl	80011c8 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8001386:	202c      	movs	r0, #44	@ 0x2c
 8001388:	f7ff fe78 	bl	800107c <LCD_CMD>
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 800139c:	202c      	movs	r0, #44	@ 0x2c
 800139e:	f7ff fe6d 	bl	800107c <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80013a2:	2201      	movs	r2, #1
 80013a4:	2110      	movs	r1, #16
 80013a6:	481b      	ldr	r0, [pc, #108]	@ (8001414 <LCD_Clear+0x80>)
 80013a8:	f000 ff7c 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2101      	movs	r1, #1
 80013b0:	4819      	ldr	r0, [pc, #100]	@ (8001418 <LCD_Clear+0x84>)
 80013b2:	f000 ff77 	bl	80022a4 <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 80013b6:	23ef      	movs	r3, #239	@ 0xef
 80013b8:	f240 123f 	movw	r2, #319	@ 0x13f
 80013bc:	2100      	movs	r1, #0
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff ffa8 	bl	8001314 <SetWindows>
	for (x = 0; x < 320; x++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e016      	b.n	80013f8 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	e00d      	b.n	80013ec <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fef6 	bl	80011c8 <LCD_DATA>
			LCD_DATA(c);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fef1 	bl	80011c8 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3301      	adds	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2bef      	cmp	r3, #239	@ 0xef
 80013f0:	d9ee      	bls.n	80013d0 <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3301      	adds	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80013fe:	d3e4      	bcc.n	80013ca <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2101      	movs	r1, #1
 8001404:	4804      	ldr	r0, [pc, #16]	@ (8001418 <LCD_Clear+0x84>)
 8001406:	f000 ff4d 	bl	80022a4 <HAL_GPIO_WritePin>
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001420:	f000 fb66 	bl	8001af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001424:	f000 f810 	bl	8001448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001428:	f000 f8da 	bl	80015e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800142c:	f000 f878 	bl	8001520 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001430:	f000 f8ac 	bl	800158c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001434:	f003 f87e 	bl	8004534 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 8001438:	f7ff fd24 	bl	8000e84 <LCD_Init>
	LCD_Clear(0x00);
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff ffa9 	bl	8001394 <LCD_Clear>
	  */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001442:	bf00      	nop
 8001444:	e7fd      	b.n	8001442 <main+0x26>
	...

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b094      	sub	sp, #80	@ 0x50
 800144c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	2234      	movs	r2, #52	@ 0x34
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f003 f92f 	bl	80046ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	4b29      	ldr	r3, [pc, #164]	@ (8001518 <SystemClock_Config+0xd0>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	4a28      	ldr	r2, [pc, #160]	@ (8001518 <SystemClock_Config+0xd0>)
 8001476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147a:	6413      	str	r3, [r2, #64]	@ 0x40
 800147c:	4b26      	ldr	r3, [pc, #152]	@ (8001518 <SystemClock_Config+0xd0>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001488:	2300      	movs	r3, #0
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	4b23      	ldr	r3, [pc, #140]	@ (800151c <SystemClock_Config+0xd4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001494:	4a21      	ldr	r2, [pc, #132]	@ (800151c <SystemClock_Config+0xd4>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <SystemClock_Config+0xd4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ac:	2301      	movs	r3, #1
 80014ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b0:	2310      	movs	r3, #16
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b4:	2302      	movs	r3, #2
 80014b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b8:	2300      	movs	r3, #0
 80014ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014bc:	2308      	movs	r3, #8
 80014be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80014c0:	2350      	movs	r3, #80	@ 0x50
 80014c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 f9c3 	bl	8002860 <HAL_RCC_OscConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80014e0:	f000 f9b0 	bl	8001844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e4:	230f      	movs	r3, #15
 80014e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e8:	2302      	movs	r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	2102      	movs	r1, #2
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fee9 	bl	80022d8 <HAL_RCC_ClockConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800150c:	f000 f99a 	bl	8001844 <Error_Handler>
  }
}
 8001510:	bf00      	nop
 8001512:	3750      	adds	r7, #80	@ 0x50
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001526:	4a18      	ldr	r2, [pc, #96]	@ (8001588 <MX_SPI1_Init+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800152a:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <MX_SPI1_Init+0x64>)
 800152c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001530:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001532:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <MX_SPI1_Init+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800153e:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001544:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800154a:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <MX_SPI1_Init+0x64>)
 800154c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001550:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001554:	2210      	movs	r2, #16
 8001556:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001558:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <MX_SPI1_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001564:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <MX_SPI1_Init+0x64>)
 800156c:	220a      	movs	r2, #10
 800156e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001570:	4804      	ldr	r0, [pc, #16]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001572:	f001 fc13 	bl	8002d9c <HAL_SPI_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800157c:	f000 f962 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000004c 	.word	0x2000004c
 8001588:	40013000 	.word	0x40013000

0800158c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <MX_USART2_UART_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015c4:	f002 f842 	bl	800364c <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ce:	f000 f939 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200000a4 	.word	0x200000a4
 80015dc:	40004400 	.word	0x40004400

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b45      	ldr	r3, [pc, #276]	@ (8001710 <MX_GPIO_Init+0x130>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a44      	ldr	r2, [pc, #272]	@ (8001710 <MX_GPIO_Init+0x130>)
 8001600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b42      	ldr	r3, [pc, #264]	@ (8001710 <MX_GPIO_Init+0x130>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b3e      	ldr	r3, [pc, #248]	@ (8001710 <MX_GPIO_Init+0x130>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a3d      	ldr	r2, [pc, #244]	@ (8001710 <MX_GPIO_Init+0x130>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b3b      	ldr	r3, [pc, #236]	@ (8001710 <MX_GPIO_Init+0x130>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b37      	ldr	r3, [pc, #220]	@ (8001710 <MX_GPIO_Init+0x130>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a36      	ldr	r2, [pc, #216]	@ (8001710 <MX_GPIO_Init+0x130>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b34      	ldr	r3, [pc, #208]	@ (8001710 <MX_GPIO_Init+0x130>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b30      	ldr	r3, [pc, #192]	@ (8001710 <MX_GPIO_Init+0x130>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	4a2f      	ldr	r2, [pc, #188]	@ (8001710 <MX_GPIO_Init+0x130>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	@ 0x30
 800165a:	4b2d      	ldr	r3, [pc, #180]	@ (8001710 <MX_GPIO_Init+0x130>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2182      	movs	r1, #130	@ 0x82
 800166a:	482a      	ldr	r0, [pc, #168]	@ (8001714 <MX_GPIO_Init+0x134>)
 800166c:	f000 fe1a 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8001670:	2200      	movs	r2, #0
 8001672:	f240 7113 	movw	r1, #1811	@ 0x713
 8001676:	4828      	ldr	r0, [pc, #160]	@ (8001718 <MX_GPIO_Init+0x138>)
 8001678:	f000 fe14 	bl	80022a4 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 800167c:	2200      	movs	r2, #0
 800167e:	f240 4139 	movw	r1, #1081	@ 0x439
 8001682:	4826      	ldr	r0, [pc, #152]	@ (800171c <MX_GPIO_Init+0x13c>)
 8001684:	f000 fe0e 	bl	80022a4 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
 800168a:	2140      	movs	r1, #64	@ 0x40
 800168c:	4823      	ldr	r0, [pc, #140]	@ (800171c <MX_GPIO_Init+0x13c>)
 800168e:	f000 fe09 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8001692:	2382      	movs	r3, #130	@ 0x82
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800169e:	2302      	movs	r3, #2
 80016a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	481a      	ldr	r0, [pc, #104]	@ (8001714 <MX_GPIO_Init+0x134>)
 80016aa:	f000 fc67 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 80016ae:	f240 7313 	movw	r3, #1811	@ 0x713
 80016b2:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016bc:	2302      	movs	r3, #2
 80016be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4814      	ldr	r0, [pc, #80]	@ (8001718 <MX_GPIO_Init+0x138>)
 80016c8:	f000 fc58 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80016cc:	f240 4339 	movw	r3, #1081	@ 0x439
 80016d0:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016da:	2302      	movs	r3, #2
 80016dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	480d      	ldr	r0, [pc, #52]	@ (800171c <MX_GPIO_Init+0x13c>)
 80016e6:	f000 fc49 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 80016ea:	2340      	movs	r3, #64	@ 0x40
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016f6:	2301      	movs	r3, #1
 80016f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	4806      	ldr	r0, [pc, #24]	@ (800171c <MX_GPIO_Init+0x13c>)
 8001702:	f000 fc3b 	bl	8001f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	@ 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40020800 	.word	0x40020800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020400 	.word	0x40020400

08001720 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	if(buffer[0] == 'u'){
 8001728:	4b42      	ldr	r3, [pc, #264]	@ (8001834 <HAL_UART_RxCpltCallback+0x114>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b75      	cmp	r3, #117	@ 0x75
 800172e:	d11a      	bne.n	8001766 <HAL_UART_RxCpltCallback+0x46>
		if (position_p1[0]<140){
 8001730:	4b41      	ldr	r3, [pc, #260]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b8b      	cmp	r3, #139	@ 0x8b
 8001736:	d808      	bhi.n	800174a <HAL_UART_RxCpltCallback+0x2a>
		position_p1[0]+=20;
 8001738:	4b3f      	ldr	r3, [pc, #252]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	3314      	adds	r3, #20
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b3d      	ldr	r3, [pc, #244]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 8001742:	701a      	strb	r2, [r3, #0]
		position_p1[2]=8;}
 8001744:	4b3c      	ldr	r3, [pc, #240]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 8001746:	2208      	movs	r2, #8
 8001748:	709a      	strb	r2, [r3, #2]

		if(p1.x<140){
 800174a:	4b3c      	ldr	r3, [pc, #240]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b8b      	cmp	r3, #139	@ 0x8b
 8001750:	d809      	bhi.n	8001766 <HAL_UART_RxCpltCallback+0x46>
			p1.x=p1.x+p1.vel;
 8001752:	4b3a      	ldr	r3, [pc, #232]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b39      	ldr	r3, [pc, #228]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	4413      	add	r3, r2
 800175c:	4a37      	ldr	r2, [pc, #220]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 800175e:	6013      	str	r3, [r2, #0]
			p1.vista=8;
 8001760:	4b36      	ldr	r3, [pc, #216]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 8001762:	2208      	movs	r2, #8
 8001764:	61da      	str	r2, [r3, #28]
		}
	}
	if(buffer[0] == 'd'){
 8001766:	4b33      	ldr	r3, [pc, #204]	@ (8001834 <HAL_UART_RxCpltCallback+0x114>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b64      	cmp	r3, #100	@ 0x64
 800176c:	d11a      	bne.n	80017a4 <HAL_UART_RxCpltCallback+0x84>
		if (position_p1[0]>0){
 800176e:	4b32      	ldr	r3, [pc, #200]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d008      	beq.n	8001788 <HAL_UART_RxCpltCallback+0x68>
		position_p1[0]-=20;
 8001776:	4b30      	ldr	r3, [pc, #192]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	3b14      	subs	r3, #20
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b2e      	ldr	r3, [pc, #184]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 8001780:	701a      	strb	r2, [r3, #0]
		position_p1[2]=2;}
 8001782:	4b2d      	ldr	r3, [pc, #180]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 8001784:	2202      	movs	r2, #2
 8001786:	709a      	strb	r2, [r3, #2]

		if (p1.x>0){
 8001788:	4b2c      	ldr	r3, [pc, #176]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d009      	beq.n	80017a4 <HAL_UART_RxCpltCallback+0x84>
			p1.x=p1.x-p1.vel;
 8001790:	4b2a      	ldr	r3, [pc, #168]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b29      	ldr	r3, [pc, #164]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	4a28      	ldr	r2, [pc, #160]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 800179c:	6013      	str	r3, [r2, #0]
			p1.vista=4;
 800179e:	4b27      	ldr	r3, [pc, #156]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 80017a0:	2204      	movs	r2, #4
 80017a2:	61da      	str	r2, [r3, #28]
		}
	}
	if(buffer[0] == 'r'){
 80017a4:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <HAL_UART_RxCpltCallback+0x114>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b72      	cmp	r3, #114	@ 0x72
 80017aa:	d11a      	bne.n	80017e2 <HAL_UART_RxCpltCallback+0xc2>
		if (position_p1[1]<220){
 80017ac:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 80017ae:	785b      	ldrb	r3, [r3, #1]
 80017b0:	2bdb      	cmp	r3, #219	@ 0xdb
 80017b2:	d808      	bhi.n	80017c6 <HAL_UART_RxCpltCallback+0xa6>
		position_p1[1]+=20;
 80017b4:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	3314      	adds	r3, #20
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 80017be:	705a      	strb	r2, [r3, #1]
		position_p1[2]=6;}
 80017c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 80017c2:	2206      	movs	r2, #6
 80017c4:	709a      	strb	r2, [r3, #2]

		if (p1.y<220){
 80017c6:	4b1d      	ldr	r3, [pc, #116]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2bdb      	cmp	r3, #219	@ 0xdb
 80017cc:	d809      	bhi.n	80017e2 <HAL_UART_RxCpltCallback+0xc2>
			p1.y=p1.y+p1.vel;
 80017ce:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a18      	ldr	r2, [pc, #96]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 80017da:	6053      	str	r3, [r2, #4]
			p1.vista=6;
 80017dc:	4b17      	ldr	r3, [pc, #92]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 80017de:	2206      	movs	r2, #6
 80017e0:	61da      	str	r2, [r3, #28]
		}
	}
	if(buffer[0] == 'l'){
 80017e2:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <HAL_UART_RxCpltCallback+0x114>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b6c      	cmp	r3, #108	@ 0x6c
 80017e8:	d11a      	bne.n	8001820 <HAL_UART_RxCpltCallback+0x100>
		if(position_p1[1]>0){
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 80017ec:	785b      	ldrb	r3, [r3, #1]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d008      	beq.n	8001804 <HAL_UART_RxCpltCallback+0xe4>
		position_p1[1]-=20;
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 80017f4:	785b      	ldrb	r3, [r3, #1]
 80017f6:	3b14      	subs	r3, #20
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 80017fc:	705a      	strb	r2, [r3, #1]
		position_p1[2]=4;}
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <HAL_UART_RxCpltCallback+0x118>)
 8001800:	2204      	movs	r2, #4
 8001802:	709a      	strb	r2, [r3, #2]

		if (p1.y>0){
 8001804:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d009      	beq.n	8001820 <HAL_UART_RxCpltCallback+0x100>
			p1.y=p1.y-p1.vel;
 800180c:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	4a09      	ldr	r2, [pc, #36]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 8001818:	6053      	str	r3, [r2, #4]
			p1.vista=4;
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <HAL_UART_RxCpltCallback+0x11c>)
 800181c:	2204      	movs	r2, #4
 800181e:	61da      	str	r2, [r3, #28]
	    //verificar_golpe(&e1, position_p1);
	    //verificar_golpe(&e2, position_p1);
	    //verificar_golpe(&e3, position_p1);
	}
	// Vuelve a activar la recepción por interrupción
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 8001820:	2201      	movs	r2, #1
 8001822:	4904      	ldr	r1, [pc, #16]	@ (8001834 <HAL_UART_RxCpltCallback+0x114>)
 8001824:	4806      	ldr	r0, [pc, #24]	@ (8001840 <HAL_UART_RxCpltCallback+0x120>)
 8001826:	f001 ff61 	bl	80036ec <HAL_UART_Receive_IT>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200000ec 	.word	0x200000ec
 8001838:	20000004 	.word	0x20000004
 800183c:	200000f8 	.word	0x200000f8
 8001840:	200000a4 	.word	0x200000a4

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <Error_Handler+0x8>

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <HAL_MspInit+0x4c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	4a0f      	ldr	r2, [pc, #60]	@ (800189c <HAL_MspInit+0x4c>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001864:	6453      	str	r3, [r2, #68]	@ 0x44
 8001866:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <HAL_MspInit+0x4c>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <HAL_MspInit+0x4c>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	4a08      	ldr	r2, [pc, #32]	@ (800189c <HAL_MspInit+0x4c>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001880:	6413      	str	r3, [r2, #64]	@ 0x40
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_MspInit+0x4c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a19      	ldr	r2, [pc, #100]	@ (8001924 <HAL_SPI_MspInit+0x84>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d12b      	bne.n	800191a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <HAL_SPI_MspInit+0x88>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	4a17      	ldr	r2, [pc, #92]	@ (8001928 <HAL_SPI_MspInit+0x88>)
 80018cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HAL_SPI_MspInit+0x88>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <HAL_SPI_MspInit+0x88>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a10      	ldr	r2, [pc, #64]	@ (8001928 <HAL_SPI_MspInit+0x88>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <HAL_SPI_MspInit+0x88>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018fa:	23e0      	movs	r3, #224	@ 0xe0
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800190a:	2305      	movs	r3, #5
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	@ (800192c <HAL_SPI_MspInit+0x8c>)
 8001916:	f000 fb31 	bl	8001f7c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	@ 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40013000 	.word	0x40013000
 8001928:	40023800 	.word	0x40023800
 800192c:	40020000 	.word	0x40020000

08001930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	@ 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <HAL_UART_MspInit+0x94>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d133      	bne.n	80019ba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b1c      	ldr	r3, [pc, #112]	@ (80019c8 <HAL_UART_MspInit+0x98>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	4a1b      	ldr	r2, [pc, #108]	@ (80019c8 <HAL_UART_MspInit+0x98>)
 800195c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001960:	6413      	str	r3, [r2, #64]	@ 0x40
 8001962:	4b19      	ldr	r3, [pc, #100]	@ (80019c8 <HAL_UART_MspInit+0x98>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <HAL_UART_MspInit+0x98>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a14      	ldr	r2, [pc, #80]	@ (80019c8 <HAL_UART_MspInit+0x98>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <HAL_UART_MspInit+0x98>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800198a:	230c      	movs	r3, #12
 800198c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800199a:	2307      	movs	r3, #7
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	4809      	ldr	r0, [pc, #36]	@ (80019cc <HAL_UART_MspInit+0x9c>)
 80019a6:	f000 fae9 	bl	8001f7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	2026      	movs	r0, #38	@ 0x26
 80019b0:	f000 fa0f 	bl	8001dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019b4:	2026      	movs	r0, #38	@ 0x26
 80019b6:	f000 fa28 	bl	8001e0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80019ba:	bf00      	nop
 80019bc:	3728      	adds	r7, #40	@ 0x28
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40004400 	.word	0x40004400
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020000 	.word	0x40020000

080019d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <NMI_Handler+0x4>

080019d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <HardFault_Handler+0x4>

080019e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <MemManage_Handler+0x4>

080019e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <BusFault_Handler+0x4>

080019f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <UsageFault_Handler+0x4>

080019f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0){
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <SysTick_Handler+0x38>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <SysTick_Handler+0x18>
	Timer1--;
 8001a30:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <SysTick_Handler+0x38>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <SysTick_Handler+0x38>)
 8001a3a:	801a      	strh	r2, [r3, #0]
	}
	if(Timer2 > 0){
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <SysTick_Handler+0x3c>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <SysTick_Handler+0x2c>
	Timer2--;
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <SysTick_Handler+0x3c>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <SysTick_Handler+0x3c>)
 8001a4e:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a50:	f000 f8a0 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001a54:	f000 f9f3 	bl	8001e3e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000044 	.word	0x20000044
 8001a60:	20000046 	.word	0x20000046

08001a64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a68:	4802      	ldr	r0, [pc, #8]	@ (8001a74 <USART2_IRQHandler+0x10>)
 8001a6a:	f001 fe65 	bl	8003738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200000a4 	.word	0x200000a4

08001a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <SystemInit+0x20>)
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a82:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <SystemInit+0x20>)
 8001a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ad4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001aa0:	f7ff ffea 	bl	8001a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa4:	480c      	ldr	r0, [pc, #48]	@ (8001ad8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aa6:	490d      	ldr	r1, [pc, #52]	@ (8001adc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001abc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ae8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001aca:	f002 fdff 	bl	80046cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ace:	f7ff fca5 	bl	800141c <main>
  bx  lr    
 8001ad2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ad4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001adc:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001ae0:	08004754 	.word	0x08004754
  ldr r2, =_sbss
 8001ae4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001ae8:	20000130 	.word	0x20000130

08001aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <ADC_IRQHandler>
	...

08001af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b30 <HAL_Init+0x40>)
 8001afa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b00:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <HAL_Init+0x40>)
 8001b06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a07      	ldr	r2, [pc, #28]	@ (8001b30 <HAL_Init+0x40>)
 8001b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b18:	2003      	movs	r0, #3
 8001b1a:	f000 f94f 	bl	8001dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1e:	200f      	movs	r0, #15
 8001b20:	f000 f808 	bl	8001b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b24:	f7ff fe94 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023c00 	.word	0x40023c00

08001b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b3c:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <HAL_InitTick+0x54>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_InitTick+0x58>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f967 	bl	8001e26 <HAL_SYSTICK_Config>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00e      	b.n	8001b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b0f      	cmp	r3, #15
 8001b66:	d80a      	bhi.n	8001b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f000 f92f 	bl	8001dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b74:	4a06      	ldr	r2, [pc, #24]	@ (8001b90 <HAL_InitTick+0x5c>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e000      	b.n	8001b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000008 	.word	0x20000008
 8001b8c:	20000010 	.word	0x20000010
 8001b90:	2000000c 	.word	0x2000000c

08001b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_IncTick+0x20>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_IncTick+0x24>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <HAL_IncTick+0x24>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000010 	.word	0x20000010
 8001bb8:	20000118 	.word	0x20000118

08001bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <HAL_GetTick+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000118 	.word	0x20000118

08001bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff ffee 	bl	8001bbc <HAL_GetTick>
 8001be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bec:	d005      	beq.n	8001bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_Delay+0x44>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bfa:	bf00      	nop
 8001bfc:	f7ff ffde 	bl	8001bbc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d8f7      	bhi.n	8001bfc <HAL_Delay+0x28>
  {
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000010 	.word	0x20000010

08001c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c68:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <__NVIC_GetPriorityGrouping+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	f003 0307 	and.w	r3, r3, #7
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db0b      	blt.n	8001caa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4907      	ldr	r1, [pc, #28]	@ (8001cb8 <__NVIC_EnableIRQ+0x38>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	db0a      	blt.n	8001ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	490c      	ldr	r1, [pc, #48]	@ (8001d08 <__NVIC_SetPriority+0x4c>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce4:	e00a      	b.n	8001cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4908      	ldr	r1, [pc, #32]	@ (8001d0c <__NVIC_SetPriority+0x50>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3b04      	subs	r3, #4
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	761a      	strb	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	@ 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f1c3 0307 	rsb	r3, r3, #7
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf28      	it	cs
 8001d2e:	2304      	movcs	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d902      	bls.n	8001d40 <NVIC_EncodePriority+0x30>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3b03      	subs	r3, #3
 8001d3e:	e000      	b.n	8001d42 <NVIC_EncodePriority+0x32>
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	4313      	orrs	r3, r2
         );
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	@ 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d88:	d301      	bcc.n	8001d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00f      	b.n	8001dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <SysTick_Config+0x40>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d96:	210f      	movs	r1, #15
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f7ff ff8e 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <SysTick_Config+0x40>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da6:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <SysTick_Config+0x40>)
 8001da8:	2207      	movs	r2, #7
 8001daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	e000e010 	.word	0xe000e010

08001dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ff29 	bl	8001c1c <__NVIC_SetPriorityGrouping>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de4:	f7ff ff3e 	bl	8001c64 <__NVIC_GetPriorityGrouping>
 8001de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	6978      	ldr	r0, [r7, #20]
 8001df0:	f7ff ff8e 	bl	8001d10 <NVIC_EncodePriority>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff5d 	bl	8001cbc <__NVIC_SetPriority>
}
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff31 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ffa2 	bl	8001d78 <SysTick_Config>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001e42:	f000 f802 	bl	8001e4a <HAL_SYSTICK_Callback>
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e66:	f7ff fea9 	bl	8001bbc <HAL_GetTick>
 8001e6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d008      	beq.n	8001e8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2280      	movs	r2, #128	@ 0x80
 8001e7c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e052      	b.n	8001f30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0216 	bic.w	r2, r2, #22
 8001e98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ea8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d103      	bne.n	8001eba <HAL_DMA_Abort+0x62>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0208 	bic.w	r2, r2, #8
 8001ec8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eda:	e013      	b.n	8001f04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001edc:	f7ff fe6e 	bl	8001bbc <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b05      	cmp	r3, #5
 8001ee8:	d90c      	bls.n	8001f04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2220      	movs	r2, #32
 8001eee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e015      	b.n	8001f30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1e4      	bne.n	8001edc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f16:	223f      	movs	r2, #63	@ 0x3f
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d004      	beq.n	8001f56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2280      	movs	r2, #128	@ 0x80
 8001f50:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00c      	b.n	8001f70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2205      	movs	r2, #5
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	@ 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	e165      	b.n	8002264 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	f040 8154 	bne.w	800225e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d005      	beq.n	8001fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d130      	bne.n	8002030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	2203      	movs	r2, #3
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002004:	2201      	movs	r2, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 0201 	and.w	r2, r3, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b03      	cmp	r3, #3
 800203a:	d017      	beq.n	800206c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d123      	bne.n	80020c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	08da      	lsrs	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3208      	adds	r2, #8
 8002080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	220f      	movs	r2, #15
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	69b9      	ldr	r1, [r7, #24]
 80020bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0203 	and.w	r2, r3, #3
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80ae 	beq.w	800225e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b5d      	ldr	r3, [pc, #372]	@ (800227c <HAL_GPIO_Init+0x300>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210a:	4a5c      	ldr	r2, [pc, #368]	@ (800227c <HAL_GPIO_Init+0x300>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002110:	6453      	str	r3, [r2, #68]	@ 0x44
 8002112:	4b5a      	ldr	r3, [pc, #360]	@ (800227c <HAL_GPIO_Init+0x300>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800211e:	4a58      	ldr	r2, [pc, #352]	@ (8002280 <HAL_GPIO_Init+0x304>)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	3302      	adds	r3, #2
 8002126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	220f      	movs	r2, #15
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4f      	ldr	r2, [pc, #316]	@ (8002284 <HAL_GPIO_Init+0x308>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d025      	beq.n	8002196 <HAL_GPIO_Init+0x21a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4e      	ldr	r2, [pc, #312]	@ (8002288 <HAL_GPIO_Init+0x30c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01f      	beq.n	8002192 <HAL_GPIO_Init+0x216>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4d      	ldr	r2, [pc, #308]	@ (800228c <HAL_GPIO_Init+0x310>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d019      	beq.n	800218e <HAL_GPIO_Init+0x212>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4c      	ldr	r2, [pc, #304]	@ (8002290 <HAL_GPIO_Init+0x314>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0x20e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4b      	ldr	r2, [pc, #300]	@ (8002294 <HAL_GPIO_Init+0x318>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00d      	beq.n	8002186 <HAL_GPIO_Init+0x20a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4a      	ldr	r2, [pc, #296]	@ (8002298 <HAL_GPIO_Init+0x31c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <HAL_GPIO_Init+0x206>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a49      	ldr	r2, [pc, #292]	@ (800229c <HAL_GPIO_Init+0x320>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_GPIO_Init+0x202>
 800217a:	2306      	movs	r3, #6
 800217c:	e00c      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 800217e:	2307      	movs	r3, #7
 8002180:	e00a      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 8002182:	2305      	movs	r3, #5
 8002184:	e008      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 8002186:	2304      	movs	r3, #4
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 800218a:	2303      	movs	r3, #3
 800218c:	e004      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 800218e:	2302      	movs	r3, #2
 8002190:	e002      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 8002196:	2300      	movs	r3, #0
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	f002 0203 	and.w	r2, r2, #3
 800219e:	0092      	lsls	r2, r2, #2
 80021a0:	4093      	lsls	r3, r2
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a8:	4935      	ldr	r1, [pc, #212]	@ (8002280 <HAL_GPIO_Init+0x304>)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	3302      	adds	r3, #2
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b6:	4b3a      	ldr	r3, [pc, #232]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021da:	4a31      	ldr	r2, [pc, #196]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e0:	4b2f      	ldr	r3, [pc, #188]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002204:	4a26      	ldr	r2, [pc, #152]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800220a:	4b25      	ldr	r3, [pc, #148]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800222e:	4a1c      	ldr	r2, [pc, #112]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002234:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002258:	4a11      	ldr	r2, [pc, #68]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3301      	adds	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b0f      	cmp	r3, #15
 8002268:	f67f ae96 	bls.w	8001f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3724      	adds	r7, #36	@ 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	40013800 	.word	0x40013800
 8002284:	40020000 	.word	0x40020000
 8002288:	40020400 	.word	0x40020400
 800228c:	40020800 	.word	0x40020800
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40021000 	.word	0x40021000
 8002298:	40021400 	.word	0x40021400
 800229c:	40021800 	.word	0x40021800
 80022a0:	40013c00 	.word	0x40013c00

080022a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
 80022b0:	4613      	mov	r3, r2
 80022b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b4:	787b      	ldrb	r3, [r7, #1]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c0:	e003      	b.n	80022ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022c2:	887b      	ldrh	r3, [r7, #2]
 80022c4:	041a      	lsls	r2, r3, #16
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	619a      	str	r2, [r3, #24]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0cc      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ec:	4b68      	ldr	r3, [pc, #416]	@ (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d90c      	bls.n	8002314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b65      	ldr	r3, [pc, #404]	@ (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b63      	ldr	r3, [pc, #396]	@ (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0b8      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d020      	beq.n	8002362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800232c:	4b59      	ldr	r3, [pc, #356]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4a58      	ldr	r2, [pc, #352]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002344:	4b53      	ldr	r3, [pc, #332]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a52      	ldr	r2, [pc, #328]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800234e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002350:	4b50      	ldr	r3, [pc, #320]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	494d      	ldr	r1, [pc, #308]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d044      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b47      	ldr	r3, [pc, #284]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d119      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e07f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d003      	beq.n	8002396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002392:	2b03      	cmp	r3, #3
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002396:	4b3f      	ldr	r3, [pc, #252]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e06f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e067      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b6:	4b37      	ldr	r3, [pc, #220]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f023 0203 	bic.w	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4934      	ldr	r1, [pc, #208]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c8:	f7ff fbf8 	bl	8001bbc <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d0:	f7ff fbf4 	bl	8001bbc <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e04f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 020c 	and.w	r2, r3, #12
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d1eb      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f8:	4b25      	ldr	r3, [pc, #148]	@ (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d20c      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b22      	ldr	r3, [pc, #136]	@ (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e032      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800242c:	4b19      	ldr	r3, [pc, #100]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4916      	ldr	r1, [pc, #88]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800244a:	4b12      	ldr	r3, [pc, #72]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	490e      	ldr	r1, [pc, #56]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800245e:	f000 f855 	bl	800250c <HAL_RCC_GetSysClockFreq>
 8002462:	4602      	mov	r2, r0
 8002464:	4b0b      	ldr	r3, [pc, #44]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	490a      	ldr	r1, [pc, #40]	@ (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	5ccb      	ldrb	r3, [r1, r3]
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	4a09      	ldr	r2, [pc, #36]	@ (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800247a:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fb58 	bl	8001b34 <HAL_InitTick>

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023c00 	.word	0x40023c00
 8002494:	40023800 	.word	0x40023800
 8002498:	0800472c 	.word	0x0800472c
 800249c:	20000008 	.word	0x20000008
 80024a0:	2000000c 	.word	0x2000000c

080024a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a8:	4b03      	ldr	r3, [pc, #12]	@ (80024b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000008 	.word	0x20000008

080024bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024c0:	f7ff fff0 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	0a9b      	lsrs	r3, r3, #10
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	4903      	ldr	r1, [pc, #12]	@ (80024e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d2:	5ccb      	ldrb	r3, [r1, r3]
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40023800 	.word	0x40023800
 80024e0:	0800473c 	.word	0x0800473c

080024e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024e8:	f7ff ffdc 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b05      	ldr	r3, [pc, #20]	@ (8002504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0b5b      	lsrs	r3, r3, #13
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4903      	ldr	r1, [pc, #12]	@ (8002508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	0800473c 	.word	0x0800473c

0800250c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800250c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002510:	b0a6      	sub	sp, #152	@ 0x98
 8002512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002532:	4bc8      	ldr	r3, [pc, #800]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x348>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b0c      	cmp	r3, #12
 800253c:	f200 817e 	bhi.w	800283c <HAL_RCC_GetSysClockFreq+0x330>
 8002540:	a201      	add	r2, pc, #4	@ (adr r2, 8002548 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002546:	bf00      	nop
 8002548:	0800257d 	.word	0x0800257d
 800254c:	0800283d 	.word	0x0800283d
 8002550:	0800283d 	.word	0x0800283d
 8002554:	0800283d 	.word	0x0800283d
 8002558:	08002585 	.word	0x08002585
 800255c:	0800283d 	.word	0x0800283d
 8002560:	0800283d 	.word	0x0800283d
 8002564:	0800283d 	.word	0x0800283d
 8002568:	0800258d 	.word	0x0800258d
 800256c:	0800283d 	.word	0x0800283d
 8002570:	0800283d 	.word	0x0800283d
 8002574:	0800283d 	.word	0x0800283d
 8002578:	080026f7 	.word	0x080026f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800257c:	4bb6      	ldr	r3, [pc, #728]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x34c>)
 800257e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8002582:	e15f      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002584:	4bb5      	ldr	r3, [pc, #724]	@ (800285c <HAL_RCC_GetSysClockFreq+0x350>)
 8002586:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800258a:	e15b      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800258c:	4bb1      	ldr	r3, [pc, #708]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x348>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002594:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002598:	4bae      	ldr	r3, [pc, #696]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x348>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d031      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a4:	4bab      	ldr	r3, [pc, #684]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x348>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	099b      	lsrs	r3, r3, #6
 80025aa:	2200      	movs	r2, #0
 80025ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80025b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80025b8:	2300      	movs	r3, #0
 80025ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80025bc:	4ba7      	ldr	r3, [pc, #668]	@ (800285c <HAL_RCC_GetSysClockFreq+0x350>)
 80025be:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80025c2:	462a      	mov	r2, r5
 80025c4:	fb03 f202 	mul.w	r2, r3, r2
 80025c8:	2300      	movs	r3, #0
 80025ca:	4621      	mov	r1, r4
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	4aa2      	ldr	r2, [pc, #648]	@ (800285c <HAL_RCC_GetSysClockFreq+0x350>)
 80025d4:	4621      	mov	r1, r4
 80025d6:	fba1 1202 	umull	r1, r2, r1, r2
 80025da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80025dc:	460a      	mov	r2, r1
 80025de:	67ba      	str	r2, [r7, #120]	@ 0x78
 80025e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80025e2:	4413      	add	r3, r2
 80025e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025ea:	2200      	movs	r2, #0
 80025ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025ee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80025f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025f4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80025f8:	f7fd fe04 	bl	8000204 <__aeabi_uldivmod>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4613      	mov	r3, r2
 8002602:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002606:	e064      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002608:	4b92      	ldr	r3, [pc, #584]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x348>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	099b      	lsrs	r3, r3, #6
 800260e:	2200      	movs	r2, #0
 8002610:	653b      	str	r3, [r7, #80]	@ 0x50
 8002612:	657a      	str	r2, [r7, #84]	@ 0x54
 8002614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800261a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800261c:	2300      	movs	r3, #0
 800261e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002620:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002624:	4622      	mov	r2, r4
 8002626:	462b      	mov	r3, r5
 8002628:	f04f 0000 	mov.w	r0, #0
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	0159      	lsls	r1, r3, #5
 8002632:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002636:	0150      	lsls	r0, r2, #5
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4621      	mov	r1, r4
 800263e:	1a51      	subs	r1, r2, r1
 8002640:	6139      	str	r1, [r7, #16]
 8002642:	4629      	mov	r1, r5
 8002644:	eb63 0301 	sbc.w	r3, r3, r1
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002656:	4659      	mov	r1, fp
 8002658:	018b      	lsls	r3, r1, #6
 800265a:	4651      	mov	r1, sl
 800265c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002660:	4651      	mov	r1, sl
 8002662:	018a      	lsls	r2, r1, #6
 8002664:	4651      	mov	r1, sl
 8002666:	ebb2 0801 	subs.w	r8, r2, r1
 800266a:	4659      	mov	r1, fp
 800266c:	eb63 0901 	sbc.w	r9, r3, r1
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800267c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002680:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002684:	4690      	mov	r8, r2
 8002686:	4699      	mov	r9, r3
 8002688:	4623      	mov	r3, r4
 800268a:	eb18 0303 	adds.w	r3, r8, r3
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	462b      	mov	r3, r5
 8002692:	eb49 0303 	adc.w	r3, r9, r3
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026a4:	4629      	mov	r1, r5
 80026a6:	028b      	lsls	r3, r1, #10
 80026a8:	4621      	mov	r1, r4
 80026aa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026ae:	4621      	mov	r1, r4
 80026b0:	028a      	lsls	r2, r1, #10
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026ba:	2200      	movs	r2, #0
 80026bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80026be:	647a      	str	r2, [r7, #68]	@ 0x44
 80026c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026c4:	f7fd fd9e 	bl	8000204 <__aeabi_uldivmod>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4613      	mov	r3, r2
 80026ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026d2:	4b60      	ldr	r3, [pc, #384]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x348>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	0c1b      	lsrs	r3, r3, #16
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	3301      	adds	r3, #1
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80026e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80026e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80026f4:	e0a6      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026f6:	4b57      	ldr	r3, [pc, #348]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x348>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002702:	4b54      	ldr	r3, [pc, #336]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x348>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d02a      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270e:	4b51      	ldr	r3, [pc, #324]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x348>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	099b      	lsrs	r3, r3, #6
 8002714:	2200      	movs	r2, #0
 8002716:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002718:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800271a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800271c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002720:	2100      	movs	r1, #0
 8002722:	4b4e      	ldr	r3, [pc, #312]	@ (800285c <HAL_RCC_GetSysClockFreq+0x350>)
 8002724:	fb03 f201 	mul.w	r2, r3, r1
 8002728:	2300      	movs	r3, #0
 800272a:	fb00 f303 	mul.w	r3, r0, r3
 800272e:	4413      	add	r3, r2
 8002730:	4a4a      	ldr	r2, [pc, #296]	@ (800285c <HAL_RCC_GetSysClockFreq+0x350>)
 8002732:	fba0 1202 	umull	r1, r2, r0, r2
 8002736:	677a      	str	r2, [r7, #116]	@ 0x74
 8002738:	460a      	mov	r2, r1
 800273a:	673a      	str	r2, [r7, #112]	@ 0x70
 800273c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800273e:	4413      	add	r3, r2
 8002740:	677b      	str	r3, [r7, #116]	@ 0x74
 8002742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002746:	2200      	movs	r2, #0
 8002748:	633b      	str	r3, [r7, #48]	@ 0x30
 800274a:	637a      	str	r2, [r7, #52]	@ 0x34
 800274c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002750:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002754:	f7fd fd56 	bl	8000204 <__aeabi_uldivmod>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4613      	mov	r3, r2
 800275e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002762:	e05b      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002764:	4b3b      	ldr	r3, [pc, #236]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x348>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	2200      	movs	r2, #0
 800276c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800276e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002776:	623b      	str	r3, [r7, #32]
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
 800277c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002780:	4642      	mov	r2, r8
 8002782:	464b      	mov	r3, r9
 8002784:	f04f 0000 	mov.w	r0, #0
 8002788:	f04f 0100 	mov.w	r1, #0
 800278c:	0159      	lsls	r1, r3, #5
 800278e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002792:	0150      	lsls	r0, r2, #5
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4641      	mov	r1, r8
 800279a:	ebb2 0a01 	subs.w	sl, r2, r1
 800279e:	4649      	mov	r1, r9
 80027a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027b8:	ebb2 040a 	subs.w	r4, r2, sl
 80027bc:	eb63 050b 	sbc.w	r5, r3, fp
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	00eb      	lsls	r3, r5, #3
 80027ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ce:	00e2      	lsls	r2, r4, #3
 80027d0:	4614      	mov	r4, r2
 80027d2:	461d      	mov	r5, r3
 80027d4:	4643      	mov	r3, r8
 80027d6:	18e3      	adds	r3, r4, r3
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	464b      	mov	r3, r9
 80027dc:	eb45 0303 	adc.w	r3, r5, r3
 80027e0:	607b      	str	r3, [r7, #4]
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ee:	4629      	mov	r1, r5
 80027f0:	028b      	lsls	r3, r1, #10
 80027f2:	4621      	mov	r1, r4
 80027f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027f8:	4621      	mov	r1, r4
 80027fa:	028a      	lsls	r2, r1, #10
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002804:	2200      	movs	r2, #0
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	61fa      	str	r2, [r7, #28]
 800280a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800280e:	f7fd fcf9 	bl	8000204 <__aeabi_uldivmod>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4613      	mov	r3, r2
 8002818:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800281c:	4b0d      	ldr	r3, [pc, #52]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x348>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	0f1b      	lsrs	r3, r3, #28
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 800282a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800282e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002832:	fbb2 f3f3 	udiv	r3, r2, r3
 8002836:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800283a:	e003      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800283c:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x34c>)
 800283e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002842:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002844:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002848:	4618      	mov	r0, r3
 800284a:	3798      	adds	r7, #152	@ 0x98
 800284c:	46bd      	mov	sp, r7
 800284e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800
 8002858:	00f42400 	.word	0x00f42400
 800285c:	017d7840 	.word	0x017d7840

08002860 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e28d      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8083 	beq.w	8002986 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002880:	4b94      	ldr	r3, [pc, #592]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b04      	cmp	r3, #4
 800288a:	d019      	beq.n	80028c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800288c:	4b91      	ldr	r3, [pc, #580]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002894:	2b08      	cmp	r3, #8
 8002896:	d106      	bne.n	80028a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002898:	4b8e      	ldr	r3, [pc, #568]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028a4:	d00c      	beq.n	80028c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a6:	4b8b      	ldr	r3, [pc, #556]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d112      	bne.n	80028d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b2:	4b88      	ldr	r3, [pc, #544]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028be:	d10b      	bne.n	80028d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	4b84      	ldr	r3, [pc, #528]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d05b      	beq.n	8002984 <HAL_RCC_OscConfig+0x124>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d157      	bne.n	8002984 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e25a      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e0:	d106      	bne.n	80028f0 <HAL_RCC_OscConfig+0x90>
 80028e2:	4b7c      	ldr	r3, [pc, #496]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7b      	ldr	r2, [pc, #492]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e01d      	b.n	800292c <HAL_RCC_OscConfig+0xcc>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0xb4>
 80028fa:	4b76      	ldr	r3, [pc, #472]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a75      	ldr	r2, [pc, #468]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b73      	ldr	r3, [pc, #460]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a72      	ldr	r2, [pc, #456]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0xcc>
 8002914:	4b6f      	ldr	r3, [pc, #444]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a6e      	ldr	r2, [pc, #440]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 800291a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b6c      	ldr	r3, [pc, #432]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a6b      	ldr	r2, [pc, #428]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800292a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7ff f942 	bl	8001bbc <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293c:	f7ff f93e 	bl	8001bbc <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	@ 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e21f      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	4b61      	ldr	r3, [pc, #388]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0xdc>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7ff f92e 	bl	8001bbc <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002964:	f7ff f92a 	bl	8001bbc <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	@ 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e20b      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	4b57      	ldr	r3, [pc, #348]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x104>
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d06f      	beq.n	8002a72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002992:	4b50      	ldr	r3, [pc, #320]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b00      	cmp	r3, #0
 800299c:	d017      	beq.n	80029ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800299e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d105      	bne.n	80029b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029aa:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b6:	4b47      	ldr	r3, [pc, #284]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d11c      	bne.n	80029fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c2:	4b44      	ldr	r3, [pc, #272]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d116      	bne.n	80029fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	4b41      	ldr	r3, [pc, #260]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_RCC_OscConfig+0x186>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e1d3      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4937      	ldr	r1, [pc, #220]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fa:	e03a      	b.n	8002a72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a04:	4b34      	ldr	r3, [pc, #208]	@ (8002ad8 <HAL_RCC_OscConfig+0x278>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7ff f8d7 	bl	8001bbc <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a12:	f7ff f8d3 	bl	8001bbc <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e1b4      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4b28      	ldr	r3, [pc, #160]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4925      	ldr	r1, [pc, #148]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]
 8002a44:	e015      	b.n	8002a72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a46:	4b24      	ldr	r3, [pc, #144]	@ (8002ad8 <HAL_RCC_OscConfig+0x278>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7ff f8b6 	bl	8001bbc <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a54:	f7ff f8b2 	bl	8001bbc <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e193      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d036      	beq.n	8002aec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d016      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a86:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <HAL_RCC_OscConfig+0x27c>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7ff f896 	bl	8001bbc <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a94:	f7ff f892 	bl	8001bbc <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e173      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x234>
 8002ab2:	e01b      	b.n	8002aec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab4:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <HAL_RCC_OscConfig+0x27c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aba:	f7ff f87f 	bl	8001bbc <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	e00e      	b.n	8002ae0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7ff f87b 	bl	8001bbc <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d907      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e15c      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	42470000 	.word	0x42470000
 8002adc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae0:	4b8a      	ldr	r3, [pc, #552]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ea      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8097 	beq.w	8002c28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afe:	4b83      	ldr	r3, [pc, #524]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10f      	bne.n	8002b2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	4a7e      	ldr	r2, [pc, #504]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b1a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b26:	2301      	movs	r3, #1
 8002b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2a:	4b79      	ldr	r3, [pc, #484]	@ (8002d10 <HAL_RCC_OscConfig+0x4b0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d118      	bne.n	8002b68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b36:	4b76      	ldr	r3, [pc, #472]	@ (8002d10 <HAL_RCC_OscConfig+0x4b0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a75      	ldr	r2, [pc, #468]	@ (8002d10 <HAL_RCC_OscConfig+0x4b0>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b42:	f7ff f83b 	bl	8001bbc <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4a:	f7ff f837 	bl	8001bbc <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e118      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002d10 <HAL_RCC_OscConfig+0x4b0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x31e>
 8002b70:	4b66      	ldr	r3, [pc, #408]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b74:	4a65      	ldr	r2, [pc, #404]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7c:	e01c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x358>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x340>
 8002b86:	4b61      	ldr	r3, [pc, #388]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8a:	4a60      	ldr	r2, [pc, #384]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b92:	4b5e      	ldr	r3, [pc, #376]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b96:	4a5d      	ldr	r2, [pc, #372]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b9e:	e00b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x358>
 8002ba0:	4b5a      	ldr	r3, [pc, #360]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba4:	4a59      	ldr	r2, [pc, #356]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bac:	4b57      	ldr	r3, [pc, #348]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb0:	4a56      	ldr	r2, [pc, #344]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002bb2:	f023 0304 	bic.w	r3, r3, #4
 8002bb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d015      	beq.n	8002bec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7fe fffc 	bl	8001bbc <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fe fff8 	bl	8001bbc <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0d7      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bde:	4b4b      	ldr	r3, [pc, #300]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0ee      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x368>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7fe ffe6 	bl	8001bbc <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf4:	f7fe ffe2 	bl	8001bbc <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e0c1      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0a:	4b40      	ldr	r3, [pc, #256]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1ee      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c20:	4a3a      	ldr	r2, [pc, #232]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002c22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80ad 	beq.w	8002d8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c32:	4b36      	ldr	r3, [pc, #216]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d060      	beq.n	8002d00 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d145      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c46:	4b33      	ldr	r3, [pc, #204]	@ (8002d14 <HAL_RCC_OscConfig+0x4b4>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe ffb6 	bl	8001bbc <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c54:	f7fe ffb2 	bl	8001bbc <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e093      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	4b29      	ldr	r3, [pc, #164]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69da      	ldr	r2, [r3, #28]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	019b      	lsls	r3, r3, #6
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c88:	085b      	lsrs	r3, r3, #1
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c94:	061b      	lsls	r3, r3, #24
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9c:	071b      	lsls	r3, r3, #28
 8002c9e:	491b      	ldr	r1, [pc, #108]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d14 <HAL_RCC_OscConfig+0x4b4>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7fe ff87 	bl	8001bbc <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb2:	f7fe ff83 	bl	8001bbc <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e064      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc4:	4b11      	ldr	r3, [pc, #68]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x452>
 8002cd0:	e05c      	b.n	8002d8c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd2:	4b10      	ldr	r3, [pc, #64]	@ (8002d14 <HAL_RCC_OscConfig+0x4b4>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fe ff70 	bl	8001bbc <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe ff6c 	bl	8001bbc <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e04d      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <HAL_RCC_OscConfig+0x4ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x480>
 8002cfe:	e045      	b.n	8002d8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d107      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e040      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40007000 	.word	0x40007000
 8002d14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d18:	4b1f      	ldr	r3, [pc, #124]	@ (8002d98 <HAL_RCC_OscConfig+0x538>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d030      	beq.n	8002d88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d129      	bne.n	8002d88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d122      	bne.n	8002d88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d48:	4013      	ands	r3, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d119      	bne.n	8002d88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5e:	085b      	lsrs	r3, r3, #1
 8002d60:	3b01      	subs	r3, #1
 8002d62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d10f      	bne.n	8002d88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d107      	bne.n	8002d88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800

08002d9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e07b      	b.n	8002ea6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d108      	bne.n	8002dc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dbe:	d009      	beq.n	8002dd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61da      	str	r2, [r3, #28]
 8002dc6:	e005      	b.n	8002dd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe fd56 	bl	80018a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e58:	ea42 0103 	orr.w	r1, r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	f003 0104 	and.w	r1, r3, #4
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	f003 0210 	and.w	r2, r3, #16
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b088      	sub	sp, #32
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_SPI_Transmit+0x22>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e12d      	b.n	800312c <HAL_SPI_Transmit+0x27e>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed8:	f7fe fe70 	bl	8001bbc <HAL_GetTick>
 8002edc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d002      	beq.n	8002ef4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ef2:	e116      	b.n	8003122 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_SPI_Transmit+0x52>
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f04:	e10d      	b.n	8003122 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2203      	movs	r2, #3
 8002f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f4c:	d10f      	bne.n	8002f6e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f78:	2b40      	cmp	r3, #64	@ 0x40
 8002f7a:	d007      	beq.n	8002f8c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f94:	d14f      	bne.n	8003036 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_SPI_Transmit+0xf6>
 8002f9e:	8afb      	ldrh	r3, [r7, #22]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d142      	bne.n	800302a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	881a      	ldrh	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	1c9a      	adds	r2, r3, #2
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fc8:	e02f      	b.n	800302a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d112      	bne.n	8002ffe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	881a      	ldrh	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe8:	1c9a      	adds	r2, r3, #2
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ffc:	e015      	b.n	800302a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ffe:	f7fe fddd 	bl	8001bbc <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d803      	bhi.n	8003016 <HAL_SPI_Transmit+0x168>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d102      	bne.n	800301c <HAL_SPI_Transmit+0x16e>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003028:	e07b      	b.n	8003122 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1ca      	bne.n	8002fca <HAL_SPI_Transmit+0x11c>
 8003034:	e050      	b.n	80030d8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <HAL_SPI_Transmit+0x196>
 800303e:	8afb      	ldrh	r3, [r7, #22]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d144      	bne.n	80030ce <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	330c      	adds	r3, #12
 800304e:	7812      	ldrb	r2, [r2, #0]
 8003050:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800306a:	e030      	b.n	80030ce <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b02      	cmp	r3, #2
 8003078:	d113      	bne.n	80030a2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	330c      	adds	r3, #12
 8003084:	7812      	ldrb	r2, [r2, #0]
 8003086:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	86da      	strh	r2, [r3, #54]	@ 0x36
 80030a0:	e015      	b.n	80030ce <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030a2:	f7fe fd8b 	bl	8001bbc <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d803      	bhi.n	80030ba <HAL_SPI_Transmit+0x20c>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d102      	bne.n	80030c0 <HAL_SPI_Transmit+0x212>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80030cc:	e029      	b.n	8003122 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1c9      	bne.n	800306c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	6839      	ldr	r1, [r7, #0]
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 fa61 	bl	80035a4 <SPI_EndRxTxTransaction>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	77fb      	strb	r3, [r7, #31]
 8003118:	e003      	b.n	8003122 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800312a:	7ffb      	ldrb	r3, [r7, #31]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08c      	sub	sp, #48	@ 0x30
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003142:	2301      	movs	r3, #1
 8003144:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_SPI_TransmitReceive+0x26>
 8003156:	2302      	movs	r3, #2
 8003158:	e198      	b.n	800348c <HAL_SPI_TransmitReceive+0x358>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003162:	f7fe fd2b 	bl	8001bbc <HAL_GetTick>
 8003166:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003178:	887b      	ldrh	r3, [r7, #2]
 800317a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800317c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003180:	2b01      	cmp	r3, #1
 8003182:	d00f      	beq.n	80031a4 <HAL_SPI_TransmitReceive+0x70>
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800318a:	d107      	bne.n	800319c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d103      	bne.n	800319c <HAL_SPI_TransmitReceive+0x68>
 8003194:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003198:	2b04      	cmp	r3, #4
 800319a:	d003      	beq.n	80031a4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800319c:	2302      	movs	r3, #2
 800319e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80031a2:	e16d      	b.n	8003480 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_SPI_TransmitReceive+0x82>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <HAL_SPI_TransmitReceive+0x82>
 80031b0:	887b      	ldrh	r3, [r7, #2]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d103      	bne.n	80031be <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80031bc:	e160      	b.n	8003480 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d003      	beq.n	80031d2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2205      	movs	r2, #5
 80031ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	887a      	ldrh	r2, [r7, #2]
 80031e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	887a      	ldrh	r2, [r7, #2]
 80031f4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	887a      	ldrh	r2, [r7, #2]
 80031fa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003212:	2b40      	cmp	r3, #64	@ 0x40
 8003214:	d007      	beq.n	8003226 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800322e:	d17c      	bne.n	800332a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_SPI_TransmitReceive+0x10a>
 8003238:	8b7b      	ldrh	r3, [r7, #26]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d16a      	bne.n	8003314 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003242:	881a      	ldrh	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	1c9a      	adds	r2, r3, #2
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003262:	e057      	b.n	8003314 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b02      	cmp	r3, #2
 8003270:	d11b      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x176>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d016      	beq.n	80032aa <HAL_SPI_TransmitReceive+0x176>
 800327c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d113      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	881a      	ldrh	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003292:	1c9a      	adds	r2, r3, #2
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d119      	bne.n	80032ec <HAL_SPI_TransmitReceive+0x1b8>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d014      	beq.n	80032ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032cc:	b292      	uxth	r2, r2
 80032ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032e8:	2301      	movs	r3, #1
 80032ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032ec:	f7fe fc66 	bl	8001bbc <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d80b      	bhi.n	8003314 <HAL_SPI_TransmitReceive+0x1e0>
 80032fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d007      	beq.n	8003314 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003312:	e0b5      	b.n	8003480 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1a2      	bne.n	8003264 <HAL_SPI_TransmitReceive+0x130>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d19d      	bne.n	8003264 <HAL_SPI_TransmitReceive+0x130>
 8003328:	e080      	b.n	800342c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_SPI_TransmitReceive+0x204>
 8003332:	8b7b      	ldrh	r3, [r7, #26]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d16f      	bne.n	8003418 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	330c      	adds	r3, #12
 8003342:	7812      	ldrb	r2, [r2, #0]
 8003344:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800335e:	e05b      	b.n	8003418 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b02      	cmp	r3, #2
 800336c:	d11c      	bne.n	80033a8 <HAL_SPI_TransmitReceive+0x274>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d017      	beq.n	80033a8 <HAL_SPI_TransmitReceive+0x274>
 8003378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337a:	2b01      	cmp	r3, #1
 800337c:	d114      	bne.n	80033a8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	330c      	adds	r3, #12
 8003388:	7812      	ldrb	r2, [r2, #0]
 800338a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d119      	bne.n	80033ea <HAL_SPI_TransmitReceive+0x2b6>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d014      	beq.n	80033ea <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033e6:	2301      	movs	r3, #1
 80033e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033ea:	f7fe fbe7 	bl	8001bbc <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d803      	bhi.n	8003402 <HAL_SPI_TransmitReceive+0x2ce>
 80033fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d102      	bne.n	8003408 <HAL_SPI_TransmitReceive+0x2d4>
 8003402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003404:	2b00      	cmp	r3, #0
 8003406:	d107      	bne.n	8003418 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003416:	e033      	b.n	8003480 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d19e      	bne.n	8003360 <HAL_SPI_TransmitReceive+0x22c>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d199      	bne.n	8003360 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800342c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f8b7 	bl	80035a4 <SPI_EndRxTxTransaction>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d006      	beq.n	800344a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2220      	movs	r2, #32
 8003446:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003448:	e01a      	b.n	8003480 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10a      	bne.n	8003468 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003476:	e003      	b.n	8003480 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003488:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800348c:	4618      	mov	r0, r3
 800348e:	3730      	adds	r7, #48	@ 0x30
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034a4:	f7fe fb8a 	bl	8001bbc <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034b4:	f7fe fb82 	bl	8001bbc <HAL_GetTick>
 80034b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034ba:	4b39      	ldr	r3, [pc, #228]	@ (80035a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	015b      	lsls	r3, r3, #5
 80034c0:	0d1b      	lsrs	r3, r3, #20
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	fb02 f303 	mul.w	r3, r2, r3
 80034c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ca:	e054      	b.n	8003576 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d2:	d050      	beq.n	8003576 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034d4:	f7fe fb72 	bl	8001bbc <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d902      	bls.n	80034ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d13d      	bne.n	8003566 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003502:	d111      	bne.n	8003528 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800350c:	d004      	beq.n	8003518 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003516:	d107      	bne.n	8003528 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003526:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003530:	d10f      	bne.n	8003552 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003550:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e017      	b.n	8003596 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3b01      	subs	r3, #1
 8003574:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	429a      	cmp	r2, r3
 8003592:	d19b      	bne.n	80034cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000008 	.word	0x20000008

080035a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2201      	movs	r2, #1
 80035b8:	2102      	movs	r1, #2
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7ff ff6a 	bl	8003494 <SPI_WaitFlagStateUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ca:	f043 0220 	orr.w	r2, r3, #32
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e032      	b.n	800363c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003644 <SPI_EndRxTxTransaction+0xa0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1b      	ldr	r2, [pc, #108]	@ (8003648 <SPI_EndRxTxTransaction+0xa4>)
 80035dc:	fba2 2303 	umull	r2, r3, r2, r3
 80035e0:	0d5b      	lsrs	r3, r3, #21
 80035e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035f4:	d112      	bne.n	800361c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2180      	movs	r1, #128	@ 0x80
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff ff47 	bl	8003494 <SPI_WaitFlagStateUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d016      	beq.n	800363a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003610:	f043 0220 	orr.w	r2, r3, #32
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e00f      	b.n	800363c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	3b01      	subs	r3, #1
 8003626:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003632:	2b80      	cmp	r3, #128	@ 0x80
 8003634:	d0f2      	beq.n	800361c <SPI_EndRxTxTransaction+0x78>
 8003636:	e000      	b.n	800363a <SPI_EndRxTxTransaction+0x96>
        break;
 8003638:	bf00      	nop
  }

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000008 	.word	0x20000008
 8003648:	165e9f81 	.word	0x165e9f81

0800364c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e042      	b.n	80036e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fe f95c 	bl	8001930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2224      	movs	r2, #36	@ 0x24
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800368e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fcdb 	bl	800404c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b20      	cmp	r3, #32
 8003704:	d112      	bne.n	800372c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_UART_Receive_IT+0x26>
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e00b      	b.n	800372e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	461a      	mov	r2, r3
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 faba 	bl	8003c9c <UART_Start_Receive_IT>
 8003728:	4603      	mov	r3, r0
 800372a:	e000      	b.n	800372e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800372c:	2302      	movs	r3, #2
  }
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b0ba      	sub	sp, #232	@ 0xe8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800375e:	2300      	movs	r3, #0
 8003760:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003764:	2300      	movs	r3, #0
 8003766:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10f      	bne.n	800379e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800377e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_UART_IRQHandler+0x66>
 800378a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fb99 	bl	8003ece <UART_Receive_IT>
      return;
 800379c:	e25b      	b.n	8003c56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800379e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 80de 	beq.w	8003964 <HAL_UART_IRQHandler+0x22c>
 80037a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80d1 	beq.w	8003964 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <HAL_UART_IRQHandler+0xae>
 80037ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	f043 0201 	orr.w	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00b      	beq.n	800380a <HAL_UART_IRQHandler+0xd2>
 80037f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	f043 0202 	orr.w	r2, r3, #2
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800380a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <HAL_UART_IRQHandler+0xf6>
 8003816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	f043 0204 	orr.w	r2, r3, #4
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800382e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d011      	beq.n	800385e <HAL_UART_IRQHandler+0x126>
 800383a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d105      	bne.n	8003852 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003856:	f043 0208 	orr.w	r2, r3, #8
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 81f2 	beq.w	8003c4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_UART_IRQHandler+0x14e>
 8003874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fb24 	bl	8003ece <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003890:	2b40      	cmp	r3, #64	@ 0x40
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <HAL_UART_IRQHandler+0x17a>
 80038aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d04f      	beq.n	8003952 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa2c 	bl	8003d10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c2:	2b40      	cmp	r3, #64	@ 0x40
 80038c4:	d141      	bne.n	800394a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3314      	adds	r3, #20
 80038cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3314      	adds	r3, #20
 80038ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800390a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1d9      	bne.n	80038c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d013      	beq.n	8003942 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391e:	4a7e      	ldr	r2, [pc, #504]	@ (8003b18 <HAL_UART_IRQHandler+0x3e0>)
 8003920:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fb06 	bl	8001f38 <HAL_DMA_Abort_IT>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d016      	beq.n	8003960 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800393c:	4610      	mov	r0, r2
 800393e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003940:	e00e      	b.n	8003960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f994 	bl	8003c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	e00a      	b.n	8003960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f990 	bl	8003c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003950:	e006      	b.n	8003960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f98c 	bl	8003c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800395e:	e175      	b.n	8003c4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003960:	bf00      	nop
    return;
 8003962:	e173      	b.n	8003c4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003968:	2b01      	cmp	r3, #1
 800396a:	f040 814f 	bne.w	8003c0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800396e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8148 	beq.w	8003c0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800397c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8141 	beq.w	8003c0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039aa:	2b40      	cmp	r3, #64	@ 0x40
 80039ac:	f040 80b6 	bne.w	8003b1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8145 	beq.w	8003c50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039ce:	429a      	cmp	r2, r3
 80039d0:	f080 813e 	bcs.w	8003c50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e6:	f000 8088 	beq.w	8003afa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1d9      	bne.n	80039ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3314      	adds	r3, #20
 8003a3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3314      	adds	r3, #20
 8003a56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e1      	bne.n	8003a36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3314      	adds	r3, #20
 8003a78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3314      	adds	r3, #20
 8003a92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003aa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e3      	bne.n	8003a72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	330c      	adds	r3, #12
 8003abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aca:	f023 0310 	bic.w	r3, r3, #16
 8003ace:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	330c      	adds	r3, #12
 8003ad8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003adc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ade:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ae2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ae4:	e841 2300 	strex	r3, r2, [r1]
 8003ae8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003aea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e3      	bne.n	8003ab8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe f9af 	bl	8001e58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2202      	movs	r2, #2
 8003afe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f8b7 	bl	8003c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b16:	e09b      	b.n	8003c50 <HAL_UART_IRQHandler+0x518>
 8003b18:	08003dd7 	.word	0x08003dd7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 808e 	beq.w	8003c54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8089 	beq.w	8003c54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	330c      	adds	r3, #12
 8003b48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	330c      	adds	r3, #12
 8003b62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b66:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e3      	bne.n	8003b42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3314      	adds	r3, #20
 8003b80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	623b      	str	r3, [r7, #32]
   return(result);
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3314      	adds	r3, #20
 8003b9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e3      	bne.n	8003b7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0310 	bic.w	r3, r3, #16
 8003bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	330c      	adds	r3, #12
 8003be0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003be4:	61fa      	str	r2, [r7, #28]
 8003be6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	69b9      	ldr	r1, [r7, #24]
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	617b      	str	r3, [r7, #20]
   return(result);
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e3      	bne.n	8003bc0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c02:	4619      	mov	r1, r3
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f83d 	bl	8003c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c0a:	e023      	b.n	8003c54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d009      	beq.n	8003c2c <HAL_UART_IRQHandler+0x4f4>
 8003c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f8ea 	bl	8003dfe <UART_Transmit_IT>
    return;
 8003c2a:	e014      	b.n	8003c56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00e      	beq.n	8003c56 <HAL_UART_IRQHandler+0x51e>
 8003c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f92a 	bl	8003e9e <UART_EndTransmit_IT>
    return;
 8003c4a:	e004      	b.n	8003c56 <HAL_UART_IRQHandler+0x51e>
    return;
 8003c4c:	bf00      	nop
 8003c4e:	e002      	b.n	8003c56 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c50:	bf00      	nop
 8003c52:	e000      	b.n	8003c56 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c54:	bf00      	nop
  }
}
 8003c56:	37e8      	adds	r7, #232	@ 0xe8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	88fa      	ldrh	r2, [r7, #6]
 8003cb4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	88fa      	ldrh	r2, [r7, #6]
 8003cba:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2222      	movs	r2, #34	@ 0x22
 8003cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ce0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0201 	orr.w	r2, r2, #1
 8003cf0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0220 	orr.w	r2, r2, #32
 8003d00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b095      	sub	sp, #84	@ 0x54
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	330c      	adds	r3, #12
 8003d36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d38:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e5      	bne.n	8003d18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3314      	adds	r3, #20
 8003d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3314      	adds	r3, #20
 8003d6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e5      	bne.n	8003d4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d119      	bne.n	8003dbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	e853 3f00 	ldrex	r3, [r3]
 8003d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f023 0310 	bic.w	r3, r3, #16
 8003d9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003da8:	61ba      	str	r2, [r7, #24]
 8003daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6979      	ldr	r1, [r7, #20]
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	613b      	str	r3, [r7, #16]
   return(result);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e5      	bne.n	8003d88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dca:	bf00      	nop
 8003dcc:	3754      	adds	r7, #84	@ 0x54
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f7ff ff3d 	bl	8003c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b21      	cmp	r3, #33	@ 0x21
 8003e10:	d13e      	bne.n	8003e90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e1a:	d114      	bne.n	8003e46 <UART_Transmit_IT+0x48>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d110      	bne.n	8003e46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	1c9a      	adds	r2, r3, #2
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	621a      	str	r2, [r3, #32]
 8003e44:	e008      	b.n	8003e58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	1c59      	adds	r1, r3, #1
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6211      	str	r1, [r2, #32]
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4619      	mov	r1, r3
 8003e66:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10f      	bne.n	8003e8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e000      	b.n	8003e92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e90:	2302      	movs	r3, #2
  }
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff fecc 	bl	8003c5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b08c      	sub	sp, #48	@ 0x30
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b22      	cmp	r3, #34	@ 0x22
 8003ee0:	f040 80ae 	bne.w	8004040 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eec:	d117      	bne.n	8003f1e <UART_Receive_IT+0x50>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d113      	bne.n	8003f1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f16:	1c9a      	adds	r2, r3, #2
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f1c:	e026      	b.n	8003f6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f30:	d007      	beq.n	8003f42 <UART_Receive_IT+0x74>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10a      	bne.n	8003f50 <UART_Receive_IT+0x82>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	e008      	b.n	8003f62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d15d      	bne.n	800403c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0220 	bic.w	r2, r2, #32
 8003f8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0201 	bic.w	r2, r2, #1
 8003fae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d135      	bne.n	8004032 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	613b      	str	r3, [r7, #16]
   return(result);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f023 0310 	bic.w	r3, r3, #16
 8003fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fec:	623a      	str	r2, [r7, #32]
 8003fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	69f9      	ldr	r1, [r7, #28]
 8003ff2:	6a3a      	ldr	r2, [r7, #32]
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e5      	bne.n	8003fcc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	2b10      	cmp	r3, #16
 800400c:	d10a      	bne.n	8004024 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004028:	4619      	mov	r1, r3
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fe2a 	bl	8003c84 <HAL_UARTEx_RxEventCallback>
 8004030:	e002      	b.n	8004038 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fd fb74 	bl	8001720 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	e002      	b.n	8004042 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	e000      	b.n	8004042 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004040:	2302      	movs	r3, #2
  }
}
 8004042:	4618      	mov	r0, r3
 8004044:	3730      	adds	r7, #48	@ 0x30
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800404c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004050:	b0c0      	sub	sp, #256	@ 0x100
 8004052:	af00      	add	r7, sp, #0
 8004054:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	68d9      	ldr	r1, [r3, #12]
 800406a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	ea40 0301 	orr.w	r3, r0, r1
 8004074:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	431a      	orrs	r2, r3
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	431a      	orrs	r2, r3
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040a4:	f021 010c 	bic.w	r1, r1, #12
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040b2:	430b      	orrs	r3, r1
 80040b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c6:	6999      	ldr	r1, [r3, #24]
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	ea40 0301 	orr.w	r3, r0, r1
 80040d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4b8f      	ldr	r3, [pc, #572]	@ (8004318 <UART_SetConfig+0x2cc>)
 80040dc:	429a      	cmp	r2, r3
 80040de:	d005      	beq.n	80040ec <UART_SetConfig+0xa0>
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	4b8d      	ldr	r3, [pc, #564]	@ (800431c <UART_SetConfig+0x2d0>)
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d104      	bne.n	80040f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040ec:	f7fe f9fa 	bl	80024e4 <HAL_RCC_GetPCLK2Freq>
 80040f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040f4:	e003      	b.n	80040fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040f6:	f7fe f9e1 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 80040fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004108:	f040 810c 	bne.w	8004324 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800410c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004110:	2200      	movs	r2, #0
 8004112:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004116:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800411a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800411e:	4622      	mov	r2, r4
 8004120:	462b      	mov	r3, r5
 8004122:	1891      	adds	r1, r2, r2
 8004124:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004126:	415b      	adcs	r3, r3
 8004128:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800412a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800412e:	4621      	mov	r1, r4
 8004130:	eb12 0801 	adds.w	r8, r2, r1
 8004134:	4629      	mov	r1, r5
 8004136:	eb43 0901 	adc.w	r9, r3, r1
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004146:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800414a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800414e:	4690      	mov	r8, r2
 8004150:	4699      	mov	r9, r3
 8004152:	4623      	mov	r3, r4
 8004154:	eb18 0303 	adds.w	r3, r8, r3
 8004158:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800415c:	462b      	mov	r3, r5
 800415e:	eb49 0303 	adc.w	r3, r9, r3
 8004162:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004172:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004176:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800417a:	460b      	mov	r3, r1
 800417c:	18db      	adds	r3, r3, r3
 800417e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004180:	4613      	mov	r3, r2
 8004182:	eb42 0303 	adc.w	r3, r2, r3
 8004186:	657b      	str	r3, [r7, #84]	@ 0x54
 8004188:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800418c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004190:	f7fc f838 	bl	8000204 <__aeabi_uldivmod>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4b61      	ldr	r3, [pc, #388]	@ (8004320 <UART_SetConfig+0x2d4>)
 800419a:	fba3 2302 	umull	r2, r3, r3, r2
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	011c      	lsls	r4, r3, #4
 80041a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041b4:	4642      	mov	r2, r8
 80041b6:	464b      	mov	r3, r9
 80041b8:	1891      	adds	r1, r2, r2
 80041ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041bc:	415b      	adcs	r3, r3
 80041be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041c4:	4641      	mov	r1, r8
 80041c6:	eb12 0a01 	adds.w	sl, r2, r1
 80041ca:	4649      	mov	r1, r9
 80041cc:	eb43 0b01 	adc.w	fp, r3, r1
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041e4:	4692      	mov	sl, r2
 80041e6:	469b      	mov	fp, r3
 80041e8:	4643      	mov	r3, r8
 80041ea:	eb1a 0303 	adds.w	r3, sl, r3
 80041ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041f2:	464b      	mov	r3, r9
 80041f4:	eb4b 0303 	adc.w	r3, fp, r3
 80041f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004208:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800420c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004210:	460b      	mov	r3, r1
 8004212:	18db      	adds	r3, r3, r3
 8004214:	643b      	str	r3, [r7, #64]	@ 0x40
 8004216:	4613      	mov	r3, r2
 8004218:	eb42 0303 	adc.w	r3, r2, r3
 800421c:	647b      	str	r3, [r7, #68]	@ 0x44
 800421e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004222:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004226:	f7fb ffed 	bl	8000204 <__aeabi_uldivmod>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4611      	mov	r1, r2
 8004230:	4b3b      	ldr	r3, [pc, #236]	@ (8004320 <UART_SetConfig+0x2d4>)
 8004232:	fba3 2301 	umull	r2, r3, r3, r1
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	2264      	movs	r2, #100	@ 0x64
 800423a:	fb02 f303 	mul.w	r3, r2, r3
 800423e:	1acb      	subs	r3, r1, r3
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004246:	4b36      	ldr	r3, [pc, #216]	@ (8004320 <UART_SetConfig+0x2d4>)
 8004248:	fba3 2302 	umull	r2, r3, r3, r2
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004254:	441c      	add	r4, r3
 8004256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800425a:	2200      	movs	r2, #0
 800425c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004260:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004264:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004268:	4642      	mov	r2, r8
 800426a:	464b      	mov	r3, r9
 800426c:	1891      	adds	r1, r2, r2
 800426e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004270:	415b      	adcs	r3, r3
 8004272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004274:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004278:	4641      	mov	r1, r8
 800427a:	1851      	adds	r1, r2, r1
 800427c:	6339      	str	r1, [r7, #48]	@ 0x30
 800427e:	4649      	mov	r1, r9
 8004280:	414b      	adcs	r3, r1
 8004282:	637b      	str	r3, [r7, #52]	@ 0x34
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004290:	4659      	mov	r1, fp
 8004292:	00cb      	lsls	r3, r1, #3
 8004294:	4651      	mov	r1, sl
 8004296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800429a:	4651      	mov	r1, sl
 800429c:	00ca      	lsls	r2, r1, #3
 800429e:	4610      	mov	r0, r2
 80042a0:	4619      	mov	r1, r3
 80042a2:	4603      	mov	r3, r0
 80042a4:	4642      	mov	r2, r8
 80042a6:	189b      	adds	r3, r3, r2
 80042a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042ac:	464b      	mov	r3, r9
 80042ae:	460a      	mov	r2, r1
 80042b0:	eb42 0303 	adc.w	r3, r2, r3
 80042b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042cc:	460b      	mov	r3, r1
 80042ce:	18db      	adds	r3, r3, r3
 80042d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042d2:	4613      	mov	r3, r2
 80042d4:	eb42 0303 	adc.w	r3, r2, r3
 80042d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042e2:	f7fb ff8f 	bl	8000204 <__aeabi_uldivmod>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004320 <UART_SetConfig+0x2d4>)
 80042ec:	fba3 1302 	umull	r1, r3, r3, r2
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	2164      	movs	r1, #100	@ 0x64
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	3332      	adds	r3, #50	@ 0x32
 80042fe:	4a08      	ldr	r2, [pc, #32]	@ (8004320 <UART_SetConfig+0x2d4>)
 8004300:	fba2 2303 	umull	r2, r3, r2, r3
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	f003 0207 	and.w	r2, r3, #7
 800430a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4422      	add	r2, r4
 8004312:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004314:	e106      	b.n	8004524 <UART_SetConfig+0x4d8>
 8004316:	bf00      	nop
 8004318:	40011000 	.word	0x40011000
 800431c:	40011400 	.word	0x40011400
 8004320:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004328:	2200      	movs	r2, #0
 800432a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800432e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004332:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004336:	4642      	mov	r2, r8
 8004338:	464b      	mov	r3, r9
 800433a:	1891      	adds	r1, r2, r2
 800433c:	6239      	str	r1, [r7, #32]
 800433e:	415b      	adcs	r3, r3
 8004340:	627b      	str	r3, [r7, #36]	@ 0x24
 8004342:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004346:	4641      	mov	r1, r8
 8004348:	1854      	adds	r4, r2, r1
 800434a:	4649      	mov	r1, r9
 800434c:	eb43 0501 	adc.w	r5, r3, r1
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	00eb      	lsls	r3, r5, #3
 800435a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800435e:	00e2      	lsls	r2, r4, #3
 8004360:	4614      	mov	r4, r2
 8004362:	461d      	mov	r5, r3
 8004364:	4643      	mov	r3, r8
 8004366:	18e3      	adds	r3, r4, r3
 8004368:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800436c:	464b      	mov	r3, r9
 800436e:	eb45 0303 	adc.w	r3, r5, r3
 8004372:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004382:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004392:	4629      	mov	r1, r5
 8004394:	008b      	lsls	r3, r1, #2
 8004396:	4621      	mov	r1, r4
 8004398:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800439c:	4621      	mov	r1, r4
 800439e:	008a      	lsls	r2, r1, #2
 80043a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043a4:	f7fb ff2e 	bl	8000204 <__aeabi_uldivmod>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4b60      	ldr	r3, [pc, #384]	@ (8004530 <UART_SetConfig+0x4e4>)
 80043ae:	fba3 2302 	umull	r2, r3, r3, r2
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	011c      	lsls	r4, r3, #4
 80043b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043c8:	4642      	mov	r2, r8
 80043ca:	464b      	mov	r3, r9
 80043cc:	1891      	adds	r1, r2, r2
 80043ce:	61b9      	str	r1, [r7, #24]
 80043d0:	415b      	adcs	r3, r3
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d8:	4641      	mov	r1, r8
 80043da:	1851      	adds	r1, r2, r1
 80043dc:	6139      	str	r1, [r7, #16]
 80043de:	4649      	mov	r1, r9
 80043e0:	414b      	adcs	r3, r1
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043f0:	4659      	mov	r1, fp
 80043f2:	00cb      	lsls	r3, r1, #3
 80043f4:	4651      	mov	r1, sl
 80043f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043fa:	4651      	mov	r1, sl
 80043fc:	00ca      	lsls	r2, r1, #3
 80043fe:	4610      	mov	r0, r2
 8004400:	4619      	mov	r1, r3
 8004402:	4603      	mov	r3, r0
 8004404:	4642      	mov	r2, r8
 8004406:	189b      	adds	r3, r3, r2
 8004408:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800440c:	464b      	mov	r3, r9
 800440e:	460a      	mov	r2, r1
 8004410:	eb42 0303 	adc.w	r3, r2, r3
 8004414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004422:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004430:	4649      	mov	r1, r9
 8004432:	008b      	lsls	r3, r1, #2
 8004434:	4641      	mov	r1, r8
 8004436:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800443a:	4641      	mov	r1, r8
 800443c:	008a      	lsls	r2, r1, #2
 800443e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004442:	f7fb fedf 	bl	8000204 <__aeabi_uldivmod>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4611      	mov	r1, r2
 800444c:	4b38      	ldr	r3, [pc, #224]	@ (8004530 <UART_SetConfig+0x4e4>)
 800444e:	fba3 2301 	umull	r2, r3, r3, r1
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	2264      	movs	r2, #100	@ 0x64
 8004456:	fb02 f303 	mul.w	r3, r2, r3
 800445a:	1acb      	subs	r3, r1, r3
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	3332      	adds	r3, #50	@ 0x32
 8004460:	4a33      	ldr	r2, [pc, #204]	@ (8004530 <UART_SetConfig+0x4e4>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800446c:	441c      	add	r4, r3
 800446e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004472:	2200      	movs	r2, #0
 8004474:	673b      	str	r3, [r7, #112]	@ 0x70
 8004476:	677a      	str	r2, [r7, #116]	@ 0x74
 8004478:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800447c:	4642      	mov	r2, r8
 800447e:	464b      	mov	r3, r9
 8004480:	1891      	adds	r1, r2, r2
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	415b      	adcs	r3, r3
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800448c:	4641      	mov	r1, r8
 800448e:	1851      	adds	r1, r2, r1
 8004490:	6039      	str	r1, [r7, #0]
 8004492:	4649      	mov	r1, r9
 8004494:	414b      	adcs	r3, r1
 8004496:	607b      	str	r3, [r7, #4]
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044a4:	4659      	mov	r1, fp
 80044a6:	00cb      	lsls	r3, r1, #3
 80044a8:	4651      	mov	r1, sl
 80044aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ae:	4651      	mov	r1, sl
 80044b0:	00ca      	lsls	r2, r1, #3
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	4603      	mov	r3, r0
 80044b8:	4642      	mov	r2, r8
 80044ba:	189b      	adds	r3, r3, r2
 80044bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044be:	464b      	mov	r3, r9
 80044c0:	460a      	mov	r2, r1
 80044c2:	eb42 0303 	adc.w	r3, r2, r3
 80044c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80044d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044e0:	4649      	mov	r1, r9
 80044e2:	008b      	lsls	r3, r1, #2
 80044e4:	4641      	mov	r1, r8
 80044e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ea:	4641      	mov	r1, r8
 80044ec:	008a      	lsls	r2, r1, #2
 80044ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044f2:	f7fb fe87 	bl	8000204 <__aeabi_uldivmod>
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004530 <UART_SetConfig+0x4e4>)
 80044fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	2164      	movs	r1, #100	@ 0x64
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	3332      	adds	r3, #50	@ 0x32
 800450e:	4a08      	ldr	r2, [pc, #32]	@ (8004530 <UART_SetConfig+0x4e4>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	f003 020f 	and.w	r2, r3, #15
 800451a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4422      	add	r2, r4
 8004522:	609a      	str	r2, [r3, #8]
}
 8004524:	bf00      	nop
 8004526:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800452a:	46bd      	mov	sp, r7
 800452c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004530:	51eb851f 	.word	0x51eb851f

08004534 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004538:	4904      	ldr	r1, [pc, #16]	@ (800454c <MX_FATFS_Init+0x18>)
 800453a:	4805      	ldr	r0, [pc, #20]	@ (8004550 <MX_FATFS_Init+0x1c>)
 800453c:	f000 f8ae 	bl	800469c <FATFS_LinkDriver>
 8004540:	4603      	mov	r3, r0
 8004542:	461a      	mov	r2, r3
 8004544:	4b03      	ldr	r3, [pc, #12]	@ (8004554 <MX_FATFS_Init+0x20>)
 8004546:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004548:	bf00      	nop
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000120 	.word	0x20000120
 8004550:	20000014 	.word	0x20000014
 8004554:	2000011c 	.word	0x2000011c

08004558 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//Stat = STA_NOINIT;
	//return Stat;
	SD_disk_initialize (pdrv);
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	4618      	mov	r0, r3
 8004566:	f7fc f979 	bl	800085c <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800456a:	bf00      	nop
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_status (pdrv);
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	4618      	mov	r0, r3
 8004582:	f7fc fa51 	bl	8000a28 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8004586:	bf00      	nop
 8004588:	4618      	mov	r0, r3
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	4603      	mov	r3, r0
 800459e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read ( pdrv, buff, sector, count);
 80045a0:	7bf8      	ldrb	r0, [r7, #15]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	f7fc fa54 	bl	8000a54 <SD_disk_read>
  /* USER CODE END READ */
}
 80045ac:	bf00      	nop
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
 80045c2:	4603      	mov	r3, r0
 80045c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	SD_disk_write (pdrv, buff, sector,count);
 80045c6:	7bf8      	ldrb	r0, [r7, #15]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	f7fc faab 	bl	8000b28 <SD_disk_write>
  /* USER CODE END WRITE */
}
 80045d2:	bf00      	nop
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	603a      	str	r2, [r7, #0]
 80045e6:	71fb      	strb	r3, [r7, #7]
 80045e8:	460b      	mov	r3, r1
 80045ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl (pdrv, cmd, buff);
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	79b9      	ldrb	r1, [r7, #6]
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fc fb1c 	bl	8000c30 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 80045f8:	bf00      	nop
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004612:	2301      	movs	r3, #1
 8004614:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800461a:	4b1f      	ldr	r3, [pc, #124]	@ (8004698 <FATFS_LinkDriverEx+0x94>)
 800461c:	7a5b      	ldrb	r3, [r3, #9]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d131      	bne.n	8004688 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004624:	4b1c      	ldr	r3, [pc, #112]	@ (8004698 <FATFS_LinkDriverEx+0x94>)
 8004626:	7a5b      	ldrb	r3, [r3, #9]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	4b1a      	ldr	r3, [pc, #104]	@ (8004698 <FATFS_LinkDriverEx+0x94>)
 800462e:	2100      	movs	r1, #0
 8004630:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004632:	4b19      	ldr	r3, [pc, #100]	@ (8004698 <FATFS_LinkDriverEx+0x94>)
 8004634:	7a5b      	ldrb	r3, [r3, #9]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	4a17      	ldr	r2, [pc, #92]	@ (8004698 <FATFS_LinkDriverEx+0x94>)
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004642:	4b15      	ldr	r3, [pc, #84]	@ (8004698 <FATFS_LinkDriverEx+0x94>)
 8004644:	7a5b      	ldrb	r3, [r3, #9]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	4b13      	ldr	r3, [pc, #76]	@ (8004698 <FATFS_LinkDriverEx+0x94>)
 800464c:	4413      	add	r3, r2
 800464e:	79fa      	ldrb	r2, [r7, #7]
 8004650:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004652:	4b11      	ldr	r3, [pc, #68]	@ (8004698 <FATFS_LinkDriverEx+0x94>)
 8004654:	7a5b      	ldrb	r3, [r3, #9]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	b2d1      	uxtb	r1, r2
 800465c:	4a0e      	ldr	r2, [pc, #56]	@ (8004698 <FATFS_LinkDriverEx+0x94>)
 800465e:	7251      	strb	r1, [r2, #9]
 8004660:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004662:	7dbb      	ldrb	r3, [r7, #22]
 8004664:	3330      	adds	r3, #48	@ 0x30
 8004666:	b2da      	uxtb	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	3301      	adds	r3, #1
 8004670:	223a      	movs	r2, #58	@ 0x3a
 8004672:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	3302      	adds	r3, #2
 8004678:	222f      	movs	r2, #47	@ 0x2f
 800467a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	3303      	adds	r3, #3
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004688:	7dfb      	ldrb	r3, [r7, #23]
}
 800468a:	4618      	mov	r0, r3
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000124 	.word	0x20000124

0800469c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80046a6:	2200      	movs	r2, #0
 80046a8:	6839      	ldr	r1, [r7, #0]
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff ffaa 	bl	8004604 <FATFS_LinkDriverEx>
 80046b0:	4603      	mov	r3, r0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <memset>:
 80046ba:	4402      	add	r2, r0
 80046bc:	4603      	mov	r3, r0
 80046be:	4293      	cmp	r3, r2
 80046c0:	d100      	bne.n	80046c4 <memset+0xa>
 80046c2:	4770      	bx	lr
 80046c4:	f803 1b01 	strb.w	r1, [r3], #1
 80046c8:	e7f9      	b.n	80046be <memset+0x4>
	...

080046cc <__libc_init_array>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004704 <__libc_init_array+0x38>)
 80046d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004708 <__libc_init_array+0x3c>)
 80046d2:	1b64      	subs	r4, r4, r5
 80046d4:	10a4      	asrs	r4, r4, #2
 80046d6:	2600      	movs	r6, #0
 80046d8:	42a6      	cmp	r6, r4
 80046da:	d109      	bne.n	80046f0 <__libc_init_array+0x24>
 80046dc:	4d0b      	ldr	r5, [pc, #44]	@ (800470c <__libc_init_array+0x40>)
 80046de:	4c0c      	ldr	r4, [pc, #48]	@ (8004710 <__libc_init_array+0x44>)
 80046e0:	f000 f818 	bl	8004714 <_init>
 80046e4:	1b64      	subs	r4, r4, r5
 80046e6:	10a4      	asrs	r4, r4, #2
 80046e8:	2600      	movs	r6, #0
 80046ea:	42a6      	cmp	r6, r4
 80046ec:	d105      	bne.n	80046fa <__libc_init_array+0x2e>
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f4:	4798      	blx	r3
 80046f6:	3601      	adds	r6, #1
 80046f8:	e7ee      	b.n	80046d8 <__libc_init_array+0xc>
 80046fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fe:	4798      	blx	r3
 8004700:	3601      	adds	r6, #1
 8004702:	e7f2      	b.n	80046ea <__libc_init_array+0x1e>
 8004704:	0800474c 	.word	0x0800474c
 8004708:	0800474c 	.word	0x0800474c
 800470c:	0800474c 	.word	0x0800474c
 8004710:	08004750 	.word	0x08004750

08004714 <_init>:
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	bf00      	nop
 8004718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471a:	bc08      	pop	{r3}
 800471c:	469e      	mov	lr, r3
 800471e:	4770      	bx	lr

08004720 <_fini>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr
