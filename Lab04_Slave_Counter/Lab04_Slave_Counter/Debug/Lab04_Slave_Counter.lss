
Lab04_Slave_Counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009cb  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000814  00000000  00000000  00000d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063b  00000000  00000000  00001563  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000447  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b8  00000000  00000000  00002117  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000024cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 84 00 	call	0x108	; 0x108 <main>
  88:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
}

// Subrutina setup ------------------------------------------------------------
void setup(void){
	// Se apaga tx y rx
	UCSR0B = 0;
  90:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Se establece el puerto D como salida
	PORTD = 0x00;
  94:	1b b8       	out	0x0b, r1	; 11
	DDRD |= 0xFF;
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8a b9       	out	0x0a, r24	; 10
	
	
	// ESTABLECER PULLUP EN PUERTO B0, B1 y B2
	PORTB |= (1<<PORTB1)|(1<<PORTB2);
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	86 60       	ori	r24, 0x06	; 6
  a0:	85 b9       	out	0x05, r24	; 5
	
	//ESTABLECER PUERTO B0 Y B1 COMO ENTRADA
	DDRB &= ~((1<<PORTB1)|(1<<PORTB2));
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	89 7f       	andi	r24, 0xF9	; 249
  a6:	84 b9       	out	0x04, r24	; 4
	
	//Habilitar la interrupción puerto B
	PCICR |= (1<<PCIE0);
  a8:	e8 e6       	ldi	r30, 0x68	; 104
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	80 83       	st	Z, r24
	
	// Habilitar mascara para pines PB1, PB2
	PCMSK0 |= 0x06;
  b2:	eb e6       	ldi	r30, 0x6B	; 107
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	86 60       	ori	r24, 0x06	; 6
  ba:	80 83       	st	Z, r24
  bc:	08 95       	ret

000000be <MostrarLEDs>:
}

void MostrarLEDs(uint8_t a){
	if(a & 1)
  be:	80 ff       	sbrs	r24, 0
  c0:	04 c0       	rjmp	.+8      	; 0xca <MostrarLEDs+0xc>
	PORTD |= (1<<PORTD2);
  c2:	9b b1       	in	r25, 0x0b	; 11
  c4:	94 60       	ori	r25, 0x04	; 4
  c6:	9b b9       	out	0x0b, r25	; 11
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <MostrarLEDs+0x12>
	else
	PORTD &= ~(1<<PORTD2);
  ca:	9b b1       	in	r25, 0x0b	; 11
  cc:	9b 7f       	andi	r25, 0xFB	; 251
  ce:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 2)
  d0:	81 ff       	sbrs	r24, 1
  d2:	04 c0       	rjmp	.+8      	; 0xdc <MostrarLEDs+0x1e>
	PORTD |= (1<<PORTD3);
  d4:	9b b1       	in	r25, 0x0b	; 11
  d6:	98 60       	ori	r25, 0x08	; 8
  d8:	9b b9       	out	0x0b, r25	; 11
  da:	03 c0       	rjmp	.+6      	; 0xe2 <MostrarLEDs+0x24>
	else
	PORTD &= ~(1<<PORTD3);
  dc:	9b b1       	in	r25, 0x0b	; 11
  de:	97 7f       	andi	r25, 0xF7	; 247
  e0:	9b b9       	out	0x0b, r25	; 11
	if(a & 4)
  e2:	82 ff       	sbrs	r24, 2
  e4:	04 c0       	rjmp	.+8      	; 0xee <MostrarLEDs+0x30>
	PORTD |= (1<<PORTD4);
  e6:	9b b1       	in	r25, 0x0b	; 11
  e8:	90 61       	ori	r25, 0x10	; 16
  ea:	9b b9       	out	0x0b, r25	; 11
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <MostrarLEDs+0x36>
	else
	PORTD &= ~(1<<PORTD4);
  ee:	9b b1       	in	r25, 0x0b	; 11
  f0:	9f 7e       	andi	r25, 0xEF	; 239
  f2:	9b b9       	out	0x0b, r25	; 11
	if(a & 8)
  f4:	83 ff       	sbrs	r24, 3
  f6:	04 c0       	rjmp	.+8      	; 0x100 <MostrarLEDs+0x42>
	PORTD |= (1<<PORTD5);
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	80 62       	ori	r24, 0x20	; 32
  fc:	8b b9       	out	0x0b, r24	; 11
  fe:	08 95       	ret
	else
	PORTD &= ~(1<<PORTD5);
 100:	8b b1       	in	r24, 0x0b	; 11
 102:	8f 7d       	andi	r24, 0xDF	; 223
 104:	8b b9       	out	0x0b, r24	; 11
 106:	08 95       	ret

00000108 <main>:
void setup(void);
void MostrarLEDs(uint8_t a);

int main(void)
{
    cli();
 108:	f8 94       	cli
	I2C_SETTING_SLAVE(SlaveAddress);
 10a:	80 e4       	ldi	r24, 0x40	; 64
 10c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <I2C_SETTING_SLAVE>
	setup();
 110:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	sei();
 114:	78 94       	sei
	
    while (1) 
    {
		MostrarLEDs(counter);
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	0e 94 5f 00 	call	0xbe	; 0xbe <MostrarLEDs>
 11e:	fb cf       	rjmp	.-10     	; 0x116 <main+0xe>

00000120 <__vector_3>:
	
}

// Vector de interrupcion PCINT0 ----------------------------------------------
ISR(PCINT0_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
	if(!(PINB&(1<<PINB1))) // Si PINB1 se encuentra apagado ejecutar instrucción
 12c:	19 99       	sbic	0x03, 1	; 3
 12e:	06 c0       	rjmp	.+12     	; 0x13c <__vector_3+0x1c>
	{
		counter++;
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 13a:	07 c0       	rjmp	.+14     	; 0x14a <__vector_3+0x2a>
	}
	else if(!(PINB&(1<<PINB2))) // Si PINB2 se encuentra apagado ejecutar instrucción
 13c:	1a 99       	sbic	0x03, 2	; 3
 13e:	05 c0       	rjmp	.+10     	; 0x14a <__vector_3+0x2a>
	{
		counter--;
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 144:	81 50       	subi	r24, 0x01	; 1
 146:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	PCIFR |= (1<<PCIF0); // Apagar la bandera de interrupción
 14a:	8b b3       	in	r24, 0x1b	; 27
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	8b bb       	out	0x1b, r24	; 27
}
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_24>:

ISR(TWI_vect){
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	8f 93       	push	r24
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	uint8_t estado;
	estado = TWSR & 0xFC;
 16c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 170:	8c 7f       	andi	r24, 0xFC	; 252
	switch(estado){
 172:	80 39       	cpi	r24, 0x90	; 144
 174:	c9 f0       	breq	.+50     	; 0x1a8 <__vector_24+0x4c>
 176:	38 f4       	brcc	.+14     	; 0x186 <__vector_24+0x2a>
 178:	80 37       	cpi	r24, 0x70	; 112
 17a:	81 f0       	breq	.+32     	; 0x19c <__vector_24+0x40>
 17c:	80 38       	cpi	r24, 0x80	; 128
 17e:	a1 f0       	breq	.+40     	; 0x1a8 <__vector_24+0x4c>
 180:	80 36       	cpi	r24, 0x60	; 96
 182:	61 f5       	brne	.+88     	; 0x1dc <__vector_24+0x80>
 184:	0b c0       	rjmp	.+22     	; 0x19c <__vector_24+0x40>
 186:	88 3b       	cpi	r24, 0xB8	; 184
 188:	c9 f0       	breq	.+50     	; 0x1bc <__vector_24+0x60>
 18a:	18 f4       	brcc	.+6      	; 0x192 <__vector_24+0x36>
 18c:	88 3a       	cpi	r24, 0xA8	; 168
 18e:	b1 f0       	breq	.+44     	; 0x1bc <__vector_24+0x60>
 190:	25 c0       	rjmp	.+74     	; 0x1dc <__vector_24+0x80>
 192:	80 3c       	cpi	r24, 0xC0	; 192
 194:	e9 f0       	breq	.+58     	; 0x1d0 <__vector_24+0x74>
 196:	88 3c       	cpi	r24, 0xC8	; 200
 198:	d9 f0       	breq	.+54     	; 0x1d0 <__vector_24+0x74>
 19a:	20 c0       	rjmp	.+64     	; 0x1dc <__vector_24+0x80>
		case 0x60:
		case 0x70:
		TWCR |= (1<<TWINT);
 19c:	ec eb       	ldi	r30, 0xBC	; 188
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	80 68       	ori	r24, 0x80	; 128
 1a4:	80 83       	st	Z, r24
		break;
 1a6:	1f c0       	rjmp	.+62     	; 0x1e6 <__vector_24+0x8a>
		case 0x80:
		case 0x90:
		buffer = TWDR;
 1a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1ac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <buffer>
		TWCR |= (1<<TWINT); //Se limpia la bandera
 1b0:	ec eb       	ldi	r30, 0xBC	; 188
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	80 83       	st	Z, r24
		break;
 1ba:	15 c0       	rjmp	.+42     	; 0x1e6 <__vector_24+0x8a>
		case 0xA8: // SLA+R recibido, maestro solicita lectura
		case 0xB8: // Dato transmitido y ACK recibido
		TWDR = counter; // Cargar el dato en el registro de datos*****************
 1bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWIE)| (1 << TWEA); // Listo para la proxima operacion
 1c4:	ec eb       	ldi	r30, 0xBC	; 188
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	85 6c       	ori	r24, 0xC5	; 197
 1cc:	80 83       	st	Z, r24
		break;
 1ce:	0b c0       	rjmp	.+22     	; 0x1e6 <__vector_24+0x8a>
		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Ultimo dato transmitido y ACK recibido
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Listo para la proxima operacion
 1d0:	ec eb       	ldi	r30, 0xBC	; 188
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	84 6c       	ori	r24, 0xC4	; 196
 1d8:	80 83       	st	Z, r24
		break;
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <__vector_24+0x8a>
		default:	//Se libera el bus de cualquier error
		TWCR |= (1<<TWINT)|(1<<TWSTO);
 1dc:	ec eb       	ldi	r30, 0xBC	; 188
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	80 69       	ori	r24, 0x90	; 144
 1e4:	80 83       	st	Z, r24
		break;
	}
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <I2C_SETTING_SLAVE>:
	
	TWCR = 1 << TWEN;   //Habilita la interfaz
}

void I2C_SETTING_SLAVE(uint8_t address){
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
 1f6:	97 b1       	in	r25, 0x07	; 7
 1f8:	9f 7c       	andi	r25, 0xCF	; 207
 1fa:	97 b9       	out	0x07, r25	; 7
	
	address <<= 1;  //Ubica la dirección y
 1fc:	88 0f       	add	r24, r24
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
 1fe:	81 60       	ori	r24, 0x01	; 1
	TWAR = address;
 200:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
 204:	85 e4       	ldi	r24, 0x45	; 69
 206:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
