
HolaMundo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002028  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080021ec  080021ec  000031ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021fc  080021fc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080021fc  080021fc  000031fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002204  08002204  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002204  08002204  00003204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002208  08002208  00003208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800220c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  08002218  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08002218  00004034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040ee  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001096  00000000  00000000  0000812a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  000091c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000337  00000000  00000000  00009630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fdb6  00000000  00000000  00009967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000063d0  00000000  00000000  0002971d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2259  00000000  00000000  0002faed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1d46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000101c  00000000  00000000  000f1d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000f2da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080021d4 	.word	0x080021d4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080021d4 	.word	0x080021d4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fdd0 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 fc3c 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fca6 	bl	8000e50 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == 0){
 8000504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000508:	483a      	ldr	r0, [pc, #232]	@ (80005f4 <main+0x100>)
 800050a:	f001 f8d7 	bl	80016bc <HAL_GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d10d      	bne.n	8000530 <main+0x3c>
		FlagInitGame = 1;
 8000514:	4b38      	ldr	r3, [pc, #224]	@ (80005f8 <main+0x104>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(P20_GPIO_Port, P20_Pin, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000520:	4836      	ldr	r0, [pc, #216]	@ (80005fc <main+0x108>)
 8000522:	f001 f8e3 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P10_GPIO_Port, P10_Pin, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2140      	movs	r1, #64	@ 0x40
 800052a:	4835      	ldr	r0, [pc, #212]	@ (8000600 <main+0x10c>)
 800052c:	f001 f8de 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P26_GPIO_Port, P26_Pin, 1);
		HAL_GPIO_WritePin(P27_GPIO_Port, P27_Pin, 1);
		HAL_GPIO_WritePin(P28_GPIO_Port, P28_Pin, 1);*/
	}

	if(FlagInitGame == 1){
 8000530:	4b31      	ldr	r3, [pc, #196]	@ (80005f8 <main+0x104>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d120      	bne.n	800057a <main+0x86>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000538:	2201      	movs	r2, #1
 800053a:	2120      	movs	r1, #32
 800053c:	482f      	ldr	r0, [pc, #188]	@ (80005fc <main+0x108>)
 800053e:	f001 f8d5 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000542:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000546:	f000 fe1b 	bl	8001180 <HAL_Delay>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800054a:	2201      	movs	r2, #1
 800054c:	2140      	movs	r1, #64	@ 0x40
 800054e:	482b      	ldr	r0, [pc, #172]	@ (80005fc <main+0x108>)
 8000550:	f001 f8cc 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000554:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000558:	f000 fe12 	bl	8001180 <HAL_Delay>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 800055c:	2201      	movs	r2, #1
 800055e:	2180      	movs	r1, #128	@ 0x80
 8000560:	4826      	ldr	r0, [pc, #152]	@ (80005fc <main+0x108>)
 8000562:	f001 f8c3 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000566:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800056a:	f000 fe09 	bl	8001180 <HAL_Delay>
		FlagInitGame = 0;
 800056e:	4b22      	ldr	r3, [pc, #136]	@ (80005f8 <main+0x104>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
		Playable = 1;
 8000574:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <main+0x110>)
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
	}

	if (Playable == 1){
 800057a:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <main+0x110>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d156      	bne.n	8000630 <main+0x13c>
		if(HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == 0){
 8000582:	2101      	movs	r1, #1
 8000584:	481b      	ldr	r0, [pc, #108]	@ (80005f4 <main+0x100>)
 8000586:	f001 f899 	bl	80016bc <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d11c      	bne.n	80005ca <main+0xd6>
			if(P1_Points < 8){
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <main+0x114>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b07      	cmp	r3, #7
 8000596:	d809      	bhi.n	80005ac <main+0xb8>
			P1_Points++;
 8000598:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <main+0x114>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <main+0x114>)
 80005a2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(150);
 80005a4:	2096      	movs	r0, #150	@ 0x96
 80005a6:	f000 fdeb 	bl	8001180 <HAL_Delay>
 80005aa:	e00e      	b.n	80005ca <main+0xd6>
			} else{
				P1_Points = 0;
 80005ac:	4b16      	ldr	r3, [pc, #88]	@ (8000608 <main+0x114>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
				winner1=1;
 80005b2:	4b16      	ldr	r3, [pc, #88]	@ (800060c <main+0x118>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
				Playable=0;
 80005b8:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <main+0x110>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(P20_GPIO_Port, P20_Pin, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005c4:	480d      	ldr	r0, [pc, #52]	@ (80005fc <main+0x108>)
 80005c6:	f001 f891 	bl	80016ec <HAL_GPIO_WritePin>
			}

		}
		if(HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin) == 0){
 80005ca:	2102      	movs	r1, #2
 80005cc:	4809      	ldr	r0, [pc, #36]	@ (80005f4 <main+0x100>)
 80005ce:	f001 f875 	bl	80016bc <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d12b      	bne.n	8000630 <main+0x13c>
			if(P2_Points < 8){
 80005d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000610 <main+0x11c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b07      	cmp	r3, #7
 80005de:	d819      	bhi.n	8000614 <main+0x120>
			P2_Points++;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <main+0x11c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <main+0x11c>)
 80005ea:	701a      	strb	r2, [r3, #0]
			HAL_Delay(200);
 80005ec:	20c8      	movs	r0, #200	@ 0xc8
 80005ee:	f000 fdc7 	bl	8001180 <HAL_Delay>
 80005f2:	e01d      	b.n	8000630 <main+0x13c>
 80005f4:	40020800 	.word	0x40020800
 80005f8:	20000028 	.word	0x20000028
 80005fc:	40020000 	.word	0x40020000
 8000600:	40020400 	.word	0x40020400
 8000604:	2000002b 	.word	0x2000002b
 8000608:	20000029 	.word	0x20000029
 800060c:	2000002c 	.word	0x2000002c
 8000610:	2000002a 	.word	0x2000002a
			} else{
				P2_Points = 0;
 8000614:	4bc8      	ldr	r3, [pc, #800]	@ (8000938 <main+0x444>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
				winner2=1;
 800061a:	4bc8      	ldr	r3, [pc, #800]	@ (800093c <main+0x448>)
 800061c:	2201      	movs	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
				Playable=0;
 8000620:	4bc7      	ldr	r3, [pc, #796]	@ (8000940 <main+0x44c>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(P10_GPIO_Port, P10_Pin, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2140      	movs	r1, #64	@ 0x40
 800062a:	48c6      	ldr	r0, [pc, #792]	@ (8000944 <main+0x450>)
 800062c:	f001 f85e 	bl	80016ec <HAL_GPIO_WritePin>
			}
		}

	}

	if (winner1 == 1){
 8000630:	4bc5      	ldr	r3, [pc, #788]	@ (8000948 <main+0x454>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d104      	bne.n	8000642 <main+0x14e>
		HAL_GPIO_WritePin(P10_GPIO_Port, P10_Pin, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	2140      	movs	r1, #64	@ 0x40
 800063c:	48c1      	ldr	r0, [pc, #772]	@ (8000944 <main+0x450>)
 800063e:	f001 f855 	bl	80016ec <HAL_GPIO_WritePin>

	}
	if (winner2 == 1){
 8000642:	4bbe      	ldr	r3, [pc, #760]	@ (800093c <main+0x448>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d105      	bne.n	8000656 <main+0x162>
		HAL_GPIO_WritePin(P20_GPIO_Port, P20_Pin, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000650:	48be      	ldr	r0, [pc, #760]	@ (800094c <main+0x458>)
 8000652:	f001 f84b 	bl	80016ec <HAL_GPIO_WritePin>
		}

	if(P1_Points==0){
 8000656:	4bbe      	ldr	r3, [pc, #760]	@ (8000950 <main+0x45c>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d12b      	bne.n	80006b6 <main+0x1c2>
		HAL_GPIO_WritePin(P11_GPIO_Port, P11_Pin, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000664:	48b9      	ldr	r0, [pc, #740]	@ (800094c <main+0x458>)
 8000666:	f001 f841 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P12_GPIO_Port, P12_Pin, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2108      	movs	r1, #8
 800066e:	48b5      	ldr	r0, [pc, #724]	@ (8000944 <main+0x450>)
 8000670:	f001 f83c 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P13_GPIO_Port, P13_Pin, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2120      	movs	r1, #32
 8000678:	48b2      	ldr	r0, [pc, #712]	@ (8000944 <main+0x450>)
 800067a:	f001 f837 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P14_GPIO_Port, P14_Pin, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2110      	movs	r1, #16
 8000682:	48b0      	ldr	r0, [pc, #704]	@ (8000944 <main+0x450>)
 8000684:	f001 f832 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P15_GPIO_Port, P15_Pin, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068e:	48ad      	ldr	r0, [pc, #692]	@ (8000944 <main+0x450>)
 8000690:	f001 f82c 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P16_GPIO_Port, P16_Pin, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800069a:	48ac      	ldr	r0, [pc, #688]	@ (800094c <main+0x458>)
 800069c:	f001 f826 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P17_GPIO_Port, P17_Pin, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006a6:	48a9      	ldr	r0, [pc, #676]	@ (800094c <main+0x458>)
 80006a8:	f001 f820 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P18_GPIO_Port, P18_Pin, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2180      	movs	r1, #128	@ 0x80
 80006b0:	48a8      	ldr	r0, [pc, #672]	@ (8000954 <main+0x460>)
 80006b2:	f001 f81b 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P1_Points==1){
 80006b6:	4ba6      	ldr	r3, [pc, #664]	@ (8000950 <main+0x45c>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d12b      	bne.n	8000716 <main+0x222>
		HAL_GPIO_WritePin(P11_GPIO_Port, P11_Pin, 1);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006c4:	48a1      	ldr	r0, [pc, #644]	@ (800094c <main+0x458>)
 80006c6:	f001 f811 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P12_GPIO_Port, P12_Pin, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2108      	movs	r1, #8
 80006ce:	489d      	ldr	r0, [pc, #628]	@ (8000944 <main+0x450>)
 80006d0:	f001 f80c 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P13_GPIO_Port, P13_Pin, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2120      	movs	r1, #32
 80006d8:	489a      	ldr	r0, [pc, #616]	@ (8000944 <main+0x450>)
 80006da:	f001 f807 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P14_GPIO_Port, P14_Pin, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2110      	movs	r1, #16
 80006e2:	4898      	ldr	r0, [pc, #608]	@ (8000944 <main+0x450>)
 80006e4:	f001 f802 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P15_GPIO_Port, P15_Pin, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ee:	4895      	ldr	r0, [pc, #596]	@ (8000944 <main+0x450>)
 80006f0:	f000 fffc 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P16_GPIO_Port, P16_Pin, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006fa:	4894      	ldr	r0, [pc, #592]	@ (800094c <main+0x458>)
 80006fc:	f000 fff6 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P17_GPIO_Port, P17_Pin, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000706:	4891      	ldr	r0, [pc, #580]	@ (800094c <main+0x458>)
 8000708:	f000 fff0 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P18_GPIO_Port, P18_Pin, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2180      	movs	r1, #128	@ 0x80
 8000710:	4890      	ldr	r0, [pc, #576]	@ (8000954 <main+0x460>)
 8000712:	f000 ffeb 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P1_Points==2){
 8000716:	4b8e      	ldr	r3, [pc, #568]	@ (8000950 <main+0x45c>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b02      	cmp	r3, #2
 800071c:	d12b      	bne.n	8000776 <main+0x282>
		HAL_GPIO_WritePin(P11_GPIO_Port, P11_Pin, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000724:	4889      	ldr	r0, [pc, #548]	@ (800094c <main+0x458>)
 8000726:	f000 ffe1 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P12_GPIO_Port, P12_Pin, 1);
 800072a:	2201      	movs	r2, #1
 800072c:	2108      	movs	r1, #8
 800072e:	4885      	ldr	r0, [pc, #532]	@ (8000944 <main+0x450>)
 8000730:	f000 ffdc 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P13_GPIO_Port, P13_Pin, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2120      	movs	r1, #32
 8000738:	4882      	ldr	r0, [pc, #520]	@ (8000944 <main+0x450>)
 800073a:	f000 ffd7 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P14_GPIO_Port, P14_Pin, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2110      	movs	r1, #16
 8000742:	4880      	ldr	r0, [pc, #512]	@ (8000944 <main+0x450>)
 8000744:	f000 ffd2 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P15_GPIO_Port, P15_Pin, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800074e:	487d      	ldr	r0, [pc, #500]	@ (8000944 <main+0x450>)
 8000750:	f000 ffcc 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P16_GPIO_Port, P16_Pin, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800075a:	487c      	ldr	r0, [pc, #496]	@ (800094c <main+0x458>)
 800075c:	f000 ffc6 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P17_GPIO_Port, P17_Pin, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000766:	4879      	ldr	r0, [pc, #484]	@ (800094c <main+0x458>)
 8000768:	f000 ffc0 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P18_GPIO_Port, P18_Pin, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	2180      	movs	r1, #128	@ 0x80
 8000770:	4878      	ldr	r0, [pc, #480]	@ (8000954 <main+0x460>)
 8000772:	f000 ffbb 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P1_Points==3){
 8000776:	4b76      	ldr	r3, [pc, #472]	@ (8000950 <main+0x45c>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d12b      	bne.n	80007d6 <main+0x2e2>
		HAL_GPIO_WritePin(P11_GPIO_Port, P11_Pin, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000784:	4871      	ldr	r0, [pc, #452]	@ (800094c <main+0x458>)
 8000786:	f000 ffb1 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P12_GPIO_Port, P12_Pin, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2108      	movs	r1, #8
 800078e:	486d      	ldr	r0, [pc, #436]	@ (8000944 <main+0x450>)
 8000790:	f000 ffac 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P13_GPIO_Port, P13_Pin, 1);
 8000794:	2201      	movs	r2, #1
 8000796:	2120      	movs	r1, #32
 8000798:	486a      	ldr	r0, [pc, #424]	@ (8000944 <main+0x450>)
 800079a:	f000 ffa7 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P14_GPIO_Port, P14_Pin, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2110      	movs	r1, #16
 80007a2:	4868      	ldr	r0, [pc, #416]	@ (8000944 <main+0x450>)
 80007a4:	f000 ffa2 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P15_GPIO_Port, P15_Pin, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ae:	4865      	ldr	r0, [pc, #404]	@ (8000944 <main+0x450>)
 80007b0:	f000 ff9c 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P16_GPIO_Port, P16_Pin, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ba:	4864      	ldr	r0, [pc, #400]	@ (800094c <main+0x458>)
 80007bc:	f000 ff96 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P17_GPIO_Port, P17_Pin, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c6:	4861      	ldr	r0, [pc, #388]	@ (800094c <main+0x458>)
 80007c8:	f000 ff90 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P18_GPIO_Port, P18_Pin, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2180      	movs	r1, #128	@ 0x80
 80007d0:	4860      	ldr	r0, [pc, #384]	@ (8000954 <main+0x460>)
 80007d2:	f000 ff8b 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P1_Points==4){
 80007d6:	4b5e      	ldr	r3, [pc, #376]	@ (8000950 <main+0x45c>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b04      	cmp	r3, #4
 80007dc:	d12b      	bne.n	8000836 <main+0x342>
		HAL_GPIO_WritePin(P11_GPIO_Port, P11_Pin, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007e4:	4859      	ldr	r0, [pc, #356]	@ (800094c <main+0x458>)
 80007e6:	f000 ff81 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P12_GPIO_Port, P12_Pin, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2108      	movs	r1, #8
 80007ee:	4855      	ldr	r0, [pc, #340]	@ (8000944 <main+0x450>)
 80007f0:	f000 ff7c 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P13_GPIO_Port, P13_Pin, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2120      	movs	r1, #32
 80007f8:	4852      	ldr	r0, [pc, #328]	@ (8000944 <main+0x450>)
 80007fa:	f000 ff77 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P14_GPIO_Port, P14_Pin, 1);
 80007fe:	2201      	movs	r2, #1
 8000800:	2110      	movs	r1, #16
 8000802:	4850      	ldr	r0, [pc, #320]	@ (8000944 <main+0x450>)
 8000804:	f000 ff72 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P15_GPIO_Port, P15_Pin, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800080e:	484d      	ldr	r0, [pc, #308]	@ (8000944 <main+0x450>)
 8000810:	f000 ff6c 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P16_GPIO_Port, P16_Pin, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800081a:	484c      	ldr	r0, [pc, #304]	@ (800094c <main+0x458>)
 800081c:	f000 ff66 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P17_GPIO_Port, P17_Pin, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000826:	4849      	ldr	r0, [pc, #292]	@ (800094c <main+0x458>)
 8000828:	f000 ff60 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P18_GPIO_Port, P18_Pin, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	2180      	movs	r1, #128	@ 0x80
 8000830:	4848      	ldr	r0, [pc, #288]	@ (8000954 <main+0x460>)
 8000832:	f000 ff5b 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P1_Points==5){
 8000836:	4b46      	ldr	r3, [pc, #280]	@ (8000950 <main+0x45c>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b05      	cmp	r3, #5
 800083c:	d12b      	bne.n	8000896 <main+0x3a2>
		HAL_GPIO_WritePin(P11_GPIO_Port, P11_Pin, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000844:	4841      	ldr	r0, [pc, #260]	@ (800094c <main+0x458>)
 8000846:	f000 ff51 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P12_GPIO_Port, P12_Pin, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	483d      	ldr	r0, [pc, #244]	@ (8000944 <main+0x450>)
 8000850:	f000 ff4c 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P13_GPIO_Port, P13_Pin, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2120      	movs	r1, #32
 8000858:	483a      	ldr	r0, [pc, #232]	@ (8000944 <main+0x450>)
 800085a:	f000 ff47 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P14_GPIO_Port, P14_Pin, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2110      	movs	r1, #16
 8000862:	4838      	ldr	r0, [pc, #224]	@ (8000944 <main+0x450>)
 8000864:	f000 ff42 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P15_GPIO_Port, P15_Pin, 1);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800086e:	4835      	ldr	r0, [pc, #212]	@ (8000944 <main+0x450>)
 8000870:	f000 ff3c 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P16_GPIO_Port, P16_Pin, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800087a:	4834      	ldr	r0, [pc, #208]	@ (800094c <main+0x458>)
 800087c:	f000 ff36 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P17_GPIO_Port, P17_Pin, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000886:	4831      	ldr	r0, [pc, #196]	@ (800094c <main+0x458>)
 8000888:	f000 ff30 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P18_GPIO_Port, P18_Pin, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2180      	movs	r1, #128	@ 0x80
 8000890:	4830      	ldr	r0, [pc, #192]	@ (8000954 <main+0x460>)
 8000892:	f000 ff2b 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P1_Points==6){
 8000896:	4b2e      	ldr	r3, [pc, #184]	@ (8000950 <main+0x45c>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b06      	cmp	r3, #6
 800089c:	d12b      	bne.n	80008f6 <main+0x402>
		HAL_GPIO_WritePin(P11_GPIO_Port, P11_Pin, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008a4:	4829      	ldr	r0, [pc, #164]	@ (800094c <main+0x458>)
 80008a6:	f000 ff21 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P12_GPIO_Port, P12_Pin, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2108      	movs	r1, #8
 80008ae:	4825      	ldr	r0, [pc, #148]	@ (8000944 <main+0x450>)
 80008b0:	f000 ff1c 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P13_GPIO_Port, P13_Pin, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2120      	movs	r1, #32
 80008b8:	4822      	ldr	r0, [pc, #136]	@ (8000944 <main+0x450>)
 80008ba:	f000 ff17 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P14_GPIO_Port, P14_Pin, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2110      	movs	r1, #16
 80008c2:	4820      	ldr	r0, [pc, #128]	@ (8000944 <main+0x450>)
 80008c4:	f000 ff12 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P15_GPIO_Port, P15_Pin, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ce:	481d      	ldr	r0, [pc, #116]	@ (8000944 <main+0x450>)
 80008d0:	f000 ff0c 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P16_GPIO_Port, P16_Pin, 1);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008da:	481c      	ldr	r0, [pc, #112]	@ (800094c <main+0x458>)
 80008dc:	f000 ff06 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P17_GPIO_Port, P17_Pin, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008e6:	4819      	ldr	r0, [pc, #100]	@ (800094c <main+0x458>)
 80008e8:	f000 ff00 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P18_GPIO_Port, P18_Pin, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2180      	movs	r1, #128	@ 0x80
 80008f0:	4818      	ldr	r0, [pc, #96]	@ (8000954 <main+0x460>)
 80008f2:	f000 fefb 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P1_Points==7){
 80008f6:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <main+0x45c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b07      	cmp	r3, #7
 80008fc:	d13c      	bne.n	8000978 <main+0x484>
		HAL_GPIO_WritePin(P11_GPIO_Port, P11_Pin, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000904:	4811      	ldr	r0, [pc, #68]	@ (800094c <main+0x458>)
 8000906:	f000 fef1 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P12_GPIO_Port, P12_Pin, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2108      	movs	r1, #8
 800090e:	480d      	ldr	r0, [pc, #52]	@ (8000944 <main+0x450>)
 8000910:	f000 feec 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P13_GPIO_Port, P13_Pin, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2120      	movs	r1, #32
 8000918:	480a      	ldr	r0, [pc, #40]	@ (8000944 <main+0x450>)
 800091a:	f000 fee7 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P14_GPIO_Port, P14_Pin, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2110      	movs	r1, #16
 8000922:	4808      	ldr	r0, [pc, #32]	@ (8000944 <main+0x450>)
 8000924:	f000 fee2 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P15_GPIO_Port, P15_Pin, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <main+0x450>)
 8000930:	f000 fedc 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P16_GPIO_Port, P16_Pin, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	e00f      	b.n	8000958 <main+0x464>
 8000938:	2000002a 	.word	0x2000002a
 800093c:	2000002d 	.word	0x2000002d
 8000940:	2000002b 	.word	0x2000002b
 8000944:	40020400 	.word	0x40020400
 8000948:	2000002c 	.word	0x2000002c
 800094c:	40020000 	.word	0x40020000
 8000950:	20000029 	.word	0x20000029
 8000954:	40020800 	.word	0x40020800
 8000958:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800095c:	48cb      	ldr	r0, [pc, #812]	@ (8000c8c <main+0x798>)
 800095e:	f000 fec5 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P17_GPIO_Port, P17_Pin, 1);
 8000962:	2201      	movs	r2, #1
 8000964:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000968:	48c8      	ldr	r0, [pc, #800]	@ (8000c8c <main+0x798>)
 800096a:	f000 febf 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P18_GPIO_Port, P18_Pin, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2180      	movs	r1, #128	@ 0x80
 8000972:	48c7      	ldr	r0, [pc, #796]	@ (8000c90 <main+0x79c>)
 8000974:	f000 feba 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P1_Points==8){
 8000978:	4bc6      	ldr	r3, [pc, #792]	@ (8000c94 <main+0x7a0>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b08      	cmp	r3, #8
 800097e:	d12b      	bne.n	80009d8 <main+0x4e4>
		HAL_GPIO_WritePin(P11_GPIO_Port, P11_Pin, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000986:	48c1      	ldr	r0, [pc, #772]	@ (8000c8c <main+0x798>)
 8000988:	f000 feb0 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P12_GPIO_Port, P12_Pin, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2108      	movs	r1, #8
 8000990:	48c1      	ldr	r0, [pc, #772]	@ (8000c98 <main+0x7a4>)
 8000992:	f000 feab 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P13_GPIO_Port, P13_Pin, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2120      	movs	r1, #32
 800099a:	48bf      	ldr	r0, [pc, #764]	@ (8000c98 <main+0x7a4>)
 800099c:	f000 fea6 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P14_GPIO_Port, P14_Pin, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2110      	movs	r1, #16
 80009a4:	48bc      	ldr	r0, [pc, #752]	@ (8000c98 <main+0x7a4>)
 80009a6:	f000 fea1 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P15_GPIO_Port, P15_Pin, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009b0:	48b9      	ldr	r0, [pc, #740]	@ (8000c98 <main+0x7a4>)
 80009b2:	f000 fe9b 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P16_GPIO_Port, P16_Pin, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009bc:	48b3      	ldr	r0, [pc, #716]	@ (8000c8c <main+0x798>)
 80009be:	f000 fe95 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P17_GPIO_Port, P17_Pin, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c8:	48b0      	ldr	r0, [pc, #704]	@ (8000c8c <main+0x798>)
 80009ca:	f000 fe8f 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P18_GPIO_Port, P18_Pin, 1);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2180      	movs	r1, #128	@ 0x80
 80009d2:	48af      	ldr	r0, [pc, #700]	@ (8000c90 <main+0x79c>)
 80009d4:	f000 fe8a 	bl	80016ec <HAL_GPIO_WritePin>
	}

	// PLAYER 2

	if(P2_Points==0){
 80009d8:	4bb0      	ldr	r3, [pc, #704]	@ (8000c9c <main+0x7a8>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d12c      	bne.n	8000a3a <main+0x546>
				HAL_GPIO_WritePin(P21_GPIO_Port, P21_Pin, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009e6:	48a9      	ldr	r0, [pc, #676]	@ (8000c8c <main+0x798>)
 80009e8:	f000 fe80 	bl	80016ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(P22_GPIO_Port, P22_Pin, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009f2:	48a9      	ldr	r0, [pc, #676]	@ (8000c98 <main+0x7a4>)
 80009f4:	f000 fe7a 	bl	80016ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(P23_GPIO_Port, P23_Pin, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2104      	movs	r1, #4
 80009fc:	48a6      	ldr	r0, [pc, #664]	@ (8000c98 <main+0x7a4>)
 80009fe:	f000 fe75 	bl	80016ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(P24_GPIO_Port, P24_Pin, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2102      	movs	r1, #2
 8000a06:	48a4      	ldr	r0, [pc, #656]	@ (8000c98 <main+0x7a4>)
 8000a08:	f000 fe70 	bl	80016ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(P25_GPIO_Port, P25_Pin, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a12:	48a1      	ldr	r0, [pc, #644]	@ (8000c98 <main+0x7a4>)
 8000a14:	f000 fe6a 	bl	80016ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(P26_GPIO_Port, P26_Pin, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a1e:	489e      	ldr	r0, [pc, #632]	@ (8000c98 <main+0x7a4>)
 8000a20:	f000 fe64 	bl	80016ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(P27_GPIO_Port, P27_Pin, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a2a:	489b      	ldr	r0, [pc, #620]	@ (8000c98 <main+0x7a4>)
 8000a2c:	f000 fe5e 	bl	80016ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(P28_GPIO_Port, P28_Pin, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2110      	movs	r1, #16
 8000a34:	4896      	ldr	r0, [pc, #600]	@ (8000c90 <main+0x79c>)
 8000a36:	f000 fe59 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P2_Points==1){
 8000a3a:	4b98      	ldr	r3, [pc, #608]	@ (8000c9c <main+0x7a8>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d12c      	bne.n	8000a9c <main+0x5a8>
		HAL_GPIO_WritePin(P21_GPIO_Port, P21_Pin, 1);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a48:	4890      	ldr	r0, [pc, #576]	@ (8000c8c <main+0x798>)
 8000a4a:	f000 fe4f 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P22_GPIO_Port, P22_Pin, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a54:	4890      	ldr	r0, [pc, #576]	@ (8000c98 <main+0x7a4>)
 8000a56:	f000 fe49 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P23_GPIO_Port, P23_Pin, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2104      	movs	r1, #4
 8000a5e:	488e      	ldr	r0, [pc, #568]	@ (8000c98 <main+0x7a4>)
 8000a60:	f000 fe44 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P24_GPIO_Port, P24_Pin, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2102      	movs	r1, #2
 8000a68:	488b      	ldr	r0, [pc, #556]	@ (8000c98 <main+0x7a4>)
 8000a6a:	f000 fe3f 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P25_GPIO_Port, P25_Pin, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a74:	4888      	ldr	r0, [pc, #544]	@ (8000c98 <main+0x7a4>)
 8000a76:	f000 fe39 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P26_GPIO_Port, P26_Pin, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a80:	4885      	ldr	r0, [pc, #532]	@ (8000c98 <main+0x7a4>)
 8000a82:	f000 fe33 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P27_GPIO_Port, P27_Pin, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a8c:	4882      	ldr	r0, [pc, #520]	@ (8000c98 <main+0x7a4>)
 8000a8e:	f000 fe2d 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P28_GPIO_Port, P28_Pin, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2110      	movs	r1, #16
 8000a96:	487e      	ldr	r0, [pc, #504]	@ (8000c90 <main+0x79c>)
 8000a98:	f000 fe28 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P2_Points==2){
 8000a9c:	4b7f      	ldr	r3, [pc, #508]	@ (8000c9c <main+0x7a8>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d12c      	bne.n	8000afe <main+0x60a>
		HAL_GPIO_WritePin(P21_GPIO_Port, P21_Pin, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000aaa:	4878      	ldr	r0, [pc, #480]	@ (8000c8c <main+0x798>)
 8000aac:	f000 fe1e 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P22_GPIO_Port, P22_Pin, 1);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ab6:	4878      	ldr	r0, [pc, #480]	@ (8000c98 <main+0x7a4>)
 8000ab8:	f000 fe18 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P23_GPIO_Port, P23_Pin, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2104      	movs	r1, #4
 8000ac0:	4875      	ldr	r0, [pc, #468]	@ (8000c98 <main+0x7a4>)
 8000ac2:	f000 fe13 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P24_GPIO_Port, P24_Pin, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4873      	ldr	r0, [pc, #460]	@ (8000c98 <main+0x7a4>)
 8000acc:	f000 fe0e 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P25_GPIO_Port, P25_Pin, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ad6:	4870      	ldr	r0, [pc, #448]	@ (8000c98 <main+0x7a4>)
 8000ad8:	f000 fe08 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P26_GPIO_Port, P26_Pin, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ae2:	486d      	ldr	r0, [pc, #436]	@ (8000c98 <main+0x7a4>)
 8000ae4:	f000 fe02 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P27_GPIO_Port, P27_Pin, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aee:	486a      	ldr	r0, [pc, #424]	@ (8000c98 <main+0x7a4>)
 8000af0:	f000 fdfc 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P28_GPIO_Port, P28_Pin, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2110      	movs	r1, #16
 8000af8:	4865      	ldr	r0, [pc, #404]	@ (8000c90 <main+0x79c>)
 8000afa:	f000 fdf7 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P2_Points==3){
 8000afe:	4b67      	ldr	r3, [pc, #412]	@ (8000c9c <main+0x7a8>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	d12c      	bne.n	8000b60 <main+0x66c>
		HAL_GPIO_WritePin(P21_GPIO_Port, P21_Pin, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b0c:	485f      	ldr	r0, [pc, #380]	@ (8000c8c <main+0x798>)
 8000b0e:	f000 fded 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P22_GPIO_Port, P22_Pin, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b18:	485f      	ldr	r0, [pc, #380]	@ (8000c98 <main+0x7a4>)
 8000b1a:	f000 fde7 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P23_GPIO_Port, P23_Pin, 1);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2104      	movs	r1, #4
 8000b22:	485d      	ldr	r0, [pc, #372]	@ (8000c98 <main+0x7a4>)
 8000b24:	f000 fde2 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P24_GPIO_Port, P24_Pin, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	485a      	ldr	r0, [pc, #360]	@ (8000c98 <main+0x7a4>)
 8000b2e:	f000 fddd 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P25_GPIO_Port, P25_Pin, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b38:	4857      	ldr	r0, [pc, #348]	@ (8000c98 <main+0x7a4>)
 8000b3a:	f000 fdd7 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P26_GPIO_Port, P26_Pin, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b44:	4854      	ldr	r0, [pc, #336]	@ (8000c98 <main+0x7a4>)
 8000b46:	f000 fdd1 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P27_GPIO_Port, P27_Pin, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b50:	4851      	ldr	r0, [pc, #324]	@ (8000c98 <main+0x7a4>)
 8000b52:	f000 fdcb 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P28_GPIO_Port, P28_Pin, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2110      	movs	r1, #16
 8000b5a:	484d      	ldr	r0, [pc, #308]	@ (8000c90 <main+0x79c>)
 8000b5c:	f000 fdc6 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P2_Points==4){
 8000b60:	4b4e      	ldr	r3, [pc, #312]	@ (8000c9c <main+0x7a8>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d12c      	bne.n	8000bc2 <main+0x6ce>
		HAL_GPIO_WritePin(P21_GPIO_Port, P21_Pin, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b6e:	4847      	ldr	r0, [pc, #284]	@ (8000c8c <main+0x798>)
 8000b70:	f000 fdbc 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P22_GPIO_Port, P22_Pin, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b7a:	4847      	ldr	r0, [pc, #284]	@ (8000c98 <main+0x7a4>)
 8000b7c:	f000 fdb6 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P23_GPIO_Port, P23_Pin, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2104      	movs	r1, #4
 8000b84:	4844      	ldr	r0, [pc, #272]	@ (8000c98 <main+0x7a4>)
 8000b86:	f000 fdb1 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P24_GPIO_Port, P24_Pin, 1);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4842      	ldr	r0, [pc, #264]	@ (8000c98 <main+0x7a4>)
 8000b90:	f000 fdac 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P25_GPIO_Port, P25_Pin, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b9a:	483f      	ldr	r0, [pc, #252]	@ (8000c98 <main+0x7a4>)
 8000b9c:	f000 fda6 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P26_GPIO_Port, P26_Pin, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ba6:	483c      	ldr	r0, [pc, #240]	@ (8000c98 <main+0x7a4>)
 8000ba8:	f000 fda0 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P27_GPIO_Port, P27_Pin, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb2:	4839      	ldr	r0, [pc, #228]	@ (8000c98 <main+0x7a4>)
 8000bb4:	f000 fd9a 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P28_GPIO_Port, P28_Pin, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2110      	movs	r1, #16
 8000bbc:	4834      	ldr	r0, [pc, #208]	@ (8000c90 <main+0x79c>)
 8000bbe:	f000 fd95 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P2_Points==5){
 8000bc2:	4b36      	ldr	r3, [pc, #216]	@ (8000c9c <main+0x7a8>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b05      	cmp	r3, #5
 8000bc8:	d12c      	bne.n	8000c24 <main+0x730>
		HAL_GPIO_WritePin(P21_GPIO_Port, P21_Pin, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bd0:	482e      	ldr	r0, [pc, #184]	@ (8000c8c <main+0x798>)
 8000bd2:	f000 fd8b 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P22_GPIO_Port, P22_Pin, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bdc:	482e      	ldr	r0, [pc, #184]	@ (8000c98 <main+0x7a4>)
 8000bde:	f000 fd85 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P23_GPIO_Port, P23_Pin, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2104      	movs	r1, #4
 8000be6:	482c      	ldr	r0, [pc, #176]	@ (8000c98 <main+0x7a4>)
 8000be8:	f000 fd80 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P24_GPIO_Port, P24_Pin, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2102      	movs	r1, #2
 8000bf0:	4829      	ldr	r0, [pc, #164]	@ (8000c98 <main+0x7a4>)
 8000bf2:	f000 fd7b 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P25_GPIO_Port, P25_Pin, 1);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bfc:	4826      	ldr	r0, [pc, #152]	@ (8000c98 <main+0x7a4>)
 8000bfe:	f000 fd75 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P26_GPIO_Port, P26_Pin, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c08:	4823      	ldr	r0, [pc, #140]	@ (8000c98 <main+0x7a4>)
 8000c0a:	f000 fd6f 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P27_GPIO_Port, P27_Pin, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c14:	4820      	ldr	r0, [pc, #128]	@ (8000c98 <main+0x7a4>)
 8000c16:	f000 fd69 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P28_GPIO_Port, P28_Pin, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2110      	movs	r1, #16
 8000c1e:	481c      	ldr	r0, [pc, #112]	@ (8000c90 <main+0x79c>)
 8000c20:	f000 fd64 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P2_Points==6){
 8000c24:	4b1d      	ldr	r3, [pc, #116]	@ (8000c9c <main+0x7a8>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b06      	cmp	r3, #6
 8000c2a:	d12c      	bne.n	8000c86 <main+0x792>
		HAL_GPIO_WritePin(P21_GPIO_Port, P21_Pin, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c32:	4816      	ldr	r0, [pc, #88]	@ (8000c8c <main+0x798>)
 8000c34:	f000 fd5a 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P22_GPIO_Port, P22_Pin, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c3e:	4816      	ldr	r0, [pc, #88]	@ (8000c98 <main+0x7a4>)
 8000c40:	f000 fd54 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P23_GPIO_Port, P23_Pin, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2104      	movs	r1, #4
 8000c48:	4813      	ldr	r0, [pc, #76]	@ (8000c98 <main+0x7a4>)
 8000c4a:	f000 fd4f 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P24_GPIO_Port, P24_Pin, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2102      	movs	r1, #2
 8000c52:	4811      	ldr	r0, [pc, #68]	@ (8000c98 <main+0x7a4>)
 8000c54:	f000 fd4a 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P25_GPIO_Port, P25_Pin, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c5e:	480e      	ldr	r0, [pc, #56]	@ (8000c98 <main+0x7a4>)
 8000c60:	f000 fd44 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P26_GPIO_Port, P26_Pin, 1);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c6a:	480b      	ldr	r0, [pc, #44]	@ (8000c98 <main+0x7a4>)
 8000c6c:	f000 fd3e 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P27_GPIO_Port, P27_Pin, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c76:	4808      	ldr	r0, [pc, #32]	@ (8000c98 <main+0x7a4>)
 8000c78:	f000 fd38 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P28_GPIO_Port, P28_Pin, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4803      	ldr	r0, [pc, #12]	@ (8000c90 <main+0x79c>)
 8000c82:	f000 fd33 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P2_Points==7){
 8000c86:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <main+0x7a8>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	e009      	b.n	8000ca0 <main+0x7ac>
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020800 	.word	0x40020800
 8000c94:	20000029 	.word	0x20000029
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	2000002a 	.word	0x2000002a
 8000ca0:	2b07      	cmp	r3, #7
 8000ca2:	d12c      	bne.n	8000cfe <main+0x80a>
		HAL_GPIO_WritePin(P21_GPIO_Port, P21_Pin, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000caa:	482f      	ldr	r0, [pc, #188]	@ (8000d68 <main+0x874>)
 8000cac:	f000 fd1e 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P22_GPIO_Port, P22_Pin, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb6:	482d      	ldr	r0, [pc, #180]	@ (8000d6c <main+0x878>)
 8000cb8:	f000 fd18 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P23_GPIO_Port, P23_Pin, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	482a      	ldr	r0, [pc, #168]	@ (8000d6c <main+0x878>)
 8000cc2:	f000 fd13 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P24_GPIO_Port, P24_Pin, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2102      	movs	r1, #2
 8000cca:	4828      	ldr	r0, [pc, #160]	@ (8000d6c <main+0x878>)
 8000ccc:	f000 fd0e 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P25_GPIO_Port, P25_Pin, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cd6:	4825      	ldr	r0, [pc, #148]	@ (8000d6c <main+0x878>)
 8000cd8:	f000 fd08 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P26_GPIO_Port, P26_Pin, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce2:	4822      	ldr	r0, [pc, #136]	@ (8000d6c <main+0x878>)
 8000ce4:	f000 fd02 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P27_GPIO_Port, P27_Pin, 1);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cee:	481f      	ldr	r0, [pc, #124]	@ (8000d6c <main+0x878>)
 8000cf0:	f000 fcfc 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P28_GPIO_Port, P28_Pin, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	481d      	ldr	r0, [pc, #116]	@ (8000d70 <main+0x87c>)
 8000cfa:	f000 fcf7 	bl	80016ec <HAL_GPIO_WritePin>
	}
	if(P2_Points==8){
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <main+0x880>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b08      	cmp	r3, #8
 8000d04:	f47f abfe 	bne.w	8000504 <main+0x10>
		HAL_GPIO_WritePin(P21_GPIO_Port, P21_Pin, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d0e:	4816      	ldr	r0, [pc, #88]	@ (8000d68 <main+0x874>)
 8000d10:	f000 fcec 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P22_GPIO_Port, P22_Pin, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d1a:	4814      	ldr	r0, [pc, #80]	@ (8000d6c <main+0x878>)
 8000d1c:	f000 fce6 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P23_GPIO_Port, P23_Pin, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2104      	movs	r1, #4
 8000d24:	4811      	ldr	r0, [pc, #68]	@ (8000d6c <main+0x878>)
 8000d26:	f000 fce1 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P24_GPIO_Port, P24_Pin, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	480f      	ldr	r0, [pc, #60]	@ (8000d6c <main+0x878>)
 8000d30:	f000 fcdc 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P25_GPIO_Port, P25_Pin, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d3a:	480c      	ldr	r0, [pc, #48]	@ (8000d6c <main+0x878>)
 8000d3c:	f000 fcd6 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P26_GPIO_Port, P26_Pin, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d46:	4809      	ldr	r0, [pc, #36]	@ (8000d6c <main+0x878>)
 8000d48:	f000 fcd0 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P27_GPIO_Port, P27_Pin, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d52:	4806      	ldr	r0, [pc, #24]	@ (8000d6c <main+0x878>)
 8000d54:	f000 fcca 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P28_GPIO_Port, P28_Pin, 1);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	4804      	ldr	r0, [pc, #16]	@ (8000d70 <main+0x87c>)
 8000d5e:	f000 fcc5 	bl	80016ec <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == 0){
 8000d62:	f7ff bbcf 	b.w	8000504 <main+0x10>
 8000d66:	bf00      	nop
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	40020400 	.word	0x40020400
 8000d70:	40020800 	.word	0x40020800
 8000d74:	2000002a 	.word	0x2000002a

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b094      	sub	sp, #80	@ 0x50
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	2234      	movs	r2, #52	@ 0x34
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f001 f9f8 	bl	800217c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	4b29      	ldr	r3, [pc, #164]	@ (8000e48 <SystemClock_Config+0xd0>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da4:	4a28      	ldr	r2, [pc, #160]	@ (8000e48 <SystemClock_Config+0xd0>)
 8000da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000daa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dac:	4b26      	ldr	r3, [pc, #152]	@ (8000e48 <SystemClock_Config+0xd0>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000db8:	2300      	movs	r3, #0
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <SystemClock_Config+0xd4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dc4:	4a21      	ldr	r2, [pc, #132]	@ (8000e4c <SystemClock_Config+0xd4>)
 8000dc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e4c <SystemClock_Config+0xd4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de0:	2310      	movs	r3, #16
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de4:	2302      	movs	r3, #2
 8000de6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de8:	2300      	movs	r3, #0
 8000dea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dec:	2308      	movs	r3, #8
 8000dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000df0:	2350      	movs	r3, #80	@ 0x50
 8000df2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 ff1b 	bl	8001c40 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e10:	f000 f8aa 	bl	8000f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	230f      	movs	r3, #15
 8000e16:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e20:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	2102      	movs	r1, #2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fc75 	bl	8001720 <HAL_RCC_ClockConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000e3c:	f000 f894 	bl	8000f68 <Error_Handler>
  }
}
 8000e40:	bf00      	nop
 8000e42:	3750      	adds	r7, #80	@ 0x50
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40007000 	.word	0x40007000

08000e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f58 <MX_GPIO_Init+0x108>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a3a      	ldr	r2, [pc, #232]	@ (8000f58 <MX_GPIO_Init+0x108>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b38      	ldr	r3, [pc, #224]	@ (8000f58 <MX_GPIO_Init+0x108>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b34      	ldr	r3, [pc, #208]	@ (8000f58 <MX_GPIO_Init+0x108>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a33      	ldr	r2, [pc, #204]	@ (8000f58 <MX_GPIO_Init+0x108>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b31      	ldr	r3, [pc, #196]	@ (8000f58 <MX_GPIO_Init+0x108>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f58 <MX_GPIO_Init+0x108>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8000f58 <MX_GPIO_Init+0x108>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <MX_GPIO_Init+0x108>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|P16_Pin
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 51ff 	mov.w	r1, #8160	@ 0x1fe0
 8000ec0:	4826      	ldr	r0, [pc, #152]	@ (8000f5c <MX_GPIO_Init+0x10c>)
 8000ec2:	f000 fc13 	bl	80016ec <HAL_GPIO_WritePin>
                          |P17_Pin|P11_Pin|P21_Pin|P20_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P28_Pin|P18_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2190      	movs	r1, #144	@ 0x90
 8000eca:	4825      	ldr	r0, [pc, #148]	@ (8000f60 <MX_GPIO_Init+0x110>)
 8000ecc:	f000 fc0e 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P24_Pin|P23_Pin|P15_Pin|P22_Pin
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f24f 417e 	movw	r1, #62590	@ 0xf47e
 8000ed6:	4823      	ldr	r0, [pc, #140]	@ (8000f64 <MX_GPIO_Init+0x114>)
 8000ed8:	f000 fc08 	bl	80016ec <HAL_GPIO_WritePin>
                          |P27_Pin|P26_Pin|P25_Pin|P12_Pin
                          |P14_Pin|P13_Pin|P10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BTN_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN_Pin|BTN2_Pin|BTN3_Pin;
 8000edc:	f242 0303 	movw	r3, #8195	@ 0x2003
 8000ee0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	4619      	mov	r1, r3
 8000ef0:	481b      	ldr	r0, [pc, #108]	@ (8000f60 <MX_GPIO_Init+0x110>)
 8000ef2:	f000 fa4f 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin P16_Pin
                           P17_Pin P11_Pin P21_Pin P20_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|P16_Pin
 8000ef6:	f44f 53ff 	mov.w	r3, #8160	@ 0x1fe0
 8000efa:	60fb      	str	r3, [r7, #12]
                          |P17_Pin|P11_Pin|P21_Pin|P20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4813      	ldr	r0, [pc, #76]	@ (8000f5c <MX_GPIO_Init+0x10c>)
 8000f10:	f000 fa40 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : P28_Pin P18_Pin */
  GPIO_InitStruct.Pin = P28_Pin|P18_Pin;
 8000f14:	2390      	movs	r3, #144	@ 0x90
 8000f16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480d      	ldr	r0, [pc, #52]	@ (8000f60 <MX_GPIO_Init+0x110>)
 8000f2c:	f000 fa32 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : P24_Pin P23_Pin P15_Pin P22_Pin
                           P27_Pin P26_Pin P25_Pin P12_Pin
                           P14_Pin P13_Pin P10_Pin */
  GPIO_InitStruct.Pin = P24_Pin|P23_Pin|P15_Pin|P22_Pin
 8000f30:	f24f 437e 	movw	r3, #62590	@ 0xf47e
 8000f34:	60fb      	str	r3, [r7, #12]
                          |P27_Pin|P26_Pin|P25_Pin|P12_Pin
                          |P14_Pin|P13_Pin|P10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	4619      	mov	r1, r3
 8000f48:	4806      	ldr	r0, [pc, #24]	@ (8000f64 <MX_GPIO_Init+0x114>)
 8000f4a:	f000 fa23 	bl	8001394 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f4e:	bf00      	nop
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020800 	.word	0x40020800
 8000f64:	40020400 	.word	0x40020400

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <Error_Handler+0x8>

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	4a08      	ldr	r2, [pc, #32]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fb2:	2007      	movs	r0, #7
 8000fb4:	f000 f9ba 	bl	800132c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <NMI_Handler+0x4>

08000fcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101a:	f000 f891 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001080 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800104c:	f7ff ffea 	bl	8001024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001050:	480c      	ldr	r0, [pc, #48]	@ (8001084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001052:	490d      	ldr	r1, [pc, #52]	@ (8001088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001054:	4a0d      	ldr	r2, [pc, #52]	@ (800108c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001068:	4c0a      	ldr	r4, [pc, #40]	@ (8001094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001076:	f001 f889 	bl	800218c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff fa3b 	bl	80004f4 <main>
  bx  lr    
 800107e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800108c:	0800220c 	.word	0x0800220c
  ldr r2, =_sbss
 8001090:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001094:	20000034 	.word	0x20000034

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a0:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	@ (80010dc <HAL_Init+0x40>)
 80010a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <HAL_Init+0x40>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	@ (80010dc <HAL_Init+0x40>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f931 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f808 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff ff50 	bl	8000f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f93b 	bl	800137a <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f911 	bl	8001342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000000 	.word	0x20000000
 8001138:	20000008 	.word	0x20000008
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008
 8001164:	20000030 	.word	0x20000030

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000030 	.word	0x20000030

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008

080011c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	@ (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	@ (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	@ (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	@ 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	@ 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff8e 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff47 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001354:	f7ff ff5c 	bl	8001210 <__NVIC_GetPriorityGrouping>
 8001358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff ff8e 	bl	8001280 <NVIC_EncodePriority>
 8001364:	4602      	mov	r2, r0
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff5d 	bl	800122c <__NVIC_SetPriority>
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffb0 	bl	80012e8 <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	@ 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	e165      	b.n	800167c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b0:	2201      	movs	r2, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	f040 8154 	bne.w	8001676 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d005      	beq.n	80013e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d130      	bne.n	8001448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141c:	2201      	movs	r2, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 0201 	and.w	r2, r3, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b03      	cmp	r3, #3
 8001452:	d017      	beq.n	8001484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d123      	bne.n	80014d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	08da      	lsrs	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3208      	adds	r2, #8
 8001498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3208      	adds	r2, #8
 80014d2:	69b9      	ldr	r1, [r7, #24]
 80014d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0203 	and.w	r2, r3, #3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80ae 	beq.w	8001676 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b5d      	ldr	r3, [pc, #372]	@ (8001694 <HAL_GPIO_Init+0x300>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	4a5c      	ldr	r2, [pc, #368]	@ (8001694 <HAL_GPIO_Init+0x300>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001528:	6453      	str	r3, [r2, #68]	@ 0x44
 800152a:	4b5a      	ldr	r3, [pc, #360]	@ (8001694 <HAL_GPIO_Init+0x300>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001536:	4a58      	ldr	r2, [pc, #352]	@ (8001698 <HAL_GPIO_Init+0x304>)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4f      	ldr	r2, [pc, #316]	@ (800169c <HAL_GPIO_Init+0x308>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d025      	beq.n	80015ae <HAL_GPIO_Init+0x21a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4e      	ldr	r2, [pc, #312]	@ (80016a0 <HAL_GPIO_Init+0x30c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d01f      	beq.n	80015aa <HAL_GPIO_Init+0x216>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4d      	ldr	r2, [pc, #308]	@ (80016a4 <HAL_GPIO_Init+0x310>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d019      	beq.n	80015a6 <HAL_GPIO_Init+0x212>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4c      	ldr	r2, [pc, #304]	@ (80016a8 <HAL_GPIO_Init+0x314>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0x20e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4b      	ldr	r2, [pc, #300]	@ (80016ac <HAL_GPIO_Init+0x318>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00d      	beq.n	800159e <HAL_GPIO_Init+0x20a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4a      	ldr	r2, [pc, #296]	@ (80016b0 <HAL_GPIO_Init+0x31c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d007      	beq.n	800159a <HAL_GPIO_Init+0x206>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a49      	ldr	r2, [pc, #292]	@ (80016b4 <HAL_GPIO_Init+0x320>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_GPIO_Init+0x202>
 8001592:	2306      	movs	r3, #6
 8001594:	e00c      	b.n	80015b0 <HAL_GPIO_Init+0x21c>
 8001596:	2307      	movs	r3, #7
 8001598:	e00a      	b.n	80015b0 <HAL_GPIO_Init+0x21c>
 800159a:	2305      	movs	r3, #5
 800159c:	e008      	b.n	80015b0 <HAL_GPIO_Init+0x21c>
 800159e:	2304      	movs	r3, #4
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x21c>
 80015a2:	2303      	movs	r3, #3
 80015a4:	e004      	b.n	80015b0 <HAL_GPIO_Init+0x21c>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e002      	b.n	80015b0 <HAL_GPIO_Init+0x21c>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <HAL_GPIO_Init+0x21c>
 80015ae:	2300      	movs	r3, #0
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	f002 0203 	and.w	r2, r2, #3
 80015b6:	0092      	lsls	r2, r2, #2
 80015b8:	4093      	lsls	r3, r2
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c0:	4935      	ldr	r1, [pc, #212]	@ (8001698 <HAL_GPIO_Init+0x304>)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ce:	4b3a      	ldr	r3, [pc, #232]	@ (80016b8 <HAL_GPIO_Init+0x324>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f2:	4a31      	ldr	r2, [pc, #196]	@ (80016b8 <HAL_GPIO_Init+0x324>)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015f8:	4b2f      	ldr	r3, [pc, #188]	@ (80016b8 <HAL_GPIO_Init+0x324>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800161c:	4a26      	ldr	r2, [pc, #152]	@ (80016b8 <HAL_GPIO_Init+0x324>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001622:	4b25      	ldr	r3, [pc, #148]	@ (80016b8 <HAL_GPIO_Init+0x324>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001646:	4a1c      	ldr	r2, [pc, #112]	@ (80016b8 <HAL_GPIO_Init+0x324>)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800164c:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <HAL_GPIO_Init+0x324>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001670:	4a11      	ldr	r2, [pc, #68]	@ (80016b8 <HAL_GPIO_Init+0x324>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3301      	adds	r3, #1
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	2b0f      	cmp	r3, #15
 8001680:	f67f ae96 	bls.w	80013b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3724      	adds	r7, #36	@ 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40013800 	.word	0x40013800
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020c00 	.word	0x40020c00
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40021400 	.word	0x40021400
 80016b4:	40021800 	.word	0x40021800
 80016b8:	40013c00 	.word	0x40013c00

080016bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	e001      	b.n	80016de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001708:	e003      	b.n	8001712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	041a      	lsls	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	619a      	str	r2, [r3, #24]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0cc      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001734:	4b68      	ldr	r3, [pc, #416]	@ (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d90c      	bls.n	800175c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b65      	ldr	r3, [pc, #404]	@ (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b63      	ldr	r3, [pc, #396]	@ (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0b8      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001774:	4b59      	ldr	r3, [pc, #356]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a58      	ldr	r2, [pc, #352]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800177e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800178c:	4b53      	ldr	r3, [pc, #332]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a52      	ldr	r2, [pc, #328]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4b50      	ldr	r3, [pc, #320]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	494d      	ldr	r1, [pc, #308]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d044      	beq.n	8001840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b47      	ldr	r3, [pc, #284]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d119      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e07f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d003      	beq.n	80017de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	4b3f      	ldr	r3, [pc, #252]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	4b3b      	ldr	r3, [pc, #236]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e067      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fe:	4b37      	ldr	r3, [pc, #220]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f023 0203 	bic.w	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4934      	ldr	r1, [pc, #208]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001810:	f7ff fcaa 	bl	8001168 <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	e00a      	b.n	800182e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001818:	f7ff fca6 	bl	8001168 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e04f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	4b2b      	ldr	r3, [pc, #172]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 020c 	and.w	r2, r3, #12
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	429a      	cmp	r2, r3
 800183e:	d1eb      	bne.n	8001818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001840:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 030f 	and.w	r3, r3, #15
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d20c      	bcs.n	8001868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e032      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4916      	ldr	r1, [pc, #88]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001892:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	490e      	ldr	r1, [pc, #56]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018a6:	f000 f821 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	490a      	ldr	r1, [pc, #40]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	fa22 f303 	lsr.w	r3, r2, r3
 80018be:	4a09      	ldr	r2, [pc, #36]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c2:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fc0a 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00
 80018dc:	40023800 	.word	0x40023800
 80018e0:	080021ec 	.word	0x080021ec
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f0:	b0a6      	sub	sp, #152	@ 0x98
 80018f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001912:	4bc8      	ldr	r3, [pc, #800]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x348>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b0c      	cmp	r3, #12
 800191c:	f200 817e 	bhi.w	8001c1c <HAL_RCC_GetSysClockFreq+0x330>
 8001920:	a201      	add	r2, pc, #4	@ (adr r2, 8001928 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001926:	bf00      	nop
 8001928:	0800195d 	.word	0x0800195d
 800192c:	08001c1d 	.word	0x08001c1d
 8001930:	08001c1d 	.word	0x08001c1d
 8001934:	08001c1d 	.word	0x08001c1d
 8001938:	08001965 	.word	0x08001965
 800193c:	08001c1d 	.word	0x08001c1d
 8001940:	08001c1d 	.word	0x08001c1d
 8001944:	08001c1d 	.word	0x08001c1d
 8001948:	0800196d 	.word	0x0800196d
 800194c:	08001c1d 	.word	0x08001c1d
 8001950:	08001c1d 	.word	0x08001c1d
 8001954:	08001c1d 	.word	0x08001c1d
 8001958:	08001ad7 	.word	0x08001ad7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4bb6      	ldr	r3, [pc, #728]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x34c>)
 800195e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8001962:	e15f      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001964:	4bb5      	ldr	r3, [pc, #724]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x350>)
 8001966:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800196a:	e15b      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800196c:	4bb1      	ldr	r3, [pc, #708]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x348>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001974:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001978:	4bae      	ldr	r3, [pc, #696]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x348>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d031      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001984:	4bab      	ldr	r3, [pc, #684]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x348>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	099b      	lsrs	r3, r3, #6
 800198a:	2200      	movs	r2, #0
 800198c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800198e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001990:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001996:	663b      	str	r3, [r7, #96]	@ 0x60
 8001998:	2300      	movs	r3, #0
 800199a:	667b      	str	r3, [r7, #100]	@ 0x64
 800199c:	4ba7      	ldr	r3, [pc, #668]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x350>)
 800199e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80019a2:	462a      	mov	r2, r5
 80019a4:	fb03 f202 	mul.w	r2, r3, r2
 80019a8:	2300      	movs	r3, #0
 80019aa:	4621      	mov	r1, r4
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	4aa2      	ldr	r2, [pc, #648]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x350>)
 80019b4:	4621      	mov	r1, r4
 80019b6:	fba1 1202 	umull	r1, r2, r1, r2
 80019ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80019bc:	460a      	mov	r2, r1
 80019be:	67ba      	str	r2, [r7, #120]	@ 0x78
 80019c0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80019c2:	4413      	add	r3, r2
 80019c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80019c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019ca:	2200      	movs	r2, #0
 80019cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80019ce:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80019d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80019d4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80019d8:	f7fe fc14 	bl	8000204 <__aeabi_uldivmod>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4613      	mov	r3, r2
 80019e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80019e6:	e064      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e8:	4b92      	ldr	r3, [pc, #584]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x348>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	099b      	lsrs	r3, r3, #6
 80019ee:	2200      	movs	r2, #0
 80019f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80019f2:	657a      	str	r2, [r7, #84]	@ 0x54
 80019f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019fc:	2300      	movs	r3, #0
 80019fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a00:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001a04:	4622      	mov	r2, r4
 8001a06:	462b      	mov	r3, r5
 8001a08:	f04f 0000 	mov.w	r0, #0
 8001a0c:	f04f 0100 	mov.w	r1, #0
 8001a10:	0159      	lsls	r1, r3, #5
 8001a12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a16:	0150      	lsls	r0, r2, #5
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	1a51      	subs	r1, r2, r1
 8001a20:	6139      	str	r1, [r7, #16]
 8001a22:	4629      	mov	r1, r5
 8001a24:	eb63 0301 	sbc.w	r3, r3, r1
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a36:	4659      	mov	r1, fp
 8001a38:	018b      	lsls	r3, r1, #6
 8001a3a:	4651      	mov	r1, sl
 8001a3c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a40:	4651      	mov	r1, sl
 8001a42:	018a      	lsls	r2, r1, #6
 8001a44:	4651      	mov	r1, sl
 8001a46:	ebb2 0801 	subs.w	r8, r2, r1
 8001a4a:	4659      	mov	r1, fp
 8001a4c:	eb63 0901 	sbc.w	r9, r3, r1
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a64:	4690      	mov	r8, r2
 8001a66:	4699      	mov	r9, r3
 8001a68:	4623      	mov	r3, r4
 8001a6a:	eb18 0303 	adds.w	r3, r8, r3
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	462b      	mov	r3, r5
 8001a72:	eb49 0303 	adc.w	r3, r9, r3
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a84:	4629      	mov	r1, r5
 8001a86:	028b      	lsls	r3, r1, #10
 8001a88:	4621      	mov	r1, r4
 8001a8a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a8e:	4621      	mov	r1, r4
 8001a90:	028a      	lsls	r2, r1, #10
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001aa0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001aa4:	f7fe fbae 	bl	8000204 <__aeabi_uldivmod>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4613      	mov	r3, r2
 8001aae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ab2:	4b60      	ldr	r3, [pc, #384]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	0c1b      	lsrs	r3, r3, #16
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	3301      	adds	r3, #1
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8001ac4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001ad4:	e0a6      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad6:	4b57      	ldr	r3, [pc, #348]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ae2:	4b54      	ldr	r3, [pc, #336]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d02a      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aee:	4b51      	ldr	r3, [pc, #324]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x348>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	099b      	lsrs	r3, r3, #6
 8001af4:	2200      	movs	r2, #0
 8001af6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001af8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001afc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b00:	2100      	movs	r1, #0
 8001b02:	4b4e      	ldr	r3, [pc, #312]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x350>)
 8001b04:	fb03 f201 	mul.w	r2, r3, r1
 8001b08:	2300      	movs	r3, #0
 8001b0a:	fb00 f303 	mul.w	r3, r0, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a4a      	ldr	r2, [pc, #296]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x350>)
 8001b12:	fba0 1202 	umull	r1, r2, r0, r2
 8001b16:	677a      	str	r2, [r7, #116]	@ 0x74
 8001b18:	460a      	mov	r2, r1
 8001b1a:	673a      	str	r2, [r7, #112]	@ 0x70
 8001b1c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001b1e:	4413      	add	r3, r2
 8001b20:	677b      	str	r3, [r7, #116]	@ 0x74
 8001b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b26:	2200      	movs	r2, #0
 8001b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b2a:	637a      	str	r2, [r7, #52]	@ 0x34
 8001b2c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b30:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001b34:	f7fe fb66 	bl	8000204 <__aeabi_uldivmod>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b42:	e05b      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b44:	4b3b      	ldr	r3, [pc, #236]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b56:	623b      	str	r3, [r7, #32]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b60:	4642      	mov	r2, r8
 8001b62:	464b      	mov	r3, r9
 8001b64:	f04f 0000 	mov.w	r0, #0
 8001b68:	f04f 0100 	mov.w	r1, #0
 8001b6c:	0159      	lsls	r1, r3, #5
 8001b6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b72:	0150      	lsls	r0, r2, #5
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4641      	mov	r1, r8
 8001b7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b7e:	4649      	mov	r1, r9
 8001b80:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b98:	ebb2 040a 	subs.w	r4, r2, sl
 8001b9c:	eb63 050b 	sbc.w	r5, r3, fp
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	00eb      	lsls	r3, r5, #3
 8001baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bae:	00e2      	lsls	r2, r4, #3
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	461d      	mov	r5, r3
 8001bb4:	4643      	mov	r3, r8
 8001bb6:	18e3      	adds	r3, r4, r3
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	464b      	mov	r3, r9
 8001bbc:	eb45 0303 	adc.w	r3, r5, r3
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bce:	4629      	mov	r1, r5
 8001bd0:	028b      	lsls	r3, r1, #10
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bd8:	4621      	mov	r1, r4
 8001bda:	028a      	lsls	r2, r1, #10
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001be4:	2200      	movs	r2, #0
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	61fa      	str	r2, [r7, #28]
 8001bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bee:	f7fe fb09 	bl	8000204 <__aeabi_uldivmod>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	0f1b      	lsrs	r3, r3, #28
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8001c0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c1a:	e003      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001c1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3798      	adds	r7, #152	@ 0x98
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	00f42400 	.word	0x00f42400
 8001c3c:	017d7840 	.word	0x017d7840

08001c40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e28d      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8083 	beq.w	8001d66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c60:	4b94      	ldr	r3, [pc, #592]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d019      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c6c:	4b91      	ldr	r3, [pc, #580]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c78:	4b8e      	ldr	r3, [pc, #568]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c84:	d00c      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c86:	4b8b      	ldr	r3, [pc, #556]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d112      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c92:	4b88      	ldr	r3, [pc, #544]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	4b84      	ldr	r3, [pc, #528]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d05b      	beq.n	8001d64 <HAL_RCC_OscConfig+0x124>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d157      	bne.n	8001d64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e25a      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc0:	d106      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x90>
 8001cc2:	4b7c      	ldr	r3, [pc, #496]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a7b      	ldr	r2, [pc, #492]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e01d      	b.n	8001d0c <HAL_RCC_OscConfig+0xcc>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0xb4>
 8001cda:	4b76      	ldr	r3, [pc, #472]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a75      	ldr	r2, [pc, #468]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b73      	ldr	r3, [pc, #460]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a72      	ldr	r2, [pc, #456]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0xcc>
 8001cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b6c      	ldr	r3, [pc, #432]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a6b      	ldr	r2, [pc, #428]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff fa28 	bl	8001168 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fa24 	bl	8001168 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	@ 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e21f      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b61      	ldr	r3, [pc, #388]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0xdc>
 8001d3a:	e014      	b.n	8001d66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fa14 	bl	8001168 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff fa10 	bl	8001168 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	@ 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e20b      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	4b57      	ldr	r3, [pc, #348]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x104>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d06f      	beq.n	8001e52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d72:	4b50      	ldr	r3, [pc, #320]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d017      	beq.n	8001dae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d105      	bne.n	8001d96 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d96:	4b47      	ldr	r3, [pc, #284]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d9e:	2b0c      	cmp	r3, #12
 8001da0:	d11c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da2:	4b44      	ldr	r3, [pc, #272]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d116      	bne.n	8001ddc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	4b41      	ldr	r3, [pc, #260]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x186>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e1d3      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4937      	ldr	r1, [pc, #220]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	e03a      	b.n	8001e52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de4:	4b34      	ldr	r3, [pc, #208]	@ (8001eb8 <HAL_RCC_OscConfig+0x278>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f9bd 	bl	8001168 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df2:	f7ff f9b9 	bl	8001168 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e1b4      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e04:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e10:	4b28      	ldr	r3, [pc, #160]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4925      	ldr	r1, [pc, #148]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]
 8001e24:	e015      	b.n	8001e52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e26:	4b24      	ldr	r3, [pc, #144]	@ (8001eb8 <HAL_RCC_OscConfig+0x278>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f99c 	bl	8001168 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e34:	f7ff f998 	bl	8001168 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e193      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d036      	beq.n	8001ecc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d016      	beq.n	8001e94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f97c 	bl	8001168 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e74:	f7ff f978 	bl	8001168 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e173      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e86:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x234>
 8001e92:	e01b      	b.n	8001ecc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e94:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9a:	f7ff f965 	bl	8001168 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	e00e      	b.n	8001ec0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea2:	f7ff f961 	bl	8001168 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d907      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e15c      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	42470000 	.word	0x42470000
 8001ebc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	4b8a      	ldr	r3, [pc, #552]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1ea      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 8097 	beq.w	8002008 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ede:	4b83      	ldr	r3, [pc, #524]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10f      	bne.n	8001f0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	4b7f      	ldr	r3, [pc, #508]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	4a7e      	ldr	r2, [pc, #504]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efa:	4b7c      	ldr	r3, [pc, #496]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f06:	2301      	movs	r3, #1
 8001f08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0a:	4b79      	ldr	r3, [pc, #484]	@ (80020f0 <HAL_RCC_OscConfig+0x4b0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d118      	bne.n	8001f48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f16:	4b76      	ldr	r3, [pc, #472]	@ (80020f0 <HAL_RCC_OscConfig+0x4b0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a75      	ldr	r2, [pc, #468]	@ (80020f0 <HAL_RCC_OscConfig+0x4b0>)
 8001f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f22:	f7ff f921 	bl	8001168 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2a:	f7ff f91d 	bl	8001168 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e118      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3c:	4b6c      	ldr	r3, [pc, #432]	@ (80020f0 <HAL_RCC_OscConfig+0x4b0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCC_OscConfig+0x31e>
 8001f50:	4b66      	ldr	r3, [pc, #408]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f54:	4a65      	ldr	r2, [pc, #404]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f5c:	e01c      	b.n	8001f98 <HAL_RCC_OscConfig+0x358>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x340>
 8001f66:	4b61      	ldr	r3, [pc, #388]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6a:	4a60      	ldr	r2, [pc, #384]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f72:	4b5e      	ldr	r3, [pc, #376]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f76:	4a5d      	ldr	r2, [pc, #372]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0x358>
 8001f80:	4b5a      	ldr	r3, [pc, #360]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f84:	4a59      	ldr	r2, [pc, #356]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f86:	f023 0301 	bic.w	r3, r3, #1
 8001f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f8c:	4b57      	ldr	r3, [pc, #348]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f90:	4a56      	ldr	r2, [pc, #344]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f92:	f023 0304 	bic.w	r3, r3, #4
 8001f96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d015      	beq.n	8001fcc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa0:	f7ff f8e2 	bl	8001168 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa8:	f7ff f8de 	bl	8001168 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e0d7      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0ee      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x368>
 8001fca:	e014      	b.n	8001ff6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fcc:	f7ff f8cc 	bl	8001168 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd4:	f7ff f8c8 	bl	8001168 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e0c1      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fea:	4b40      	ldr	r3, [pc, #256]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1ee      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ff6:	7dfb      	ldrb	r3, [r7, #23]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	4a3a      	ldr	r2, [pc, #232]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8002002:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002006:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80ad 	beq.w	800216c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002012:	4b36      	ldr	r3, [pc, #216]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b08      	cmp	r3, #8
 800201c:	d060      	beq.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d145      	bne.n	80020b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b33      	ldr	r3, [pc, #204]	@ (80020f4 <HAL_RCC_OscConfig+0x4b4>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff f89c 	bl	8001168 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002034:	f7ff f898 	bl	8001168 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e093      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	4b29      	ldr	r3, [pc, #164]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69da      	ldr	r2, [r3, #28]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002060:	019b      	lsls	r3, r3, #6
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002068:	085b      	lsrs	r3, r3, #1
 800206a:	3b01      	subs	r3, #1
 800206c:	041b      	lsls	r3, r3, #16
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002074:	061b      	lsls	r3, r3, #24
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207c:	071b      	lsls	r3, r3, #28
 800207e:	491b      	ldr	r1, [pc, #108]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002084:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <HAL_RCC_OscConfig+0x4b4>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7ff f86d 	bl	8001168 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff f869 	bl	8001168 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e064      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a4:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x452>
 80020b0:	e05c      	b.n	800216c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <HAL_RCC_OscConfig+0x4b4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff f856 	bl	8001168 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff f852 	bl	8001168 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e04d      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_RCC_OscConfig+0x4ac>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x480>
 80020de:	e045      	b.n	800216c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e040      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40007000 	.word	0x40007000
 80020f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002178 <HAL_RCC_OscConfig+0x538>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d030      	beq.n	8002168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d129      	bne.n	8002168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d122      	bne.n	8002168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800212e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002130:	4293      	cmp	r3, r2
 8002132:	d119      	bne.n	8002168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	3b01      	subs	r3, #1
 8002142:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d10f      	bne.n	8002168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002152:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d107      	bne.n	8002168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800

0800217c <memset>:
 800217c:	4402      	add	r2, r0
 800217e:	4603      	mov	r3, r0
 8002180:	4293      	cmp	r3, r2
 8002182:	d100      	bne.n	8002186 <memset+0xa>
 8002184:	4770      	bx	lr
 8002186:	f803 1b01 	strb.w	r1, [r3], #1
 800218a:	e7f9      	b.n	8002180 <memset+0x4>

0800218c <__libc_init_array>:
 800218c:	b570      	push	{r4, r5, r6, lr}
 800218e:	4d0d      	ldr	r5, [pc, #52]	@ (80021c4 <__libc_init_array+0x38>)
 8002190:	4c0d      	ldr	r4, [pc, #52]	@ (80021c8 <__libc_init_array+0x3c>)
 8002192:	1b64      	subs	r4, r4, r5
 8002194:	10a4      	asrs	r4, r4, #2
 8002196:	2600      	movs	r6, #0
 8002198:	42a6      	cmp	r6, r4
 800219a:	d109      	bne.n	80021b0 <__libc_init_array+0x24>
 800219c:	4d0b      	ldr	r5, [pc, #44]	@ (80021cc <__libc_init_array+0x40>)
 800219e:	4c0c      	ldr	r4, [pc, #48]	@ (80021d0 <__libc_init_array+0x44>)
 80021a0:	f000 f818 	bl	80021d4 <_init>
 80021a4:	1b64      	subs	r4, r4, r5
 80021a6:	10a4      	asrs	r4, r4, #2
 80021a8:	2600      	movs	r6, #0
 80021aa:	42a6      	cmp	r6, r4
 80021ac:	d105      	bne.n	80021ba <__libc_init_array+0x2e>
 80021ae:	bd70      	pop	{r4, r5, r6, pc}
 80021b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b4:	4798      	blx	r3
 80021b6:	3601      	adds	r6, #1
 80021b8:	e7ee      	b.n	8002198 <__libc_init_array+0xc>
 80021ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80021be:	4798      	blx	r3
 80021c0:	3601      	adds	r6, #1
 80021c2:	e7f2      	b.n	80021aa <__libc_init_array+0x1e>
 80021c4:	08002204 	.word	0x08002204
 80021c8:	08002204 	.word	0x08002204
 80021cc:	08002204 	.word	0x08002204
 80021d0:	08002208 	.word	0x08002208

080021d4 <_init>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	bf00      	nop
 80021d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021da:	bc08      	pop	{r3}
 80021dc:	469e      	mov	lr, r3
 80021de:	4770      	bx	lr

080021e0 <_fini>:
 80021e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e2:	bf00      	nop
 80021e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021e6:	bc08      	pop	{r3}
 80021e8:	469e      	mov	lr, r3
 80021ea:	4770      	bx	lr
