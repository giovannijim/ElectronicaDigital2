
ANGELLAB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000022c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089b  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c5  00000000  00000000  00000b67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000333  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cc  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ec  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  9e:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_pins>:
volatile uint8_t iniciar=0;
volatile uint8_t tabla[]= {0b00111111, 0b00000110, 0b01011011 , 0b01001111, 0b01100110, 0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01101111, 0b01110111, 0b01111100, 0b00111001, 0b01011110, 0b01111001, 0b01110001};

void init_pins(){
	// Configurar los pines PC0 como entradas y habilitar resistencias de pull-up
	DDRC &= ~(1 << DDC0);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC0);
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	88 b9       	out	0x08, r24	; 8
	
	DDRD |= (1 << DDD0) | (1 << DDD1) | (1 << DDD2) | (1 << DDD3) | (1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7); // PD0-PD7 como salidas
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a b9       	out	0x0a, r24	; 10
	
	
	PCICR |= (1 << PCIE1);
  b8:	e8 e6       	ldi	r30, 0x68	; 104
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8);        // Habilitar interrupción para PC0 (PCINT8)
  c2:	ec e6       	ldi	r30, 0x6C	; 108
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24
	
	// Habilitar interrupciones globales
	sei();
  cc:	78 94       	sei
  ce:	08 95       	ret

000000d0 <__vector_4>:
}

ISR(PCINT1_vect) {
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
	// Incrementar el contador
	if (iniciar==0){
  dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e0:	81 11       	cpse	r24, r1
  e2:	03 c0       	rjmp	.+6      	; 0xea <__vector_4+0x1a>
		iniciar = 1;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	
}
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <main>:


int main(void)
{
	init_pins();
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <init_pins>
    while(1)
    {
        if (iniciar==1){
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x4>
			PORTD &=0;
 102:	8b b1       	in	r24, 0x0b	; 11
 104:	1b b8       	out	0x0b, r1	; 11
			PORTD |=0b01101101;
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	8d 66       	ori	r24, 0x6D	; 109
 10a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	83 ec       	ldi	r24, 0xC3	; 195
 110:	99 e0       	ldi	r25, 0x09	; 9
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x1c>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x26>
 11c:	00 00       	nop
			_delay_ms(200);
			PORTD &=0;
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	1b b8       	out	0x0b, r1	; 11
			PORTD |=0b01100110;
 122:	8b b1       	in	r24, 0x0b	; 11
 124:	86 66       	ori	r24, 0x66	; 102
 126:	8b b9       	out	0x0b, r24	; 11
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	83 ec       	ldi	r24, 0xC3	; 195
 12c:	99 e0       	ldi	r25, 0x09	; 9
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x38>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x42>
 138:	00 00       	nop
			_delay_ms(200);
			PORTD &=0;
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	1b b8       	out	0x0b, r1	; 11
			PORTD |=0b01001111;
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	8f 64       	ori	r24, 0x4F	; 79
 142:	8b b9       	out	0x0b, r24	; 11
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	83 ec       	ldi	r24, 0xC3	; 195
 148:	99 e0       	ldi	r25, 0x09	; 9
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x54>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x5e>
 154:	00 00       	nop
			_delay_ms(200);
			PORTD &=0;
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	1b b8       	out	0x0b, r1	; 11
			PORTD |=0b01011011;
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	8b 65       	ori	r24, 0x5B	; 91
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	83 ec       	ldi	r24, 0xC3	; 195
 164:	99 e0       	ldi	r25, 0x09	; 9
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x70>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x7a>
 170:	00 00       	nop
			_delay_ms(200);
			PORTD &=0;
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	1b b8       	out	0x0b, r1	; 11
			PORTD |=0b00000110;
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	86 60       	ori	r24, 0x06	; 6
 17a:	8b b9       	out	0x0b, r24	; 11
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	83 ec       	ldi	r24, 0xC3	; 195
 180:	99 e0       	ldi	r25, 0x09	; 9
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x8c>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x96>
 18c:	00 00       	nop
			_delay_ms(200);
			PORTD &=0;
 18e:	8b b1       	in	r24, 0x0b	; 11
 190:	1b b8       	out	0x0b, r1	; 11
			PORTD |=0b00111111;
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	8f 63       	ori	r24, 0x3F	; 63
 196:	8b b9       	out	0x0b, r24	; 11
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	83 ec       	ldi	r24, 0xC3	; 195
 19c:	99 e0       	ldi	r25, 0x09	; 9
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0xa8>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0xb2>
 1a8:	00 00       	nop
			_delay_ms(200);
			PORTD &=0;
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	1b b8       	out	0x0b, r1	; 11
			iniciar = 0;
 1ae:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b2:	a3 cf       	rjmp	.-186    	; 0xfa <main+0x4>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
